
OCTO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003858  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  00003858  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000cc  20000004  0000385c  00020004  2**2
                  ALLOC
  3 .stack        00002000  200000d0  00003928  00020004  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00023ff6  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000033b7  00000000  00000000  0004407b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000053dd  00000000  00000000  00047432  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000590  00000000  00000000  0004c80f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000588  00000000  00000000  0004cd9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000066bc  00000000  00000000  0004d327  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d6e3  00000000  00000000  000539e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00084b94  00000000  00000000  000610c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000eec  00000000  00000000  000e5c5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200020d0 	.word	0x200020d0
       4:	00001b1d 	.word	0x00001b1d
       8:	00001b19 	.word	0x00001b19
       c:	00001b19 	.word	0x00001b19
	...
      2c:	00001b19 	.word	0x00001b19
	...
      38:	00001b19 	.word	0x00001b19
      3c:	00001b19 	.word	0x00001b19
      40:	00001b19 	.word	0x00001b19
      44:	00001b19 	.word	0x00001b19
      48:	00001b19 	.word	0x00001b19
      4c:	00001b19 	.word	0x00001b19
      50:	00001b19 	.word	0x00001b19
      54:	00001b19 	.word	0x00001b19
      58:	00001b19 	.word	0x00001b19
      5c:	00001b19 	.word	0x00001b19
      60:	00001b19 	.word	0x00001b19
      64:	00001495 	.word	0x00001495
      68:	000014a5 	.word	0x000014a5
      6c:	000014b5 	.word	0x000014b5
      70:	000014c5 	.word	0x000014c5
	...
      7c:	00001b19 	.word	0x00001b19
      80:	00001b19 	.word	0x00001b19
      84:	00001b19 	.word	0x00001b19
      88:	00001b19 	.word	0x00001b19
      8c:	00001b19 	.word	0x00001b19
      90:	00001b19 	.word	0x00001b19
	...
      9c:	0000037d 	.word	0x0000037d
      a0:	00001b19 	.word	0x00001b19
      a4:	00000439 	.word	0x00000439
      a8:	00001b19 	.word	0x00001b19
      ac:	00001b19 	.word	0x00001b19
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000004 	.word	0x20000004
      d4:	00000000 	.word	0x00000000
      d8:	00003858 	.word	0x00003858

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000008 	.word	0x20000008
     108:	00003858 	.word	0x00003858
     10c:	00003858 	.word	0x00003858
     110:	00000000 	.word	0x00000000

00000114 <configure_gas_gauge>:

const uint8_t test_pattern[] = {0xF0, 0x01};
static uint8_t read_buffer[DATA_LENGTH];

void configure_gas_gauge()
{
     114:	b530      	push	{r4, r5, lr}
     116:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
     118:	aa01      	add	r2, sp, #4
     11a:	2364      	movs	r3, #100	; 0x64
     11c:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
     11e:	4b21      	ldr	r3, [pc, #132]	; (1a4 <configure_gas_gauge+0x90>)
     120:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
     122:	2300      	movs	r3, #0
     124:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
     126:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
     128:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
     12a:	2180      	movs	r1, #128	; 0x80
     12c:	0389      	lsls	r1, r1, #14
     12e:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
     130:	2101      	movs	r1, #1
     132:	4249      	negs	r1, r1
     134:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
     136:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
     138:	3125      	adds	r1, #37	; 0x25
     13a:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     13c:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
     13e:	3108      	adds	r1, #8
     140:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
     142:	3101      	adds	r1, #1
     144:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
     146:	3101      	adds	r1, #1
     148:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
     14a:	33d7      	adds	r3, #215	; 0xd7
     14c:	8613      	strh	r3, [r2, #48]	; 0x30
    i2c_master_get_config_defaults(&config_gas_gauge);
    //! [setup_config_defaults]
    
    //! [setup_change_config]
    config_gas_gauge.baud_rate   = I2C_MASTER_BAUD_RATE_100KHZ;
    config_gas_gauge.pinmux_pad0 = GAS_GAUGE_I2C_SERCOM_PINMUX_PAD0;
     14e:	4b16      	ldr	r3, [pc, #88]	; (1a8 <configure_gas_gauge+0x94>)
     150:	61d3      	str	r3, [r2, #28]
    config_gas_gauge.pinmux_pad1 = GAS_GAUGE_I2C_SERCOM_PINMUX_PAD1;
     152:	4b16      	ldr	r3, [pc, #88]	; (1ac <configure_gas_gauge+0x98>)
     154:	6213      	str	r3, [r2, #32]
    //! [setup_change_config]
    
    //! [setup_set_config]
    i2c_master_init(&gas_gauge_instance, GAS_GAUGE_I2C_MODULE, &config_gas_gauge);
     156:	4c16      	ldr	r4, [pc, #88]	; (1b0 <configure_gas_gauge+0x9c>)
     158:	4916      	ldr	r1, [pc, #88]	; (1b4 <configure_gas_gauge+0xa0>)
     15a:	0020      	movs	r0, r4
     15c:	4b16      	ldr	r3, [pc, #88]	; (1b8 <configure_gas_gauge+0xa4>)
     15e:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     160:	6824      	ldr	r4, [r4, #0]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     162:	2207      	movs	r2, #7
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     164:	69e3      	ldr	r3, [r4, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     166:	421a      	tst	r2, r3
     168:	d1fc      	bne.n	164 <configure_gas_gauge+0x50>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     16a:	6822      	ldr	r2, [r4, #0]
     16c:	2302      	movs	r3, #2
     16e:	4313      	orrs	r3, r2
     170:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     172:	4d0f      	ldr	r5, [pc, #60]	; (1b0 <configure_gas_gauge+0x9c>)
     174:	6828      	ldr	r0, [r5, #0]
     176:	4b11      	ldr	r3, [pc, #68]	; (1bc <configure_gas_gauge+0xa8>)
     178:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     17a:	231f      	movs	r3, #31
     17c:	4018      	ands	r0, r3
     17e:	3b1e      	subs	r3, #30
     180:	4083      	lsls	r3, r0
     182:	4a0f      	ldr	r2, [pc, #60]	; (1c0 <configure_gas_gauge+0xac>)
     184:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     186:	88e8      	ldrh	r0, [r5, #6]
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
     188:	2300      	movs	r3, #0
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     18a:	2110      	movs	r1, #16
     18c:	e005      	b.n	19a <configure_gas_gauge+0x86>
		timeout_counter++;
     18e:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     190:	4283      	cmp	r3, r0
     192:	d302      	bcc.n	19a <configure_gas_gauge+0x86>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     194:	2310      	movs	r3, #16
     196:	8363      	strh	r3, [r4, #26]
     198:	e002      	b.n	1a0 <configure_gas_gauge+0x8c>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     19a:	8b62      	ldrh	r2, [r4, #26]
     19c:	420a      	tst	r2, r1
     19e:	d0f6      	beq.n	18e <configure_gas_gauge+0x7a>
    //! [setup_set_config]

    //! [setup_enable]
    i2c_master_enable(&gas_gauge_instance);
    //! [setup_enable]
}
     1a0:	b00f      	add	sp, #60	; 0x3c
     1a2:	bd30      	pop	{r4, r5, pc}
     1a4:	00000d48 	.word	0x00000d48
     1a8:	00080002 	.word	0x00080002
     1ac:	00090002 	.word	0x00090002
     1b0:	20000054 	.word	0x20000054
     1b4:	42000800 	.word	0x42000800
     1b8:	00000501 	.word	0x00000501
     1bc:	00001469 	.word	0x00001469
     1c0:	e000e100 	.word	0xe000e100

000001c4 <usart_write_callback>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
     1c4:	2280      	movs	r2, #128	; 0x80
     1c6:	01d2      	lsls	r2, r2, #7
     1c8:	4b01      	ldr	r3, [pc, #4]	; (1d0 <usart_write_callback+0xc>)
     1ca:	61da      	str	r2, [r3, #28]
//! \param[in] usart_module - The USART module to receive the callback
//=============================================================================
void usart_write_callback(struct usart_module *const usart_module)
{
    port_pin_toggle_output_level(LED_RED_PIN);
}
     1cc:	4770      	bx	lr
     1ce:	46c0      	nop			; (mov r8, r8)
     1d0:	41004400 	.word	0x41004400

000001d4 <usart_read_callback>:
//! \brief Callback Function for USART Read (BT).
//!
//! \param[in] usart_module - The USART module to receive the callback
//=============================================================================
void usart_read_callback(struct usart_module *const usart_module)
{
     1d4:	b570      	push	{r4, r5, r6, lr}
     1d6:	b084      	sub	sp, #16
    usart_write_buffer_job(&usart_instance, (uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
     1d8:	4d0e      	ldr	r5, [pc, #56]	; (214 <usart_read_callback+0x40>)
     1da:	4c0f      	ldr	r4, [pc, #60]	; (218 <usart_read_callback+0x44>)
     1dc:	2205      	movs	r2, #5
     1de:	0029      	movs	r1, r5
     1e0:	0020      	movs	r0, r4
     1e2:	4b0e      	ldr	r3, [pc, #56]	; (21c <usart_read_callback+0x48>)
     1e4:	4798      	blx	r3
     1e6:	2280      	movs	r2, #128	; 0x80
     1e8:	0212      	lsls	r2, r2, #8
     1ea:	4b0d      	ldr	r3, [pc, #52]	; (220 <usart_read_callback+0x4c>)
     1ec:	61da      	str	r2, [r3, #28]
    port_pin_toggle_output_level(LED_GREEN_PIN);
    
    uint8_t answer_string[] = "Received: ";
     1ee:	a901      	add	r1, sp, #4
     1f0:	4b0c      	ldr	r3, [pc, #48]	; (224 <usart_read_callback+0x50>)
     1f2:	000a      	movs	r2, r1
     1f4:	cb41      	ldmia	r3!, {r0, r6}
     1f6:	c241      	stmia	r2!, {r0, r6}
     1f8:	8818      	ldrh	r0, [r3, #0]
     1fa:	8010      	strh	r0, [r2, #0]
     1fc:	789b      	ldrb	r3, [r3, #2]
     1fe:	7093      	strb	r3, [r2, #2]
    usart_write_buffer_wait(&usart_instance, answer_string, sizeof(rx_buffer));
     200:	2205      	movs	r2, #5
     202:	0020      	movs	r0, r4
     204:	4e08      	ldr	r6, [pc, #32]	; (228 <usart_read_callback+0x54>)
     206:	47b0      	blx	r6
    
    usart_write_buffer_wait(&usart_instance, (uint8_t *)rx_buffer, sizeof(rx_buffer));
     208:	2205      	movs	r2, #5
     20a:	0029      	movs	r1, r5
     20c:	0020      	movs	r0, r4
     20e:	47b0      	blx	r6
}
     210:	b004      	add	sp, #16
     212:	bd70      	pop	{r4, r5, r6, pc}
     214:	200000b0 	.word	0x200000b0
     218:	2000007c 	.word	0x2000007c
     21c:	00001279 	.word	0x00001279
     220:	41004400 	.word	0x41004400
     224:	00003750 	.word	0x00003750
     228:	0000116d 	.word	0x0000116d

0000022c <configure_usart>:

//=============================================================================
//! \brief Setup Function for USART (Debug and BT).
//=============================================================================
void configure_usart(void)
{
     22c:	b530      	push	{r4, r5, lr}
     22e:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     230:	2380      	movs	r3, #128	; 0x80
     232:	05db      	lsls	r3, r3, #23
     234:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     236:	2300      	movs	r3, #0
     238:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     23a:	22ff      	movs	r2, #255	; 0xff
     23c:	4669      	mov	r1, sp
     23e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     240:	2200      	movs	r2, #0
     242:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     244:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     246:	2101      	movs	r1, #1
     248:	2024      	movs	r0, #36	; 0x24
     24a:	466c      	mov	r4, sp
     24c:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
     24e:	3001      	adds	r0, #1
     250:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
     252:	3125      	adds	r1, #37	; 0x25
     254:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
     256:	3101      	adds	r1, #1
     258:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
     25a:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     25c:	3105      	adds	r1, #5
     25e:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
     260:	3101      	adds	r1, #1
     262:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     264:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     266:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     268:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     26a:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     26c:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     26e:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
     270:	2313      	movs	r3, #19
     272:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     274:	7762      	strb	r2, [r4, #29]
    //! [setup_config_defaults]
    
    // Debug USART
    #ifdef DBG_MODE
    //! [setup_change_config]
    config_usart.baudrate    = 115200;
     276:	23e1      	movs	r3, #225	; 0xe1
     278:	025b      	lsls	r3, r3, #9
     27a:	9308      	str	r3, [sp, #32]
    config_usart.mux_setting = DBG_UART_SERCOM_MUX_SETTING;
     27c:	2380      	movs	r3, #128	; 0x80
     27e:	035b      	lsls	r3, r3, #13
     280:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = DBG_UART_SERCOM_PINMUX_PAD0;
     282:	4b27      	ldr	r3, [pc, #156]	; (320 <configure_usart+0xf4>)
     284:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = DBG_UART_SERCOM_PINMUX_PAD1;
     286:	4b27      	ldr	r3, [pc, #156]	; (324 <configure_usart+0xf8>)
     288:	930d      	str	r3, [sp, #52]	; 0x34
    config_usart.pinmux_pad2 = DBG_UART_SERCOM_PINMUX_PAD2;
     28a:	2301      	movs	r3, #1
     28c:	425b      	negs	r3, r3
     28e:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad3 = DBG_UART_SERCOM_PINMUX_PAD3;
     290:	930f      	str	r3, [sp, #60]	; 0x3c
    //! [setup_change_config]

    //! [setup_set_config]
    while (usart_init(&usart_instance, DBG_UART_MODULE, &config_usart) != STATUS_OK)
     292:	4d25      	ldr	r5, [pc, #148]	; (328 <configure_usart+0xfc>)
     294:	4c25      	ldr	r4, [pc, #148]	; (32c <configure_usart+0x100>)
     296:	466a      	mov	r2, sp
     298:	4925      	ldr	r1, [pc, #148]	; (330 <configure_usart+0x104>)
     29a:	0028      	movs	r0, r5
     29c:	47a0      	blx	r4
     29e:	2800      	cmp	r0, #0
     2a0:	d1f9      	bne.n	296 <configure_usart+0x6a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     2a2:	4d21      	ldr	r5, [pc, #132]	; (328 <configure_usart+0xfc>)
     2a4:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     2a6:	0020      	movs	r0, r4
     2a8:	4b22      	ldr	r3, [pc, #136]	; (334 <configure_usart+0x108>)
     2aa:	4798      	blx	r3
     2ac:	231f      	movs	r3, #31
     2ae:	4018      	ands	r0, r3
     2b0:	3b1e      	subs	r3, #30
     2b2:	4083      	lsls	r3, r0
     2b4:	4a20      	ldr	r2, [pc, #128]	; (338 <configure_usart+0x10c>)
     2b6:	6013      	str	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     2b8:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     2ba:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     2bc:	2b00      	cmp	r3, #0
     2be:	d1fc      	bne.n	2ba <configure_usart+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     2c0:	6822      	ldr	r2, [r4, #0]
     2c2:	3302      	adds	r3, #2
     2c4:	4313      	orrs	r3, r2
     2c6:	6023      	str	r3, [r4, #0]
    #endif


    // BT USART
    //! [setup_change_config]
    config_usart.baudrate    = 115200;
     2c8:	23e1      	movs	r3, #225	; 0xe1
     2ca:	025b      	lsls	r3, r3, #9
     2cc:	9308      	str	r3, [sp, #32]
    config_usart.mux_setting = BT_UART_SERCOM_MUX_SETTING;
     2ce:	2380      	movs	r3, #128	; 0x80
     2d0:	035b      	lsls	r3, r3, #13
     2d2:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = BT_UART_SERCOM_PINMUX_PAD0;
     2d4:	4b19      	ldr	r3, [pc, #100]	; (33c <configure_usart+0x110>)
     2d6:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = BT_UART_SERCOM_PINMUX_PAD1;
     2d8:	4b19      	ldr	r3, [pc, #100]	; (340 <configure_usart+0x114>)
     2da:	930d      	str	r3, [sp, #52]	; 0x34
    config_usart.pinmux_pad2 = BT_UART_SERCOM_PINMUX_PAD2;
     2dc:	2301      	movs	r3, #1
     2de:	425b      	negs	r3, r3
     2e0:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad3 = BT_UART_SERCOM_PINMUX_PAD3;
     2e2:	930f      	str	r3, [sp, #60]	; 0x3c
    //! [setup_change_config]

    //! [setup_set_config]
    while (usart_init(&usart_instance, BT_UART_MODULE, &config_usart) != STATUS_OK)
     2e4:	4d10      	ldr	r5, [pc, #64]	; (328 <configure_usart+0xfc>)
     2e6:	4c11      	ldr	r4, [pc, #68]	; (32c <configure_usart+0x100>)
     2e8:	466a      	mov	r2, sp
     2ea:	4916      	ldr	r1, [pc, #88]	; (344 <configure_usart+0x118>)
     2ec:	0028      	movs	r0, r5
     2ee:	47a0      	blx	r4
     2f0:	2800      	cmp	r0, #0
     2f2:	d1f9      	bne.n	2e8 <configure_usart+0xbc>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     2f4:	4d0c      	ldr	r5, [pc, #48]	; (328 <configure_usart+0xfc>)
     2f6:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     2f8:	0020      	movs	r0, r4
     2fa:	4b0e      	ldr	r3, [pc, #56]	; (334 <configure_usart+0x108>)
     2fc:	4798      	blx	r3
     2fe:	231f      	movs	r3, #31
     300:	4018      	ands	r0, r3
     302:	3b1e      	subs	r3, #30
     304:	4083      	lsls	r3, r0
     306:	4a0c      	ldr	r2, [pc, #48]	; (338 <configure_usart+0x10c>)
     308:	6013      	str	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     30a:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     30c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     30e:	2b00      	cmp	r3, #0
     310:	d1fc      	bne.n	30c <configure_usart+0xe0>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     312:	6822      	ldr	r2, [r4, #0]
     314:	3302      	adds	r3, #2
     316:	4313      	orrs	r3, r2
     318:	6023      	str	r3, [r4, #0]

    //! [setup_enable]
    usart_enable(&usart_instance);
    //! [setup_enable]
    
}
     31a:	b011      	add	sp, #68	; 0x44
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	46c0      	nop			; (mov r8, r8)
     320:	00160002 	.word	0x00160002
     324:	00170002 	.word	0x00170002
     328:	2000007c 	.word	0x2000007c
     32c:	00000e09 	.word	0x00000e09
     330:	42001400 	.word	0x42001400
     334:	00001469 	.word	0x00001469
     338:	e000e100 	.word	0xe000e100
     33c:	00100002 	.word	0x00100002
     340:	00110002 	.word	0x00110002
     344:	42000c00 	.word	0x42000c00

00000348 <configure_usart_callbacks>:

//=============================================================================
//! \brief Configure callback Function for USART (BT).
//=============================================================================
void configure_usart_callbacks(void)
{
     348:	b570      	push	{r4, r5, r6, lr}
    //! [setup_register_callbacks]
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
     34a:	4c08      	ldr	r4, [pc, #32]	; (36c <configure_usart_callbacks+0x24>)
     34c:	2200      	movs	r2, #0
     34e:	4908      	ldr	r1, [pc, #32]	; (370 <configure_usart_callbacks+0x28>)
     350:	0020      	movs	r0, r4
     352:	4d08      	ldr	r5, [pc, #32]	; (374 <configure_usart_callbacks+0x2c>)
     354:	47a8      	blx	r5
    usart_register_callback(&usart_instance, usart_read_callback,  USART_CALLBACK_BUFFER_RECEIVED);
     356:	2201      	movs	r2, #1
     358:	4907      	ldr	r1, [pc, #28]	; (378 <configure_usart_callbacks+0x30>)
     35a:	0020      	movs	r0, r4
     35c:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     35e:	2231      	movs	r2, #49	; 0x31
     360:	5ca1      	ldrb	r1, [r4, r2]
     362:	2303      	movs	r3, #3
     364:	430b      	orrs	r3, r1
     366:	54a3      	strb	r3, [r4, r2]

    //! [setup_enable_callbacks]
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
    //! [setup_enable_callbacks]
}
     368:	bd70      	pop	{r4, r5, r6, pc}
     36a:	46c0      	nop			; (mov r8, r8)
     36c:	2000007c 	.word	0x2000007c
     370:	000001c5 	.word	0x000001c5
     374:	00001261 	.word	0x00001261
     378:	000001d5 	.word	0x000001d5

0000037c <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     37c:	b570      	push	{r4, r5, r6, lr}

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
	struct adc_module *module = _adc_instances[instance];
     37e:	4b2d      	ldr	r3, [pc, #180]	; (434 <ADC_Handler+0xb8>)
     380:	681c      	ldr	r4, [r3, #0]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
     382:	6823      	ldr	r3, [r4, #0]
     384:	7e1d      	ldrb	r5, [r3, #24]
     386:	b2ed      	uxtb	r5, r5

	if (flags & ADC_INTFLAG_RESRDY) {
     388:	07ea      	lsls	r2, r5, #31
     38a:	d535      	bpl.n	3f8 <ADC_Handler+0x7c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     38c:	7ee2      	ldrb	r2, [r4, #27]
     38e:	07d2      	lsls	r2, r2, #31
     390:	d532      	bpl.n	3f8 <ADC_Handler+0x7c>
     392:	7ea2      	ldrb	r2, [r4, #26]
     394:	07d2      	lsls	r2, r2, #31
     396:	d52f      	bpl.n	3f8 <ADC_Handler+0x7c>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     398:	2201      	movs	r2, #1
     39a:	761a      	strb	r2, [r3, #24]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     39c:	6822      	ldr	r2, [r4, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     39e:	7e53      	ldrb	r3, [r2, #25]

			while (adc_is_syncing(module)) {
     3a0:	b25b      	sxtb	r3, r3
     3a2:	2b00      	cmp	r3, #0
     3a4:	dbfb      	blt.n	39e <ADC_Handler+0x22>
				/* Wait for synchronization */
			}

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
     3a6:	6961      	ldr	r1, [r4, #20]
     3a8:	1c8b      	adds	r3, r1, #2
     3aa:	6163      	str	r3, [r4, #20]
     3ac:	8b53      	ldrh	r3, [r2, #26]
     3ae:	b29b      	uxth	r3, r3
     3b0:	800b      	strh	r3, [r1, #0]

			if (--module->remaining_conversions > 0) {
     3b2:	8b23      	ldrh	r3, [r4, #24]
     3b4:	3b01      	subs	r3, #1
     3b6:	b29b      	uxth	r3, r3
     3b8:	8323      	strh	r3, [r4, #24]
     3ba:	2b00      	cmp	r3, #0
     3bc:	d011      	beq.n	3e2 <ADC_Handler+0x66>
				if (module->software_trigger == true) {
     3be:	7f63      	ldrb	r3, [r4, #29]
     3c0:	2b00      	cmp	r3, #0
     3c2:	d019      	beq.n	3f8 <ADC_Handler+0x7c>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     3c4:	6822      	ldr	r2, [r4, #0]
     3c6:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     3c8:	b25b      	sxtb	r3, r3
     3ca:	2b00      	cmp	r3, #0
     3cc:	dbfb      	blt.n	3c6 <ADC_Handler+0x4a>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     3ce:	7b11      	ldrb	r1, [r2, #12]
     3d0:	2302      	movs	r3, #2
     3d2:	430b      	orrs	r3, r1
     3d4:	7313      	strb	r3, [r2, #12]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     3d6:	6822      	ldr	r2, [r4, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     3d8:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     3da:	b25b      	sxtb	r3, r3
     3dc:	2b00      	cmp	r3, #0
     3de:	dbfb      	blt.n	3d8 <ADC_Handler+0x5c>
     3e0:	e00a      	b.n	3f8 <ADC_Handler+0x7c>
					adc_start_conversion(module);
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
     3e2:	7f23      	ldrb	r3, [r4, #28]
     3e4:	2b05      	cmp	r3, #5
     3e6:	d107      	bne.n	3f8 <ADC_Handler+0x7c>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
     3e8:	2300      	movs	r3, #0
     3ea:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     3ec:	3301      	adds	r3, #1
     3ee:	6822      	ldr	r2, [r4, #0]
     3f0:	7593      	strb	r3, [r2, #22]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);

					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     3f2:	0020      	movs	r0, r4
     3f4:	68a3      	ldr	r3, [r4, #8]
     3f6:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     3f8:	076b      	lsls	r3, r5, #29
     3fa:	d50b      	bpl.n	414 <ADC_Handler+0x98>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     3fc:	2304      	movs	r3, #4
     3fe:	6822      	ldr	r2, [r4, #0]
     400:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     402:	7ee3      	ldrb	r3, [r4, #27]
     404:	079b      	lsls	r3, r3, #30
     406:	d505      	bpl.n	414 <ADC_Handler+0x98>
     408:	7ea3      	ldrb	r3, [r4, #26]
     40a:	079b      	lsls	r3, r3, #30
     40c:	d502      	bpl.n	414 <ADC_Handler+0x98>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     40e:	0020      	movs	r0, r4
     410:	68e3      	ldr	r3, [r4, #12]
     412:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     414:	07ab      	lsls	r3, r5, #30
     416:	d50b      	bpl.n	430 <ADC_Handler+0xb4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     418:	2302      	movs	r3, #2
     41a:	6822      	ldr	r2, [r4, #0]
     41c:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     41e:	7ee3      	ldrb	r3, [r4, #27]
     420:	075b      	lsls	r3, r3, #29
     422:	d505      	bpl.n	430 <ADC_Handler+0xb4>
     424:	7ea3      	ldrb	r3, [r4, #26]
     426:	075b      	lsls	r3, r3, #29
     428:	d502      	bpl.n	430 <ADC_Handler+0xb4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
     42a:	6923      	ldr	r3, [r4, #16]
     42c:	0020      	movs	r0, r4
     42e:	4798      	blx	r3

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
	_adc_interrupt_handler(0);
}
     430:	bd70      	pop	{r4, r5, r6, pc}
     432:	46c0      	nop			; (mov r8, r8)
     434:	200000b8 	.word	0x200000b8

00000438 <DAC_Handler>:
	}
}

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
     438:	b570      	push	{r4, r5, r6, lr}
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
	struct dac_module *module = _dac_instances[instance];
     43a:	4b26      	ldr	r3, [pc, #152]	; (4d4 <DAC_Handler+0x9c>)
     43c:	681c      	ldr	r4, [r3, #0]
	Dac *const dac_hw = module->hw;
     43e:	6825      	ldr	r5, [r4, #0]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
     440:	79ab      	ldrb	r3, [r5, #6]
     442:	07db      	lsls	r3, r3, #31
     444:	d50a      	bpl.n	45c <DAC_Handler+0x24>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
     446:	2301      	movs	r3, #1
     448:	71ab      	strb	r3, [r5, #6]

		if ((module->callback) &&
     44a:	0023      	movs	r3, r4
     44c:	3314      	adds	r3, #20
     44e:	d005      	beq.n	45c <DAC_Handler+0x24>
     450:	7c63      	ldrb	r3, [r4, #17]
     452:	2b00      	cmp	r3, #0
     454:	d002      	beq.n	45c <DAC_Handler+0x24>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
     456:	2000      	movs	r0, #0
     458:	69a3      	ldr	r3, [r4, #24]
     45a:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
     45c:	79ab      	ldrb	r3, [r5, #6]
     45e:	079b      	lsls	r3, r3, #30
     460:	d537      	bpl.n	4d2 <DAC_Handler+0x9a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
     462:	2302      	movs	r3, #2
     464:	71ab      	strb	r3, [r5, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
     466:	89a3      	ldrh	r3, [r4, #12]
     468:	b29b      	uxth	r3, r3
     46a:	2b00      	cmp	r3, #0
     46c:	d028      	beq.n	4c0 <DAC_Handler+0x88>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
     46e:	89e3      	ldrh	r3, [r4, #14]
     470:	b29b      	uxth	r3, r3
     472:	1c5a      	adds	r2, r3, #1
     474:	b292      	uxth	r2, r2
     476:	81e2      	strh	r2, [r4, #14]
     478:	005b      	lsls	r3, r3, #1
     47a:	68a2      	ldr	r2, [r4, #8]
     47c:	4694      	mov	ip, r2
     47e:	4463      	add	r3, ip
     480:	881b      	ldrh	r3, [r3, #0]
     482:	b29b      	uxth	r3, r3

		/* If in a write buffer job */
		if (module->remaining_conversions) {

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
     484:	81ab      	strh	r3, [r5, #12]
				module->job_buffer[module->transferred_conversions++];

			/* Write buffer size decrement */
			module->remaining_conversions --;
     486:	89a3      	ldrh	r3, [r4, #12]
     488:	3b01      	subs	r3, #1
     48a:	b29b      	uxth	r3, r3
     48c:	81a3      	strh	r3, [r4, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
     48e:	89a3      	ldrh	r3, [r4, #12]
     490:	b29b      	uxth	r3, r3
     492:	2b00      	cmp	r3, #0
     494:	d114      	bne.n	4c0 <DAC_Handler+0x88>
				module->job_status = STATUS_OK;
     496:	2200      	movs	r2, #0
     498:	3320      	adds	r3, #32
     49a:	54e2      	strb	r2, [r4, r3]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
     49c:	3b1e      	subs	r3, #30
     49e:	712b      	strb	r3, [r5, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
     4a0:	71ab      	strb	r3, [r5, #6]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     4a2:	2180      	movs	r1, #128	; 0x80
     4a4:	0489      	lsls	r1, r1, #18
     4a6:	337e      	adds	r3, #126	; 0x7e
     4a8:	4a0b      	ldr	r2, [pc, #44]	; (4d8 <DAC_Handler+0xa0>)
     4aa:	50d1      	str	r1, [r2, r3]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);

				if ((module->callback) &&
     4ac:	0023      	movs	r3, r4
     4ae:	3314      	adds	r3, #20
     4b0:	d00f      	beq.n	4d2 <DAC_Handler+0x9a>
     4b2:	7ca3      	ldrb	r3, [r4, #18]
     4b4:	2b00      	cmp	r3, #0
     4b6:	d006      	beq.n	4c6 <DAC_Handler+0x8e>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
     4b8:	2000      	movs	r0, #0
     4ba:	69e3      	ldr	r3, [r4, #28]
     4bc:	4798      	blx	r3
     4be:	e002      	b.n	4c6 <DAC_Handler+0x8e>
				}
			}
		}

		if ((module->callback) &&
     4c0:	0023      	movs	r3, r4
     4c2:	3314      	adds	r3, #20
     4c4:	d005      	beq.n	4d2 <DAC_Handler+0x9a>
     4c6:	7c23      	ldrb	r3, [r4, #16]
     4c8:	2b00      	cmp	r3, #0
     4ca:	d002      	beq.n	4d2 <DAC_Handler+0x9a>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
     4cc:	6963      	ldr	r3, [r4, #20]
     4ce:	2000      	movs	r0, #0
     4d0:	4798      	blx	r3

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
	_dac_interrupt_handler(0);
}
     4d2:	bd70      	pop	{r4, r5, r6, pc}
     4d4:	200000bc 	.word	0x200000bc
     4d8:	e000e100 	.word	0xe000e100

000004dc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     4dc:	b500      	push	{lr}
     4de:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     4e0:	ab01      	add	r3, sp, #4
     4e2:	2280      	movs	r2, #128	; 0x80
     4e4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     4e6:	780a      	ldrb	r2, [r1, #0]
     4e8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     4ea:	784a      	ldrb	r2, [r1, #1]
     4ec:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     4ee:	788a      	ldrb	r2, [r1, #2]
     4f0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     4f2:	0019      	movs	r1, r3
     4f4:	4b01      	ldr	r3, [pc, #4]	; (4fc <port_pin_set_config+0x20>)
     4f6:	4798      	blx	r3
}
     4f8:	b003      	add	sp, #12
     4fa:	bd00      	pop	{pc}
     4fc:	00001ab9 	.word	0x00001ab9

00000500 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     500:	b5f0      	push	{r4, r5, r6, r7, lr}
     502:	465f      	mov	r7, fp
     504:	4656      	mov	r6, sl
     506:	464d      	mov	r5, r9
     508:	4644      	mov	r4, r8
     50a:	b4f0      	push	{r4, r5, r6, r7}
     50c:	b08b      	sub	sp, #44	; 0x2c
     50e:	0007      	movs	r7, r0
     510:	000d      	movs	r5, r1
     512:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     514:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     516:	0008      	movs	r0, r1
     518:	4b99      	ldr	r3, [pc, #612]	; (780 <i2c_master_init+0x280>)
     51a:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     51c:	4999      	ldr	r1, [pc, #612]	; (784 <i2c_master_init+0x284>)
     51e:	6a0a      	ldr	r2, [r1, #32]
     520:	1c84      	adds	r4, r0, #2
     522:	2301      	movs	r3, #1
     524:	40a3      	lsls	r3, r4
     526:	4313      	orrs	r3, r2
     528:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     52a:	a909      	add	r1, sp, #36	; 0x24
     52c:	7b33      	ldrb	r3, [r6, #12]
     52e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     530:	3014      	adds	r0, #20
     532:	b2c4      	uxtb	r4, r0
     534:	0020      	movs	r0, r4
     536:	4b94      	ldr	r3, [pc, #592]	; (788 <i2c_master_init+0x288>)
     538:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     53a:	0020      	movs	r0, r4
     53c:	4b93      	ldr	r3, [pc, #588]	; (78c <i2c_master_init+0x28c>)
     53e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     540:	7b30      	ldrb	r0, [r6, #12]
     542:	2100      	movs	r1, #0
     544:	4b92      	ldr	r3, [pc, #584]	; (790 <i2c_master_init+0x290>)
     546:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     548:	682b      	ldr	r3, [r5, #0]
		return STATUS_ERR_DENIED;
     54a:	201c      	movs	r0, #28
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
	system_gclk_chan_enable(gclk_index);
	sercom_set_gclk_generator(config->generator_source, false);

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     54c:	079b      	lsls	r3, r3, #30
     54e:	d500      	bpl.n	552 <i2c_master_init+0x52>
     550:	e10f      	b.n	772 <i2c_master_init+0x272>
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     552:	682b      	ldr	r3, [r5, #0]
		return STATUS_BUSY;
     554:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     556:	07db      	lsls	r3, r3, #31
     558:	d500      	bpl.n	55c <i2c_master_init+0x5c>
     55a:	e10a      	b.n	772 <i2c_master_init+0x272>
		return STATUS_BUSY;
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     55c:	6838      	ldr	r0, [r7, #0]
     55e:	4b88      	ldr	r3, [pc, #544]	; (780 <i2c_master_init+0x280>)
     560:	4699      	mov	r9, r3
     562:	4798      	blx	r3
     564:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     566:	498b      	ldr	r1, [pc, #556]	; (794 <i2c_master_init+0x294>)
     568:	4b8b      	ldr	r3, [pc, #556]	; (798 <i2c_master_init+0x298>)
     56a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     56c:	00a4      	lsls	r4, r4, #2
     56e:	4b8b      	ldr	r3, [pc, #556]	; (79c <i2c_master_init+0x29c>)
     570:	50e7      	str	r7, [r4, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
     572:	2300      	movs	r3, #0
     574:	763b      	strb	r3, [r7, #24]
	module->enabled_callback = 0;
     576:	767b      	strb	r3, [r7, #25]
	module->buffer_length = 0;
     578:	2400      	movs	r4, #0
     57a:	837b      	strh	r3, [r7, #26]
	module->buffer_remaining = 0;
     57c:	83bb      	strh	r3, [r7, #28]

	module->status = STATUS_OK;
     57e:	2225      	movs	r2, #37	; 0x25
     580:	54bc      	strb	r4, [r7, r2]
	module->buffer = NULL;
     582:	623b      	str	r3, [r7, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     584:	3314      	adds	r3, #20
     586:	602b      	str	r3, [r5, #0]
	int32_t tmp_baud = 0;
	int32_t tmp_baud_hs = 0;
	int32_t tmp_baudlow_hs = 0;
	enum status_code tmp_status_code = STATUS_OK;

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     588:	683b      	ldr	r3, [r7, #0]
     58a:	4698      	mov	r8, r3
	Sercom *const sercom_hw = module->hw;

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     58c:	0018      	movs	r0, r3
     58e:	47c8      	blx	r9
     590:	4681      	mov	r9, r0
     592:	2380      	movs	r3, #128	; 0x80
     594:	aa08      	add	r2, sp, #32
     596:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     598:	7054      	strb	r4, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     59a:	2301      	movs	r3, #1
     59c:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     59e:	70d4      	strb	r4, [r2, #3]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);

	uint32_t pad0 = config->pinmux_pad0;
     5a0:	69f0      	ldr	r0, [r6, #28]
	uint32_t pad1 = config->pinmux_pad1;
     5a2:	6a35      	ldr	r5, [r6, #32]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
     5a4:	2800      	cmp	r0, #0
     5a6:	d103      	bne.n	5b0 <i2c_master_init+0xb0>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     5a8:	2100      	movs	r1, #0
     5aa:	4640      	mov	r0, r8
     5ac:	4b7c      	ldr	r3, [pc, #496]	; (7a0 <i2c_master_init+0x2a0>)
     5ae:	4798      	blx	r3
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
     5b0:	ab08      	add	r3, sp, #32
     5b2:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     5b4:	2302      	movs	r3, #2
     5b6:	aa08      	add	r2, sp, #32
     5b8:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     5ba:	0c00      	lsrs	r0, r0, #16
     5bc:	b2c0      	uxtb	r0, r0
     5be:	0011      	movs	r1, r2
     5c0:	4b78      	ldr	r3, [pc, #480]	; (7a4 <i2c_master_init+0x2a4>)
     5c2:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
     5c4:	2d00      	cmp	r5, #0
     5c6:	d104      	bne.n	5d2 <i2c_master_init+0xd2>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     5c8:	2101      	movs	r1, #1
     5ca:	4640      	mov	r0, r8
     5cc:	4b74      	ldr	r3, [pc, #464]	; (7a0 <i2c_master_init+0x2a0>)
     5ce:	4798      	blx	r3
     5d0:	0005      	movs	r5, r0
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
     5d2:	ab08      	add	r3, sp, #32
     5d4:	701d      	strb	r5, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     5d6:	2302      	movs	r3, #2
     5d8:	aa08      	add	r2, sp, #32
     5da:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     5dc:	0c28      	lsrs	r0, r5, #16
     5de:	b2c0      	uxtb	r0, r0
     5e0:	0011      	movs	r1, r2
     5e2:	4b70      	ldr	r3, [pc, #448]	; (7a4 <i2c_master_init+0x2a4>)
     5e4:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     5e6:	8ab3      	ldrh	r3, [r6, #20]
     5e8:	80fb      	strh	r3, [r7, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
     5ea:	8af3      	ldrh	r3, [r6, #22]
     5ec:	813b      	strh	r3, [r7, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     5ee:	7e32      	ldrb	r2, [r6, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     5f0:	2380      	movs	r3, #128	; 0x80

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     5f2:	2a00      	cmp	r2, #0
     5f4:	d104      	bne.n	600 <i2c_master_init+0x100>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     5f6:	4b6c      	ldr	r3, [pc, #432]	; (7a8 <i2c_master_init+0x2a8>)
     5f8:	789b      	ldrb	r3, [r3, #2]
     5fa:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     5fc:	0fdb      	lsrs	r3, r3, #31
     5fe:	01db      	lsls	r3, r3, #7
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
		tmp_ctrla |= config->start_hold_time;
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
     600:	68b1      	ldr	r1, [r6, #8]
     602:	6932      	ldr	r2, [r6, #16]
     604:	430a      	orrs	r2, r1
     606:	4313      	orrs	r3, r2

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
     608:	2224      	movs	r2, #36	; 0x24
     60a:	5cb2      	ldrb	r2, [r6, r2]
     60c:	2a00      	cmp	r2, #0
     60e:	d002      	beq.n	616 <i2c_master_init+0x116>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     610:	2280      	movs	r2, #128	; 0x80
     612:	05d2      	lsls	r2, r2, #23
     614:	4313      	orrs	r3, r2
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
		tmp_ctrla |= config->inactive_timeout;
     616:	6ab2      	ldr	r2, [r6, #40]	; 0x28
     618:	4313      	orrs	r3, r2
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     61a:	222c      	movs	r2, #44	; 0x2c
     61c:	5cb2      	ldrb	r2, [r6, r2]
     61e:	2a00      	cmp	r2, #0
     620:	d103      	bne.n	62a <i2c_master_init+0x12a>
     622:	2280      	movs	r2, #128	; 0x80
     624:	0492      	lsls	r2, r2, #18
     626:	4291      	cmp	r1, r2
     628:	d102      	bne.n	630 <i2c_master_init+0x130>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     62a:	2280      	movs	r2, #128	; 0x80
     62c:	0512      	lsls	r2, r2, #20
     62e:	4313      	orrs	r3, r2
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
     630:	222d      	movs	r2, #45	; 0x2d
     632:	5cb2      	ldrb	r2, [r6, r2]
     634:	2a00      	cmp	r2, #0
     636:	d002      	beq.n	63e <i2c_master_init+0x13e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     638:	2280      	movs	r2, #128	; 0x80
     63a:	0412      	lsls	r2, r2, #16
     63c:	4313      	orrs	r3, r2
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
     63e:	222e      	movs	r2, #46	; 0x2e
     640:	5cb2      	ldrb	r2, [r6, r2]
     642:	2a00      	cmp	r2, #0
     644:	d002      	beq.n	64c <i2c_master_init+0x14c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     646:	2280      	movs	r2, #128	; 0x80
     648:	03d2      	lsls	r2, r2, #15
     64a:	4313      	orrs	r3, r2
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
     64c:	4642      	mov	r2, r8
     64e:	6812      	ldr	r2, [r2, #0]
     650:	4313      	orrs	r3, r2
     652:	4642      	mov	r2, r8
     654:	6013      	str	r3, [r2, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     656:	2380      	movs	r3, #128	; 0x80
     658:	005b      	lsls	r3, r3, #1
     65a:	6053      	str	r3, [r2, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     65c:	4648      	mov	r0, r9
     65e:	3014      	adds	r0, #20
     660:	b2c0      	uxtb	r0, r0
     662:	4b52      	ldr	r3, [pc, #328]	; (7ac <i2c_master_init+0x2ac>)
     664:	4798      	blx	r3
     666:	0005      	movs	r5, r0
     668:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     66a:	27fa      	movs	r7, #250	; 0xfa
     66c:	00bf      	lsls	r7, r7, #2
     66e:	6833      	ldr	r3, [r6, #0]
     670:	435f      	muls	r7, r3
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     672:	6873      	ldr	r3, [r6, #4]
     674:	469a      	mov	sl, r3
	uint32_t trise       = config->sda_scl_rise_time_ns;
	
	tmp_baud = (int32_t)(div_ceil(
     676:	4c4e      	ldr	r4, [pc, #312]	; (7b0 <i2c_master_init+0x2b0>)
     678:	47a0      	blx	r4
     67a:	9002      	str	r0, [sp, #8]
     67c:	9103      	str	r1, [sp, #12]
     67e:	0078      	lsls	r0, r7, #1
     680:	47a0      	blx	r4
     682:	9000      	str	r0, [sp, #0]
     684:	9101      	str	r1, [sp, #4]
     686:	8e30      	ldrh	r0, [r6, #48]	; 0x30
     688:	4368      	muls	r0, r5
     68a:	47a0      	blx	r4
     68c:	4b49      	ldr	r3, [pc, #292]	; (7b4 <i2c_master_init+0x2b4>)
     68e:	469b      	mov	fp, r3
     690:	4a49      	ldr	r2, [pc, #292]	; (7b8 <i2c_master_init+0x2b8>)
     692:	4b4a      	ldr	r3, [pc, #296]	; (7bc <i2c_master_init+0x2bc>)
     694:	47d8      	blx	fp
     696:	4d4a      	ldr	r5, [pc, #296]	; (7c0 <i2c_master_init+0x2c0>)
     698:	2200      	movs	r2, #0
     69a:	4b4a      	ldr	r3, [pc, #296]	; (7c4 <i2c_master_init+0x2c4>)
     69c:	47a8      	blx	r5
     69e:	9004      	str	r0, [sp, #16]
     6a0:	9105      	str	r1, [sp, #20]
     6a2:	0038      	movs	r0, r7
     6a4:	47a0      	blx	r4
     6a6:	0002      	movs	r2, r0
     6a8:	000b      	movs	r3, r1
     6aa:	9804      	ldr	r0, [sp, #16]
     6ac:	9905      	ldr	r1, [sp, #20]
     6ae:	47d8      	blx	fp
     6b0:	0002      	movs	r2, r0
     6b2:	000b      	movs	r3, r1
     6b4:	4c44      	ldr	r4, [pc, #272]	; (7c8 <i2c_master_init+0x2c8>)
     6b6:	9802      	ldr	r0, [sp, #8]
     6b8:	9903      	ldr	r1, [sp, #12]
     6ba:	47a0      	blx	r4
     6bc:	9a00      	ldr	r2, [sp, #0]
     6be:	9b01      	ldr	r3, [sp, #4]
     6c0:	47a8      	blx	r5
     6c2:	2200      	movs	r2, #0
     6c4:	4b41      	ldr	r3, [pc, #260]	; (7cc <i2c_master_init+0x2cc>)
     6c6:	47a0      	blx	r4
     6c8:	9a00      	ldr	r2, [sp, #0]
     6ca:	9b01      	ldr	r3, [sp, #4]
     6cc:	4c40      	ldr	r4, [pc, #256]	; (7d0 <i2c_master_init+0x2d0>)
     6ce:	47a0      	blx	r4
     6d0:	4b40      	ldr	r3, [pc, #256]	; (7d4 <i2c_master_init+0x2d4>)
     6d2:	4798      	blx	r3
     6d4:	0004      	movs	r4, r0
			fgclk - fscl * (10 + fgclk * trise * 0.000000001), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     6d6:	68b2      	ldr	r2, [r6, #8]
     6d8:	2380      	movs	r3, #128	; 0x80
     6da:	049b      	lsls	r3, r3, #18
     6dc:	429a      	cmp	r2, r3
     6de:	d142      	bne.n	766 <i2c_master_init+0x266>
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
	uint32_t fscl        = 1000 * config->baud_rate;
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     6e0:	21fa      	movs	r1, #250	; 0xfa
     6e2:	0089      	lsls	r1, r1, #2
     6e4:	4657      	mov	r7, sl
     6e6:	434f      	muls	r7, r1
	tmp_baud = (int32_t)(div_ceil(
			fgclk - fscl * (10 + fgclk * trise * 0.000000001), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     6e8:	9802      	ldr	r0, [sp, #8]
     6ea:	9903      	ldr	r1, [sp, #12]
     6ec:	0002      	movs	r2, r0
     6ee:	000b      	movs	r3, r1
     6f0:	47a8      	blx	r5
     6f2:	9000      	str	r0, [sp, #0]
     6f4:	9101      	str	r1, [sp, #4]
     6f6:	0038      	movs	r0, r7
     6f8:	4b2d      	ldr	r3, [pc, #180]	; (7b0 <i2c_master_init+0x2b0>)
     6fa:	4798      	blx	r3
     6fc:	2200      	movs	r2, #0
     6fe:	4b36      	ldr	r3, [pc, #216]	; (7d8 <i2c_master_init+0x2d8>)
     700:	47d8      	blx	fp
     702:	0002      	movs	r2, r0
     704:	000b      	movs	r3, r1
     706:	9800      	ldr	r0, [sp, #0]
     708:	9901      	ldr	r1, [sp, #4]
     70a:	4e31      	ldr	r6, [pc, #196]	; (7d0 <i2c_master_init+0x2d0>)
     70c:	47b0      	blx	r6
     70e:	2200      	movs	r2, #0
     710:	4b2e      	ldr	r3, [pc, #184]	; (7cc <i2c_master_init+0x2cc>)
     712:	4e2d      	ldr	r6, [pc, #180]	; (7c8 <i2c_master_init+0x2c8>)
     714:	47b0      	blx	r6
     716:	4b2f      	ldr	r3, [pc, #188]	; (7d4 <i2c_master_init+0x2d4>)
     718:	4798      	blx	r3
     71a:	1e06      	subs	r6, r0, #0
		if (tmp_baudlow_hs) {
     71c:	d006      	beq.n	72c <i2c_master_init+0x22c>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     71e:	0039      	movs	r1, r7
     720:	9807      	ldr	r0, [sp, #28]
     722:	4b2e      	ldr	r3, [pc, #184]	; (7dc <i2c_master_init+0x2dc>)
     724:	4798      	blx	r3
     726:	3802      	subs	r0, #2
     728:	1b83      	subs	r3, r0, r6
     72a:	e007      	b.n	73c <i2c_master_init+0x23c>
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     72c:	0079      	lsls	r1, r7, #1
     72e:	1e48      	subs	r0, r1, #1
     730:	9b07      	ldr	r3, [sp, #28]
     732:	469c      	mov	ip, r3
     734:	4460      	add	r0, ip
     736:	4b29      	ldr	r3, [pc, #164]	; (7dc <i2c_master_init+0x2dc>)
     738:	4798      	blx	r3
     73a:	1e43      	subs	r3, r0, #1
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     73c:	2cff      	cmp	r4, #255	; 0xff
     73e:	d803      	bhi.n	748 <i2c_master_init+0x248>
     740:	2bff      	cmp	r3, #255	; 0xff
     742:	d903      	bls.n	74c <i2c_master_init+0x24c>
     744:	2040      	movs	r0, #64	; 0x40
     746:	e014      	b.n	772 <i2c_master_init+0x272>
     748:	2040      	movs	r0, #64	; 0x40

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
     74a:	e012      	b.n	772 <i2c_master_init+0x272>
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     74c:	22ff      	movs	r2, #255	; 0xff
     74e:	4014      	ands	r4, r2
     750:	0636      	lsls	r6, r6, #24
     752:	4334      	orrs	r4, r6
     754:	041b      	lsls	r3, r3, #16
     756:	22ff      	movs	r2, #255	; 0xff
     758:	0412      	lsls	r2, r2, #16
     75a:	4013      	ands	r3, r2
     75c:	431c      	orrs	r4, r3
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     75e:	4643      	mov	r3, r8
     760:	60dc      	str	r4, [r3, #12]
	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
	int32_t tmp_baud_hs = 0;
	int32_t tmp_baudlow_hs = 0;
	enum status_code tmp_status_code = STATUS_OK;
     762:	2000      	movs	r0, #0
     764:	e005      	b.n	772 <i2c_master_init+0x272>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     766:	2040      	movs	r0, #64	; 0x40
     768:	2cff      	cmp	r4, #255	; 0xff
     76a:	d802      	bhi.n	772 <i2c_master_init+0x272>

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
	int32_t tmp_baud_hs = 0;
	int32_t tmp_baudlow_hs = 0;
     76c:	2600      	movs	r6, #0
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
	int32_t tmp_baud_hs = 0;
     76e:	2300      	movs	r3, #0
     770:	e7ec      	b.n	74c <i2c_master_init+0x24c>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     772:	b00b      	add	sp, #44	; 0x2c
     774:	bc3c      	pop	{r2, r3, r4, r5}
     776:	4690      	mov	r8, r2
     778:	4699      	mov	r9, r3
     77a:	46a2      	mov	sl, r4
     77c:	46ab      	mov	fp, r5
     77e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     780:	00000dc5 	.word	0x00000dc5
     784:	40000400 	.word	0x40000400
     788:	000019c1 	.word	0x000019c1
     78c:	00001935 	.word	0x00001935
     790:	00000c71 	.word	0x00000c71
     794:	000008ad 	.word	0x000008ad
     798:	00001429 	.word	0x00001429
     79c:	200000c0 	.word	0x200000c0
     7a0:	00000cbd 	.word	0x00000cbd
     7a4:	00001ab9 	.word	0x00001ab9
     7a8:	41002000 	.word	0x41002000
     7ac:	000019dd 	.word	0x000019dd
     7b0:	00003645 	.word	0x00003645
     7b4:	00002a3d 	.word	0x00002a3d
     7b8:	e826d695 	.word	0xe826d695
     7bc:	3e112e0b 	.word	0x3e112e0b
     7c0:	00001db9 	.word	0x00001db9
     7c4:	40240000 	.word	0x40240000
     7c8:	00002f31 	.word	0x00002f31
     7cc:	3ff00000 	.word	0x3ff00000
     7d0:	00002411 	.word	0x00002411
     7d4:	000035d9 	.word	0x000035d9
     7d8:	40080000 	.word	0x40080000
     7dc:	00001c49 	.word	0x00001c49

000007e0 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     7e0:	6801      	ldr	r1, [r0, #0]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     7e2:	2207      	movs	r2, #7
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     7e4:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     7e6:	421a      	tst	r2, r3
     7e8:	d1fc      	bne.n	7e4 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     7ea:	4770      	bx	lr

000007ec <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     7ec:	b570      	push	{r4, r5, r6, lr}
     7ee:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     7f0:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     7f2:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     7f4:	8b43      	ldrh	r3, [r0, #26]
	buffer_index -= module->buffer_remaining;
     7f6:	8b85      	ldrh	r5, [r0, #28]
     7f8:	1b5d      	subs	r5, r3, r5
     7fa:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     7fc:	8b83      	ldrh	r3, [r0, #28]
     7fe:	3b01      	subs	r3, #1
     800:	b29b      	uxth	r3, r3
     802:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     804:	0113      	lsls	r3, r2, #4
     806:	d50c      	bpl.n	822 <_i2c_master_read+0x36>
		if (module->send_nack && module->buffer_remaining == 1) {
     808:	7ac3      	ldrb	r3, [r0, #11]
     80a:	2b00      	cmp	r3, #0
     80c:	d015      	beq.n	83a <_i2c_master_read+0x4e>
     80e:	8b83      	ldrh	r3, [r0, #28]
     810:	b29b      	uxth	r3, r3
     812:	2b01      	cmp	r3, #1
     814:	d111      	bne.n	83a <_i2c_master_read+0x4e>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     816:	6873      	ldr	r3, [r6, #4]
     818:	2280      	movs	r2, #128	; 0x80
     81a:	02d2      	lsls	r2, r2, #11
     81c:	4313      	orrs	r3, r2
     81e:	6073      	str	r3, [r6, #4]
     820:	e00b      	b.n	83a <_i2c_master_read+0x4e>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
     822:	7ac3      	ldrb	r3, [r0, #11]
     824:	2b00      	cmp	r3, #0
     826:	d008      	beq.n	83a <_i2c_master_read+0x4e>
     828:	8b83      	ldrh	r3, [r0, #28]
     82a:	b29b      	uxth	r3, r3
     82c:	2b00      	cmp	r3, #0
     82e:	d104      	bne.n	83a <_i2c_master_read+0x4e>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     830:	6873      	ldr	r3, [r6, #4]
     832:	2280      	movs	r2, #128	; 0x80
     834:	02d2      	lsls	r2, r2, #11
     836:	4313      	orrs	r3, r2
     838:	6073      	str	r3, [r6, #4]
		}
	}

	if (module->buffer_remaining == 0) {
     83a:	8ba3      	ldrh	r3, [r4, #28]
     83c:	b29b      	uxth	r3, r3
     83e:	2b00      	cmp	r3, #0
     840:	d10a      	bne.n	858 <_i2c_master_read+0x6c>
		if (module->send_stop) {
     842:	7aa3      	ldrb	r3, [r4, #10]
     844:	2b00      	cmp	r3, #0
     846:	d007      	beq.n	858 <_i2c_master_read+0x6c>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
     848:	0020      	movs	r0, r4
     84a:	4b08      	ldr	r3, [pc, #32]	; (86c <_i2c_master_read+0x80>)
     84c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     84e:	6873      	ldr	r3, [r6, #4]
     850:	22c0      	movs	r2, #192	; 0xc0
     852:	0292      	lsls	r2, r2, #10
     854:	4313      	orrs	r3, r2
     856:	6073      	str	r3, [r6, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     858:	0020      	movs	r0, r4
     85a:	4b04      	ldr	r3, [pc, #16]	; (86c <_i2c_master_read+0x80>)
     85c:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     85e:	6a23      	ldr	r3, [r4, #32]
     860:	195d      	adds	r5, r3, r5
     862:	2328      	movs	r3, #40	; 0x28
     864:	5cf3      	ldrb	r3, [r6, r3]
     866:	b2db      	uxtb	r3, r3
     868:	702b      	strb	r3, [r5, #0]
}
     86a:	bd70      	pop	{r4, r5, r6, pc}
     86c:	000007e1 	.word	0x000007e1

00000870 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     870:	b570      	push	{r4, r5, r6, lr}
     872:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     874:	6806      	ldr	r6, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     876:	8b73      	ldrh	r3, [r6, #26]
     878:	075b      	lsls	r3, r3, #29
     87a:	d503      	bpl.n	884 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     87c:	221e      	movs	r2, #30
     87e:	2325      	movs	r3, #37	; 0x25
     880:	54c2      	strb	r2, [r0, r3]
		/* Do not write more data */
		return;
     882:	e00f      	b.n	8a4 <_i2c_master_write+0x34>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
     884:	8b43      	ldrh	r3, [r0, #26]
	buffer_index -= module->buffer_remaining;
     886:	8b85      	ldrh	r5, [r0, #28]
     888:	1b5d      	subs	r5, r3, r5
     88a:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     88c:	8b83      	ldrh	r3, [r0, #28]
     88e:	3b01      	subs	r3, #1
     890:	b29b      	uxth	r3, r3
     892:	8383      	strh	r3, [r0, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
     894:	4b04      	ldr	r3, [pc, #16]	; (8a8 <_i2c_master_write+0x38>)
     896:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     898:	6a23      	ldr	r3, [r4, #32]
     89a:	195d      	adds	r5, r3, r5
     89c:	782b      	ldrb	r3, [r5, #0]
     89e:	b2db      	uxtb	r3, r3
     8a0:	2228      	movs	r2, #40	; 0x28
     8a2:	54b3      	strb	r3, [r6, r2]
}
     8a4:	bd70      	pop	{r4, r5, r6, pc}
     8a6:	46c0      	nop			; (mov r8, r8)
     8a8:	000007e1 	.word	0x000007e1

000008ac <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     8ac:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     8ae:	0080      	lsls	r0, r0, #2
     8b0:	4b6f      	ldr	r3, [pc, #444]	; (a70 <_i2c_master_interrupt_handler+0x1c4>)
     8b2:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     8b4:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     8b6:	682b      	ldr	r3, [r5, #0]
     8b8:	011b      	lsls	r3, r3, #4
     8ba:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     8bc:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     8be:	7e26      	ldrb	r6, [r4, #24]
     8c0:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     8c2:	8b63      	ldrh	r3, [r4, #26]
     8c4:	b29b      	uxth	r3, r3
     8c6:	2b00      	cmp	r3, #0
     8c8:	d135      	bne.n	936 <_i2c_master_interrupt_handler+0x8a>
     8ca:	8ba3      	ldrh	r3, [r4, #28]
     8cc:	b29b      	uxth	r3, r3
     8ce:	2b00      	cmp	r3, #0
     8d0:	d031      	beq.n	936 <_i2c_master_interrupt_handler+0x8a>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     8d2:	7e2b      	ldrb	r3, [r5, #24]
     8d4:	07db      	lsls	r3, r3, #31
     8d6:	d51b      	bpl.n	910 <_i2c_master_interrupt_handler+0x64>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     8d8:	2301      	movs	r3, #1
     8da:	762b      	strb	r3, [r5, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     8dc:	8b6b      	ldrh	r3, [r5, #26]
     8de:	079b      	lsls	r3, r3, #30
     8e0:	d503      	bpl.n	8ea <_i2c_master_interrupt_handler+0x3e>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
     8e2:	2241      	movs	r2, #65	; 0x41
     8e4:	2325      	movs	r3, #37	; 0x25
     8e6:	54e2      	strb	r2, [r4, r3]
     8e8:	e012      	b.n	910 <_i2c_master_interrupt_handler+0x64>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     8ea:	8b6b      	ldrh	r3, [r5, #26]
     8ec:	075b      	lsls	r3, r3, #29
     8ee:	d50f      	bpl.n	910 <_i2c_master_interrupt_handler+0x64>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     8f0:	2218      	movs	r2, #24
     8f2:	2325      	movs	r3, #37	; 0x25
     8f4:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     8f6:	2300      	movs	r3, #0
     8f8:	83a3      	strh	r3, [r4, #28]

			if (module->send_stop) {
     8fa:	7aa3      	ldrb	r3, [r4, #10]
     8fc:	2b00      	cmp	r3, #0
     8fe:	d007      	beq.n	910 <_i2c_master_interrupt_handler+0x64>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
     900:	0020      	movs	r0, r4
     902:	4b5c      	ldr	r3, [pc, #368]	; (a74 <_i2c_master_interrupt_handler+0x1c8>)
     904:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     906:	686b      	ldr	r3, [r5, #4]
     908:	22c0      	movs	r2, #192	; 0xc0
     90a:	0292      	lsls	r2, r2, #10
     90c:	4313      	orrs	r3, r2
     90e:	606b      	str	r3, [r5, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
     910:	8ba3      	ldrh	r3, [r4, #28]
     912:	b29b      	uxth	r3, r3
     914:	8363      	strh	r3, [r4, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
     916:	2325      	movs	r3, #37	; 0x25
     918:	5ce3      	ldrb	r3, [r4, r3]
     91a:	2b05      	cmp	r3, #5
     91c:	d156      	bne.n	9cc <_i2c_master_interrupt_handler+0x120>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     91e:	331f      	adds	r3, #31
     920:	5ce3      	ldrb	r3, [r4, r3]
     922:	2b00      	cmp	r3, #0
     924:	d103      	bne.n	92e <_i2c_master_interrupt_handler+0x82>
			_i2c_master_write(module);
     926:	0020      	movs	r0, r4
     928:	4b53      	ldr	r3, [pc, #332]	; (a78 <_i2c_master_interrupt_handler+0x1cc>)
     92a:	4798      	blx	r3
     92c:	e04e      	b.n	9cc <_i2c_master_interrupt_handler+0x120>
		} else {
			_i2c_master_read(module);
     92e:	0020      	movs	r0, r4
     930:	4b52      	ldr	r3, [pc, #328]	; (a7c <_i2c_master_interrupt_handler+0x1d0>)
     932:	4798      	blx	r3
     934:	e04a      	b.n	9cc <_i2c_master_interrupt_handler+0x120>
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     936:	8b63      	ldrh	r3, [r4, #26]
     938:	b29b      	uxth	r3, r3
     93a:	2b00      	cmp	r3, #0
     93c:	d026      	beq.n	98c <_i2c_master_interrupt_handler+0xe0>
     93e:	8ba3      	ldrh	r3, [r4, #28]
     940:	b29b      	uxth	r3, r3
     942:	2b00      	cmp	r3, #0
     944:	d122      	bne.n	98c <_i2c_master_interrupt_handler+0xe0>
			(module->status == STATUS_BUSY) &&
     946:	3325      	adds	r3, #37	; 0x25
     948:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     94a:	2b05      	cmp	r3, #5
     94c:	d11e      	bne.n	98c <_i2c_master_interrupt_handler+0xe0>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     94e:	331f      	adds	r3, #31
     950:	5ce3      	ldrb	r3, [r4, r3]
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
     952:	2b00      	cmp	r3, #0
     954:	d11a      	bne.n	98c <_i2c_master_interrupt_handler+0xe0>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
     956:	3303      	adds	r3, #3
     958:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     95a:	2300      	movs	r3, #0
     95c:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     95e:	3325      	adds	r3, #37	; 0x25
     960:	2200      	movs	r2, #0
     962:	54e2      	strb	r2, [r4, r3]

		if (module->send_stop) {
     964:	7aa3      	ldrb	r3, [r4, #10]
     966:	2b00      	cmp	r3, #0
     968:	d008      	beq.n	97c <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
     96a:	0020      	movs	r0, r4
     96c:	4b41      	ldr	r3, [pc, #260]	; (a74 <_i2c_master_interrupt_handler+0x1c8>)
     96e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     970:	686b      	ldr	r3, [r5, #4]
     972:	22c0      	movs	r2, #192	; 0xc0
     974:	0292      	lsls	r2, r2, #10
     976:	4313      	orrs	r3, r2
     978:	606b      	str	r3, [r5, #4]
     97a:	e001      	b.n	980 <_i2c_master_interrupt_handler+0xd4>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     97c:	2301      	movs	r3, #1
     97e:	762b      	strb	r3, [r5, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     980:	07f3      	lsls	r3, r6, #31
     982:	d523      	bpl.n	9cc <_i2c_master_interrupt_handler+0x120>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     984:	68e3      	ldr	r3, [r4, #12]
     986:	0020      	movs	r0, r4
     988:	4798      	blx	r3
     98a:	e01f      	b.n	9cc <_i2c_master_interrupt_handler+0x120>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     98c:	8b63      	ldrh	r3, [r4, #26]
     98e:	b29b      	uxth	r3, r3
     990:	2b00      	cmp	r3, #0
     992:	d01b      	beq.n	9cc <_i2c_master_interrupt_handler+0x120>
     994:	8ba3      	ldrh	r3, [r4, #28]
     996:	b29b      	uxth	r3, r3
     998:	2b00      	cmp	r3, #0
     99a:	d017      	beq.n	9cc <_i2c_master_interrupt_handler+0x120>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     99c:	8b6b      	ldrh	r3, [r5, #26]
     99e:	069b      	lsls	r3, r3, #26
     9a0:	d409      	bmi.n	9b6 <_i2c_master_interrupt_handler+0x10a>
     9a2:	2a00      	cmp	r2, #0
     9a4:	d003      	beq.n	9ae <_i2c_master_interrupt_handler+0x102>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     9a6:	8ba3      	ldrh	r3, [r4, #28]
     9a8:	b29b      	uxth	r3, r3
     9aa:	2b01      	cmp	r3, #1
     9ac:	d003      	beq.n	9b6 <_i2c_master_interrupt_handler+0x10a>
			module->status = STATUS_ERR_PACKET_COLLISION;
     9ae:	2241      	movs	r2, #65	; 0x41
     9b0:	2325      	movs	r3, #37	; 0x25
     9b2:	54e2      	strb	r2, [r4, r3]
     9b4:	e00a      	b.n	9cc <_i2c_master_interrupt_handler+0x120>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     9b6:	2324      	movs	r3, #36	; 0x24
     9b8:	5ce3      	ldrb	r3, [r4, r3]
     9ba:	2b00      	cmp	r3, #0
     9bc:	d103      	bne.n	9c6 <_i2c_master_interrupt_handler+0x11a>
			_i2c_master_write(module);
     9be:	0020      	movs	r0, r4
     9c0:	4b2d      	ldr	r3, [pc, #180]	; (a78 <_i2c_master_interrupt_handler+0x1cc>)
     9c2:	4798      	blx	r3
     9c4:	e002      	b.n	9cc <_i2c_master_interrupt_handler+0x120>
		} else {
			_i2c_master_read(module);
     9c6:	0020      	movs	r0, r4
     9c8:	4b2c      	ldr	r3, [pc, #176]	; (a7c <_i2c_master_interrupt_handler+0x1d0>)
     9ca:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     9cc:	8b63      	ldrh	r3, [r4, #26]
     9ce:	b29b      	uxth	r3, r3
     9d0:	2b00      	cmp	r3, #0
     9d2:	d02a      	beq.n	a2a <_i2c_master_interrupt_handler+0x17e>
     9d4:	8ba3      	ldrh	r3, [r4, #28]
     9d6:	b29b      	uxth	r3, r3
     9d8:	2b00      	cmp	r3, #0
     9da:	d126      	bne.n	a2a <_i2c_master_interrupt_handler+0x17e>
			(module->status == STATUS_BUSY) &&
     9dc:	3325      	adds	r3, #37	; 0x25
     9de:	5ce3      	ldrb	r3, [r4, r3]
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     9e0:	2b05      	cmp	r3, #5
     9e2:	d122      	bne.n	a2a <_i2c_master_interrupt_handler+0x17e>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     9e4:	331f      	adds	r3, #31
     9e6:	5ce3      	ldrb	r3, [r4, r3]
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
     9e8:	2b01      	cmp	r3, #1
     9ea:	d11e      	bne.n	a2a <_i2c_master_interrupt_handler+0x17e>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     9ec:	7e2b      	ldrb	r3, [r5, #24]
     9ee:	079b      	lsls	r3, r3, #30
     9f0:	d501      	bpl.n	9f6 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     9f2:	2302      	movs	r3, #2
     9f4:	762b      	strb	r3, [r5, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
     9f6:	2303      	movs	r3, #3
     9f8:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
     9fa:	2300      	movs	r3, #0
     9fc:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     9fe:	3325      	adds	r3, #37	; 0x25
     a00:	2200      	movs	r2, #0
     a02:	54e2      	strb	r2, [r4, r3]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     a04:	07b3      	lsls	r3, r6, #30
     a06:	d507      	bpl.n	a18 <_i2c_master_interrupt_handler+0x16c>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     a08:	2324      	movs	r3, #36	; 0x24
     a0a:	5ce3      	ldrb	r3, [r4, r3]
     a0c:	2b01      	cmp	r3, #1
     a0e:	d103      	bne.n	a18 <_i2c_master_interrupt_handler+0x16c>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     a10:	6923      	ldr	r3, [r4, #16]
     a12:	0020      	movs	r0, r4
     a14:	4798      	blx	r3
     a16:	e008      	b.n	a2a <_i2c_master_interrupt_handler+0x17e>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     a18:	07f3      	lsls	r3, r6, #31
     a1a:	d506      	bpl.n	a2a <_i2c_master_interrupt_handler+0x17e>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     a1c:	2324      	movs	r3, #36	; 0x24
     a1e:	5ce3      	ldrb	r3, [r4, r3]
     a20:	2b00      	cmp	r3, #0
     a22:	d102      	bne.n	a2a <_i2c_master_interrupt_handler+0x17e>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     a24:	68e3      	ldr	r3, [r4, #12]
     a26:	0020      	movs	r0, r4
     a28:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     a2a:	2325      	movs	r3, #37	; 0x25
     a2c:	5ce3      	ldrb	r3, [r4, r3]
     a2e:	2b05      	cmp	r3, #5
     a30:	d01c      	beq.n	a6c <_i2c_master_interrupt_handler+0x1c0>
     a32:	2325      	movs	r3, #37	; 0x25
     a34:	5ce3      	ldrb	r3, [r4, r3]
     a36:	2b00      	cmp	r3, #0
     a38:	d018      	beq.n	a6c <_i2c_master_interrupt_handler+0x1c0>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     a3a:	2303      	movs	r3, #3
     a3c:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     a3e:	2300      	movs	r3, #0
     a40:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     a42:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     a44:	3325      	adds	r3, #37	; 0x25
     a46:	5ce3      	ldrb	r3, [r4, r3]
     a48:	2b41      	cmp	r3, #65	; 0x41
     a4a:	d00a      	beq.n	a62 <_i2c_master_interrupt_handler+0x1b6>
     a4c:	7aa3      	ldrb	r3, [r4, #10]
     a4e:	2b00      	cmp	r3, #0
     a50:	d007      	beq.n	a62 <_i2c_master_interrupt_handler+0x1b6>
				module->send_stop) {
			_i2c_master_wait_for_sync(module);
     a52:	0020      	movs	r0, r4
     a54:	4b07      	ldr	r3, [pc, #28]	; (a74 <_i2c_master_interrupt_handler+0x1c8>)
     a56:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     a58:	686b      	ldr	r3, [r5, #4]
     a5a:	22e0      	movs	r2, #224	; 0xe0
     a5c:	02d2      	lsls	r2, r2, #11
     a5e:	4313      	orrs	r3, r2
     a60:	606b      	str	r3, [r5, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     a62:	0773      	lsls	r3, r6, #29
     a64:	d502      	bpl.n	a6c <_i2c_master_interrupt_handler+0x1c0>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     a66:	6963      	ldr	r3, [r4, #20]
     a68:	0020      	movs	r0, r4
     a6a:	4798      	blx	r3
		}
	}
}
     a6c:	bd70      	pop	{r4, r5, r6, pc}
     a6e:	46c0      	nop			; (mov r8, r8)
     a70:	200000c0 	.word	0x200000c0
     a74:	000007e1 	.word	0x000007e1
     a78:	00000871 	.word	0x00000871
     a7c:	000007ed 	.word	0x000007ed

00000a80 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     a80:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     a82:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a84:	2340      	movs	r3, #64	; 0x40
     a86:	2400      	movs	r4, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     a88:	4281      	cmp	r1, r0
     a8a:	d201      	bcs.n	a90 <_sercom_get_sync_baud_val+0x10>
     a8c:	e00a      	b.n	aa4 <_sercom_get_sync_baud_val+0x24>

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
     a8e:	001c      	movs	r4, r3
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     a90:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     a92:	1c63      	adds	r3, r4, #1
     a94:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     a96:	4288      	cmp	r0, r1
     a98:	d9f9      	bls.n	a8e <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a9a:	2340      	movs	r3, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     a9c:	2cff      	cmp	r4, #255	; 0xff
     a9e:	d801      	bhi.n	aa4 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     aa0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     aa2:	2300      	movs	r3, #0
	}
}
     aa4:	0018      	movs	r0, r3
     aa6:	bd10      	pop	{r4, pc}

00000aa8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
     aaa:	465f      	mov	r7, fp
     aac:	4656      	mov	r6, sl
     aae:	464d      	mov	r5, r9
     ab0:	4644      	mov	r4, r8
     ab2:	b4f0      	push	{r4, r5, r6, r7}
     ab4:	b089      	sub	sp, #36	; 0x24
     ab6:	000c      	movs	r4, r1
     ab8:	9205      	str	r2, [sp, #20]
     aba:	aa12      	add	r2, sp, #72	; 0x48
     abc:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     abe:	0002      	movs	r2, r0
     ac0:	434a      	muls	r2, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     ac2:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     ac4:	42a2      	cmp	r2, r4
     ac6:	d900      	bls.n	aca <_sercom_get_async_baud_val+0x22>
     ac8:	e0c6      	b.n	c58 <_sercom_get_async_baud_val+0x1b0>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     aca:	2b00      	cmp	r3, #0
     acc:	d151      	bne.n	b72 <_sercom_get_async_baud_val+0xca>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     ace:	0002      	movs	r2, r0
     ad0:	0008      	movs	r0, r1
     ad2:	2100      	movs	r1, #0
     ad4:	4d64      	ldr	r5, [pc, #400]	; (c68 <_sercom_get_async_baud_val+0x1c0>)
     ad6:	47a8      	blx	r5
     ad8:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     ada:	0026      	movs	r6, r4
     adc:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     ade:	2300      	movs	r3, #0
     ae0:	2400      	movs	r4, #0
     ae2:	9300      	str	r3, [sp, #0]
     ae4:	9401      	str	r4, [sp, #4]
     ae6:	2200      	movs	r2, #0
     ae8:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     aea:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     aec:	2120      	movs	r1, #32
     aee:	468c      	mov	ip, r1
     af0:	391f      	subs	r1, #31
     af2:	9602      	str	r6, [sp, #8]
     af4:	9703      	str	r7, [sp, #12]
     af6:	2420      	movs	r4, #32
     af8:	4264      	negs	r4, r4
     afa:	1904      	adds	r4, r0, r4
     afc:	d403      	bmi.n	b06 <_sercom_get_async_baud_val+0x5e>
     afe:	000d      	movs	r5, r1
     b00:	40a5      	lsls	r5, r4
     b02:	46a8      	mov	r8, r5
     b04:	e004      	b.n	b10 <_sercom_get_async_baud_val+0x68>
     b06:	4664      	mov	r4, ip
     b08:	1a24      	subs	r4, r4, r0
     b0a:	000d      	movs	r5, r1
     b0c:	40e5      	lsrs	r5, r4
     b0e:	46a8      	mov	r8, r5
     b10:	000c      	movs	r4, r1
     b12:	4084      	lsls	r4, r0
     b14:	46a1      	mov	r9, r4

		r = r << 1;
     b16:	0014      	movs	r4, r2
     b18:	001d      	movs	r5, r3
     b1a:	18a4      	adds	r4, r4, r2
     b1c:	415d      	adcs	r5, r3
     b1e:	0022      	movs	r2, r4
     b20:	002b      	movs	r3, r5

		if (n & bit_shift) {
     b22:	4646      	mov	r6, r8
     b24:	465f      	mov	r7, fp
     b26:	423e      	tst	r6, r7
     b28:	d003      	beq.n	b32 <_sercom_get_async_baud_val+0x8a>
			r |= 0x01;
     b2a:	000e      	movs	r6, r1
     b2c:	4326      	orrs	r6, r4
     b2e:	0032      	movs	r2, r6
     b30:	002b      	movs	r3, r5
		}

		if (r >= d) {
     b32:	9c02      	ldr	r4, [sp, #8]
     b34:	9d03      	ldr	r5, [sp, #12]
     b36:	429d      	cmp	r5, r3
     b38:	d80f      	bhi.n	b5a <_sercom_get_async_baud_val+0xb2>
     b3a:	d101      	bne.n	b40 <_sercom_get_async_baud_val+0x98>
     b3c:	4294      	cmp	r4, r2
     b3e:	d80c      	bhi.n	b5a <_sercom_get_async_baud_val+0xb2>
			r = r - d;
     b40:	9c02      	ldr	r4, [sp, #8]
     b42:	9d03      	ldr	r5, [sp, #12]
     b44:	1b12      	subs	r2, r2, r4
     b46:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     b48:	464d      	mov	r5, r9
     b4a:	9e00      	ldr	r6, [sp, #0]
     b4c:	9f01      	ldr	r7, [sp, #4]
     b4e:	4335      	orrs	r5, r6
     b50:	003c      	movs	r4, r7
     b52:	4646      	mov	r6, r8
     b54:	4334      	orrs	r4, r6
     b56:	9500      	str	r5, [sp, #0]
     b58:	9401      	str	r4, [sp, #4]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     b5a:	3801      	subs	r0, #1
     b5c:	d2cb      	bcs.n	af6 <_sercom_get_async_baud_val+0x4e>
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
     b5e:	2200      	movs	r2, #0
     b60:	2301      	movs	r3, #1
     b62:	9800      	ldr	r0, [sp, #0]
     b64:	9901      	ldr	r1, [sp, #4]
     b66:	1a12      	subs	r2, r2, r0
     b68:	418b      	sbcs	r3, r1
     b6a:	0c12      	lsrs	r2, r2, #16
     b6c:	041b      	lsls	r3, r3, #16
     b6e:	431a      	orrs	r2, r3
     b70:	e06f      	b.n	c52 <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     b72:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     b74:	2b01      	cmp	r3, #1
     b76:	d16c      	bne.n	c52 <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     b78:	0f63      	lsrs	r3, r4, #29
     b7a:	9304      	str	r3, [sp, #16]
     b7c:	00e3      	lsls	r3, r4, #3
     b7e:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
     b80:	000a      	movs	r2, r1
     b82:	2300      	movs	r3, #0
     b84:	2100      	movs	r1, #0
     b86:	4c38      	ldr	r4, [pc, #224]	; (c68 <_sercom_get_async_baud_val+0x1c0>)
     b88:	47a0      	blx	r4
     b8a:	0004      	movs	r4, r0
     b8c:	000d      	movs	r5, r1
     b8e:	2300      	movs	r3, #0
     b90:	469c      	mov	ip, r3
     b92:	9306      	str	r3, [sp, #24]
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     b94:	3320      	adds	r3, #32
     b96:	469b      	mov	fp, r3
     b98:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     b9a:	4663      	mov	r3, ip
     b9c:	9307      	str	r3, [sp, #28]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     b9e:	2300      	movs	r3, #0
     ba0:	9302      	str	r3, [sp, #8]
     ba2:	2200      	movs	r2, #0
     ba4:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     ba6:	213f      	movs	r1, #63	; 0x3f
     ba8:	9400      	str	r4, [sp, #0]
     baa:	9501      	str	r5, [sp, #4]
     bac:	000f      	movs	r7, r1
		bit_shift = (uint64_t)1 << i;
     bae:	2120      	movs	r1, #32
     bb0:	4249      	negs	r1, r1
     bb2:	1879      	adds	r1, r7, r1
     bb4:	d403      	bmi.n	bbe <_sercom_get_async_baud_val+0x116>
     bb6:	0030      	movs	r0, r6
     bb8:	4088      	lsls	r0, r1
     bba:	4684      	mov	ip, r0
     bbc:	e004      	b.n	bc8 <_sercom_get_async_baud_val+0x120>
     bbe:	4659      	mov	r1, fp
     bc0:	1bc9      	subs	r1, r1, r7
     bc2:	0030      	movs	r0, r6
     bc4:	40c8      	lsrs	r0, r1
     bc6:	4684      	mov	ip, r0
     bc8:	0031      	movs	r1, r6
     bca:	40b9      	lsls	r1, r7
     bcc:	4689      	mov	r9, r1

		r = r << 1;
     bce:	0010      	movs	r0, r2
     bd0:	0019      	movs	r1, r3
     bd2:	1880      	adds	r0, r0, r2
     bd4:	4159      	adcs	r1, r3
     bd6:	0002      	movs	r2, r0
     bd8:	000b      	movs	r3, r1

		if (n & bit_shift) {
     bda:	4644      	mov	r4, r8
     bdc:	464d      	mov	r5, r9
     bde:	402c      	ands	r4, r5
     be0:	46a2      	mov	sl, r4
     be2:	4664      	mov	r4, ip
     be4:	9d04      	ldr	r5, [sp, #16]
     be6:	402c      	ands	r4, r5
     be8:	46a4      	mov	ip, r4
     bea:	4654      	mov	r4, sl
     bec:	4665      	mov	r5, ip
     bee:	432c      	orrs	r4, r5
     bf0:	d003      	beq.n	bfa <_sercom_get_async_baud_val+0x152>
			r |= 0x01;
     bf2:	0034      	movs	r4, r6
     bf4:	4304      	orrs	r4, r0
     bf6:	0022      	movs	r2, r4
     bf8:	000b      	movs	r3, r1
		}

		if (r >= d) {
     bfa:	9800      	ldr	r0, [sp, #0]
     bfc:	9901      	ldr	r1, [sp, #4]
     bfe:	4299      	cmp	r1, r3
     c00:	d80a      	bhi.n	c18 <_sercom_get_async_baud_val+0x170>
     c02:	d101      	bne.n	c08 <_sercom_get_async_baud_val+0x160>
     c04:	4290      	cmp	r0, r2
     c06:	d807      	bhi.n	c18 <_sercom_get_async_baud_val+0x170>
			r = r - d;
     c08:	9800      	ldr	r0, [sp, #0]
     c0a:	9901      	ldr	r1, [sp, #4]
     c0c:	1a12      	subs	r2, r2, r0
     c0e:	418b      	sbcs	r3, r1
			q |= bit_shift;
     c10:	9902      	ldr	r1, [sp, #8]
     c12:	4648      	mov	r0, r9
     c14:	4301      	orrs	r1, r0
     c16:	9102      	str	r1, [sp, #8]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     c18:	3f01      	subs	r7, #1
     c1a:	d2c8      	bcs.n	bae <_sercom_get_async_baud_val+0x106>
     c1c:	9c00      	ldr	r4, [sp, #0]
     c1e:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     c20:	9902      	ldr	r1, [sp, #8]
     c22:	9a07      	ldr	r2, [sp, #28]
     c24:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     c26:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     c28:	4910      	ldr	r1, [pc, #64]	; (c6c <_sercom_get_async_baud_val+0x1c4>)
     c2a:	428b      	cmp	r3, r1
     c2c:	d90b      	bls.n	c46 <_sercom_get_async_baud_val+0x19e>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     c2e:	9b06      	ldr	r3, [sp, #24]
     c30:	3301      	adds	r3, #1
     c32:	b2db      	uxtb	r3, r3
     c34:	0019      	movs	r1, r3
     c36:	9306      	str	r3, [sp, #24]
     c38:	0013      	movs	r3, r2
     c3a:	3301      	adds	r3, #1
     c3c:	9307      	str	r3, [sp, #28]
     c3e:	2908      	cmp	r1, #8
     c40:	d1ad      	bne.n	b9e <_sercom_get_async_baud_val+0xf6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     c42:	2540      	movs	r5, #64	; 0x40
     c44:	e008      	b.n	c58 <_sercom_get_async_baud_val+0x1b0>
     c46:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     c48:	9a06      	ldr	r2, [sp, #24]
     c4a:	2a08      	cmp	r2, #8
     c4c:	d004      	beq.n	c58 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     c4e:	0352      	lsls	r2, r2, #13
     c50:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     c52:	9b05      	ldr	r3, [sp, #20]
     c54:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     c56:	2500      	movs	r5, #0
}
     c58:	0028      	movs	r0, r5
     c5a:	b009      	add	sp, #36	; 0x24
     c5c:	bc3c      	pop	{r2, r3, r4, r5}
     c5e:	4690      	mov	r8, r2
     c60:	4699      	mov	r9, r3
     c62:	46a2      	mov	sl, r4
     c64:	46ab      	mov	fp, r5
     c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c68:	00001d61 	.word	0x00001d61
     c6c:	00001fff 	.word	0x00001fff

00000c70 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     c70:	b510      	push	{r4, lr}
     c72:	b082      	sub	sp, #8
     c74:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     c76:	4b0e      	ldr	r3, [pc, #56]	; (cb0 <sercom_set_gclk_generator+0x40>)
     c78:	781b      	ldrb	r3, [r3, #0]
     c7a:	2b00      	cmp	r3, #0
     c7c:	d001      	beq.n	c82 <sercom_set_gclk_generator+0x12>
     c7e:	2900      	cmp	r1, #0
     c80:	d00d      	beq.n	c9e <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     c82:	a901      	add	r1, sp, #4
     c84:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     c86:	2013      	movs	r0, #19
     c88:	4b0a      	ldr	r3, [pc, #40]	; (cb4 <sercom_set_gclk_generator+0x44>)
     c8a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     c8c:	2013      	movs	r0, #19
     c8e:	4b0a      	ldr	r3, [pc, #40]	; (cb8 <sercom_set_gclk_generator+0x48>)
     c90:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     c92:	4b07      	ldr	r3, [pc, #28]	; (cb0 <sercom_set_gclk_generator+0x40>)
     c94:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     c96:	2201      	movs	r2, #1
     c98:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     c9a:	2000      	movs	r0, #0
     c9c:	e006      	b.n	cac <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     c9e:	4b04      	ldr	r3, [pc, #16]	; (cb0 <sercom_set_gclk_generator+0x40>)
     ca0:	785b      	ldrb	r3, [r3, #1]
     ca2:	4283      	cmp	r3, r0
     ca4:	d001      	beq.n	caa <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     ca6:	201d      	movs	r0, #29
     ca8:	e000      	b.n	cac <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     caa:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     cac:	b002      	add	sp, #8
     cae:	bd10      	pop	{r4, pc}
     cb0:	20000020 	.word	0x20000020
     cb4:	000019c1 	.word	0x000019c1
     cb8:	00001935 	.word	0x00001935

00000cbc <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     cbc:	4b2e      	ldr	r3, [pc, #184]	; (d78 <_sercom_get_default_pad+0xbc>)
     cbe:	4298      	cmp	r0, r3
     cc0:	d01c      	beq.n	cfc <_sercom_get_default_pad+0x40>
     cc2:	d803      	bhi.n	ccc <_sercom_get_default_pad+0x10>
     cc4:	4b2d      	ldr	r3, [pc, #180]	; (d7c <_sercom_get_default_pad+0xc0>)
     cc6:	4298      	cmp	r0, r3
     cc8:	d007      	beq.n	cda <_sercom_get_default_pad+0x1e>
     cca:	e04a      	b.n	d62 <_sercom_get_default_pad+0xa6>
     ccc:	4b2c      	ldr	r3, [pc, #176]	; (d80 <_sercom_get_default_pad+0xc4>)
     cce:	4298      	cmp	r0, r3
     cd0:	d025      	beq.n	d1e <_sercom_get_default_pad+0x62>
     cd2:	4b2c      	ldr	r3, [pc, #176]	; (d84 <_sercom_get_default_pad+0xc8>)
     cd4:	4298      	cmp	r0, r3
     cd6:	d033      	beq.n	d40 <_sercom_get_default_pad+0x84>
     cd8:	e043      	b.n	d62 <_sercom_get_default_pad+0xa6>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     cda:	2901      	cmp	r1, #1
     cdc:	d006      	beq.n	cec <_sercom_get_default_pad+0x30>
     cde:	2900      	cmp	r1, #0
     ce0:	d041      	beq.n	d66 <_sercom_get_default_pad+0xaa>
     ce2:	2902      	cmp	r1, #2
     ce4:	d006      	beq.n	cf4 <_sercom_get_default_pad+0x38>
     ce6:	2903      	cmp	r1, #3
     ce8:	d006      	beq.n	cf8 <_sercom_get_default_pad+0x3c>
     cea:	e001      	b.n	cf0 <_sercom_get_default_pad+0x34>
     cec:	4826      	ldr	r0, [pc, #152]	; (d88 <_sercom_get_default_pad+0xcc>)
     cee:	e041      	b.n	d74 <_sercom_get_default_pad+0xb8>
	}

	Assert(false);
	return 0;
     cf0:	2000      	movs	r0, #0
     cf2:	e03f      	b.n	d74 <_sercom_get_default_pad+0xb8>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     cf4:	4825      	ldr	r0, [pc, #148]	; (d8c <_sercom_get_default_pad+0xd0>)
     cf6:	e03d      	b.n	d74 <_sercom_get_default_pad+0xb8>
     cf8:	4825      	ldr	r0, [pc, #148]	; (d90 <_sercom_get_default_pad+0xd4>)
     cfa:	e03b      	b.n	d74 <_sercom_get_default_pad+0xb8>
     cfc:	2901      	cmp	r1, #1
     cfe:	d006      	beq.n	d0e <_sercom_get_default_pad+0x52>
     d00:	2900      	cmp	r1, #0
     d02:	d032      	beq.n	d6a <_sercom_get_default_pad+0xae>
     d04:	2902      	cmp	r1, #2
     d06:	d006      	beq.n	d16 <_sercom_get_default_pad+0x5a>
     d08:	2903      	cmp	r1, #3
     d0a:	d006      	beq.n	d1a <_sercom_get_default_pad+0x5e>
     d0c:	e001      	b.n	d12 <_sercom_get_default_pad+0x56>
     d0e:	4821      	ldr	r0, [pc, #132]	; (d94 <_sercom_get_default_pad+0xd8>)
     d10:	e030      	b.n	d74 <_sercom_get_default_pad+0xb8>
	}

	Assert(false);
	return 0;
     d12:	2000      	movs	r0, #0
     d14:	e02e      	b.n	d74 <_sercom_get_default_pad+0xb8>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d16:	4820      	ldr	r0, [pc, #128]	; (d98 <_sercom_get_default_pad+0xdc>)
     d18:	e02c      	b.n	d74 <_sercom_get_default_pad+0xb8>
     d1a:	4820      	ldr	r0, [pc, #128]	; (d9c <_sercom_get_default_pad+0xe0>)
     d1c:	e02a      	b.n	d74 <_sercom_get_default_pad+0xb8>
     d1e:	2901      	cmp	r1, #1
     d20:	d006      	beq.n	d30 <_sercom_get_default_pad+0x74>
     d22:	2900      	cmp	r1, #0
     d24:	d023      	beq.n	d6e <_sercom_get_default_pad+0xb2>
     d26:	2902      	cmp	r1, #2
     d28:	d006      	beq.n	d38 <_sercom_get_default_pad+0x7c>
     d2a:	2903      	cmp	r1, #3
     d2c:	d006      	beq.n	d3c <_sercom_get_default_pad+0x80>
     d2e:	e001      	b.n	d34 <_sercom_get_default_pad+0x78>
     d30:	481b      	ldr	r0, [pc, #108]	; (da0 <_sercom_get_default_pad+0xe4>)
     d32:	e01f      	b.n	d74 <_sercom_get_default_pad+0xb8>
	}

	Assert(false);
	return 0;
     d34:	2000      	movs	r0, #0
     d36:	e01d      	b.n	d74 <_sercom_get_default_pad+0xb8>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d38:	481a      	ldr	r0, [pc, #104]	; (da4 <_sercom_get_default_pad+0xe8>)
     d3a:	e01b      	b.n	d74 <_sercom_get_default_pad+0xb8>
     d3c:	481a      	ldr	r0, [pc, #104]	; (da8 <_sercom_get_default_pad+0xec>)
     d3e:	e019      	b.n	d74 <_sercom_get_default_pad+0xb8>
     d40:	2901      	cmp	r1, #1
     d42:	d006      	beq.n	d52 <_sercom_get_default_pad+0x96>
     d44:	2900      	cmp	r1, #0
     d46:	d014      	beq.n	d72 <_sercom_get_default_pad+0xb6>
     d48:	2902      	cmp	r1, #2
     d4a:	d006      	beq.n	d5a <_sercom_get_default_pad+0x9e>
     d4c:	2903      	cmp	r1, #3
     d4e:	d006      	beq.n	d5e <_sercom_get_default_pad+0xa2>
     d50:	e001      	b.n	d56 <_sercom_get_default_pad+0x9a>
     d52:	4816      	ldr	r0, [pc, #88]	; (dac <_sercom_get_default_pad+0xf0>)
     d54:	e00e      	b.n	d74 <_sercom_get_default_pad+0xb8>
	}

	Assert(false);
	return 0;
     d56:	2000      	movs	r0, #0
     d58:	e00c      	b.n	d74 <_sercom_get_default_pad+0xb8>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d5a:	4815      	ldr	r0, [pc, #84]	; (db0 <_sercom_get_default_pad+0xf4>)
     d5c:	e00a      	b.n	d74 <_sercom_get_default_pad+0xb8>
     d5e:	4815      	ldr	r0, [pc, #84]	; (db4 <_sercom_get_default_pad+0xf8>)
     d60:	e008      	b.n	d74 <_sercom_get_default_pad+0xb8>
	}

	Assert(false);
	return 0;
     d62:	2000      	movs	r0, #0
     d64:	e006      	b.n	d74 <_sercom_get_default_pad+0xb8>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d66:	4814      	ldr	r0, [pc, #80]	; (db8 <_sercom_get_default_pad+0xfc>)
     d68:	e004      	b.n	d74 <_sercom_get_default_pad+0xb8>
     d6a:	2003      	movs	r0, #3
     d6c:	e002      	b.n	d74 <_sercom_get_default_pad+0xb8>
     d6e:	4813      	ldr	r0, [pc, #76]	; (dbc <_sercom_get_default_pad+0x100>)
     d70:	e000      	b.n	d74 <_sercom_get_default_pad+0xb8>
     d72:	4813      	ldr	r0, [pc, #76]	; (dc0 <_sercom_get_default_pad+0x104>)
	}

	Assert(false);
	return 0;
}
     d74:	4770      	bx	lr
     d76:	46c0      	nop			; (mov r8, r8)
     d78:	42000c00 	.word	0x42000c00
     d7c:	42000800 	.word	0x42000800
     d80:	42001000 	.word	0x42001000
     d84:	42001400 	.word	0x42001400
     d88:	00050003 	.word	0x00050003
     d8c:	00060003 	.word	0x00060003
     d90:	00070003 	.word	0x00070003
     d94:	00010003 	.word	0x00010003
     d98:	001e0003 	.word	0x001e0003
     d9c:	001f0003 	.word	0x001f0003
     da0:	00090003 	.word	0x00090003
     da4:	000a0003 	.word	0x000a0003
     da8:	000b0003 	.word	0x000b0003
     dac:	00110003 	.word	0x00110003
     db0:	00120003 	.word	0x00120003
     db4:	00130003 	.word	0x00130003
     db8:	00040003 	.word	0x00040003
     dbc:	00080003 	.word	0x00080003
     dc0:	00100003 	.word	0x00100003

00000dc4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     dc4:	b530      	push	{r4, r5, lr}
     dc6:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     dc8:	466a      	mov	r2, sp
     dca:	4b0e      	ldr	r3, [pc, #56]	; (e04 <_sercom_get_sercom_inst_index+0x40>)
     dcc:	cb32      	ldmia	r3!, {r1, r4, r5}
     dce:	c232      	stmia	r2!, {r1, r4, r5}
     dd0:	681b      	ldr	r3, [r3, #0]
     dd2:	6013      	str	r3, [r2, #0]

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     dd4:	0003      	movs	r3, r0
     dd6:	9a00      	ldr	r2, [sp, #0]
     dd8:	4282      	cmp	r2, r0
     dda:	d00f      	beq.n	dfc <_sercom_get_sercom_inst_index+0x38>
     ddc:	9a01      	ldr	r2, [sp, #4]
     dde:	4282      	cmp	r2, r0
     de0:	d008      	beq.n	df4 <_sercom_get_sercom_inst_index+0x30>
     de2:	9a02      	ldr	r2, [sp, #8]
     de4:	4282      	cmp	r2, r0
     de6:	d007      	beq.n	df8 <_sercom_get_sercom_inst_index+0x34>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     de8:	2000      	movs	r0, #0
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     dea:	9a03      	ldr	r2, [sp, #12]
     dec:	429a      	cmp	r2, r3
     dee:	d107      	bne.n	e00 <_sercom_get_sercom_inst_index+0x3c>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     df0:	3003      	adds	r0, #3
     df2:	e004      	b.n	dfe <_sercom_get_sercom_inst_index+0x3a>
     df4:	2001      	movs	r0, #1
     df6:	e002      	b.n	dfe <_sercom_get_sercom_inst_index+0x3a>
     df8:	2002      	movs	r0, #2
     dfa:	e000      	b.n	dfe <_sercom_get_sercom_inst_index+0x3a>
     dfc:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     dfe:	b2c0      	uxtb	r0, r0
	}

	/* Invalid data given */
	Assert(false);
	return 0;
}
     e00:	b005      	add	sp, #20
     e02:	bd30      	pop	{r4, r5, pc}
     e04:	0000375c 	.word	0x0000375c

00000e08 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     e08:	b5f0      	push	{r4, r5, r6, r7, lr}
     e0a:	465f      	mov	r7, fp
     e0c:	4656      	mov	r6, sl
     e0e:	464d      	mov	r5, r9
     e10:	4644      	mov	r4, r8
     e12:	b4f0      	push	{r4, r5, r6, r7}
     e14:	b091      	sub	sp, #68	; 0x44
     e16:	0005      	movs	r5, r0
     e18:	000c      	movs	r4, r1
     e1a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     e1c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     e1e:	0008      	movs	r0, r1
     e20:	4bb9      	ldr	r3, [pc, #740]	; (1108 <usart_init+0x300>)
     e22:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     e24:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     e26:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     e28:	07d2      	lsls	r2, r2, #31
     e2a:	d500      	bpl.n	e2e <usart_init+0x26>
     e2c:	e164      	b.n	10f8 <usart_init+0x2f0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     e2e:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     e30:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     e32:	0792      	lsls	r2, r2, #30
     e34:	d500      	bpl.n	e38 <usart_init+0x30>
     e36:	e15f      	b.n	10f8 <usart_init+0x2f0>
     e38:	49b4      	ldr	r1, [pc, #720]	; (110c <usart_init+0x304>)
     e3a:	6a0a      	ldr	r2, [r1, #32]
     e3c:	1c87      	adds	r7, r0, #2
     e3e:	3b1b      	subs	r3, #27
     e40:	40bb      	lsls	r3, r7
     e42:	4313      	orrs	r3, r2
     e44:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     e46:	a90f      	add	r1, sp, #60	; 0x3c
     e48:	272d      	movs	r7, #45	; 0x2d
     e4a:	5df3      	ldrb	r3, [r6, r7]
     e4c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     e4e:	3014      	adds	r0, #20
     e50:	b2c3      	uxtb	r3, r0
     e52:	9302      	str	r3, [sp, #8]
     e54:	0018      	movs	r0, r3
     e56:	4bae      	ldr	r3, [pc, #696]	; (1110 <usart_init+0x308>)
     e58:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     e5a:	9802      	ldr	r0, [sp, #8]
     e5c:	4bad      	ldr	r3, [pc, #692]	; (1114 <usart_init+0x30c>)
     e5e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     e60:	5df0      	ldrb	r0, [r6, r7]
     e62:	2100      	movs	r1, #0
     e64:	4bac      	ldr	r3, [pc, #688]	; (1118 <usart_init+0x310>)
     e66:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     e68:	7af3      	ldrb	r3, [r6, #11]
     e6a:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     e6c:	2324      	movs	r3, #36	; 0x24
     e6e:	5cf3      	ldrb	r3, [r6, r3]
     e70:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     e72:	2325      	movs	r3, #37	; 0x25
     e74:	5cf3      	ldrb	r3, [r6, r3]
     e76:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     e78:	7ef3      	ldrb	r3, [r6, #27]
     e7a:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     e7c:	7f33      	ldrb	r3, [r6, #28]
     e7e:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     e80:	682b      	ldr	r3, [r5, #0]
     e82:	4699      	mov	r9, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     e84:	0018      	movs	r0, r3
     e86:	4ba0      	ldr	r3, [pc, #640]	; (1108 <usart_init+0x300>)
     e88:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     e8a:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     e8c:	2200      	movs	r2, #0
     e8e:	230e      	movs	r3, #14
     e90:	a906      	add	r1, sp, #24
     e92:	468c      	mov	ip, r1
     e94:	4463      	add	r3, ip
     e96:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     e98:	8a32      	ldrh	r2, [r6, #16]
     e9a:	9202      	str	r2, [sp, #8]
     e9c:	2380      	movs	r3, #128	; 0x80
     e9e:	01db      	lsls	r3, r3, #7
     ea0:	429a      	cmp	r2, r3
     ea2:	d01a      	beq.n	eda <usart_init+0xd2>
     ea4:	d804      	bhi.n	eb0 <usart_init+0xa8>
     ea6:	2380      	movs	r3, #128	; 0x80
     ea8:	019b      	lsls	r3, r3, #6
     eaa:	429a      	cmp	r2, r3
     eac:	d00b      	beq.n	ec6 <usart_init+0xbe>
     eae:	e104      	b.n	10ba <usart_init+0x2b2>
     eb0:	23c0      	movs	r3, #192	; 0xc0
     eb2:	01db      	lsls	r3, r3, #7
     eb4:	9a02      	ldr	r2, [sp, #8]
     eb6:	429a      	cmp	r2, r3
     eb8:	d00a      	beq.n	ed0 <usart_init+0xc8>
     eba:	2380      	movs	r3, #128	; 0x80
     ebc:	021b      	lsls	r3, r3, #8
     ebe:	429a      	cmp	r2, r3
     ec0:	d100      	bne.n	ec4 <usart_init+0xbc>
     ec2:	e0ff      	b.n	10c4 <usart_init+0x2bc>
     ec4:	e0f9      	b.n	10ba <usart_init+0x2b2>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     ec6:	2310      	movs	r3, #16
     ec8:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     eca:	3b0f      	subs	r3, #15
     ecc:	9307      	str	r3, [sp, #28]
     ece:	e0fd      	b.n	10cc <usart_init+0x2c4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     ed0:	2308      	movs	r3, #8
     ed2:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     ed4:	3b07      	subs	r3, #7
     ed6:	9307      	str	r3, [sp, #28]
     ed8:	e0f8      	b.n	10cc <usart_init+0x2c4>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     eda:	6833      	ldr	r3, [r6, #0]
     edc:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
     ede:	68f3      	ldr	r3, [r6, #12]
     ee0:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     ee2:	6973      	ldr	r3, [r6, #20]
     ee4:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     ee6:	7e33      	ldrb	r3, [r6, #24]
     ee8:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     eea:	2326      	movs	r3, #38	; 0x26
     eec:	5cf3      	ldrb	r3, [r6, r3]
     eee:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     ef0:	6873      	ldr	r3, [r6, #4]
     ef2:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     ef4:	2b00      	cmp	r3, #0
     ef6:	d015      	beq.n	f24 <usart_init+0x11c>
     ef8:	2380      	movs	r3, #128	; 0x80
     efa:	055b      	lsls	r3, r3, #21
     efc:	459a      	cmp	sl, r3
     efe:	d136      	bne.n	f6e <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     f00:	2327      	movs	r3, #39	; 0x27
     f02:	5cf3      	ldrb	r3, [r6, r3]
     f04:	2b00      	cmp	r3, #0
     f06:	d136      	bne.n	f76 <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     f08:	6a33      	ldr	r3, [r6, #32]
     f0a:	001f      	movs	r7, r3
     f0c:	b2c0      	uxtb	r0, r0
     f0e:	4b83      	ldr	r3, [pc, #524]	; (111c <usart_init+0x314>)
     f10:	4798      	blx	r3
     f12:	0001      	movs	r1, r0
     f14:	220e      	movs	r2, #14
     f16:	ab06      	add	r3, sp, #24
     f18:	469c      	mov	ip, r3
     f1a:	4462      	add	r2, ip
     f1c:	0038      	movs	r0, r7
     f1e:	4b80      	ldr	r3, [pc, #512]	; (1120 <usart_init+0x318>)
     f20:	4798      	blx	r3
     f22:	e025      	b.n	f70 <usart_init+0x168>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     f24:	2308      	movs	r3, #8
     f26:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     f28:	2300      	movs	r3, #0
     f2a:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     f2c:	2327      	movs	r3, #39	; 0x27
     f2e:	5cf3      	ldrb	r3, [r6, r3]
     f30:	2b00      	cmp	r3, #0
     f32:	d00b      	beq.n	f4c <usart_init+0x144>
				status_code =
     f34:	9b06      	ldr	r3, [sp, #24]
     f36:	9300      	str	r3, [sp, #0]
     f38:	9b07      	ldr	r3, [sp, #28]
     f3a:	220e      	movs	r2, #14
     f3c:	a906      	add	r1, sp, #24
     f3e:	468c      	mov	ip, r1
     f40:	4462      	add	r2, ip
     f42:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     f44:	6a30      	ldr	r0, [r6, #32]
     f46:	4f77      	ldr	r7, [pc, #476]	; (1124 <usart_init+0x31c>)
     f48:	47b8      	blx	r7
     f4a:	e011      	b.n	f70 <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     f4c:	6a33      	ldr	r3, [r6, #32]
     f4e:	001f      	movs	r7, r3
     f50:	b2c0      	uxtb	r0, r0
     f52:	4b72      	ldr	r3, [pc, #456]	; (111c <usart_init+0x314>)
     f54:	4798      	blx	r3
     f56:	0001      	movs	r1, r0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     f58:	9b06      	ldr	r3, [sp, #24]
     f5a:	9300      	str	r3, [sp, #0]
     f5c:	9b07      	ldr	r3, [sp, #28]
     f5e:	220e      	movs	r2, #14
     f60:	a806      	add	r0, sp, #24
     f62:	4684      	mov	ip, r0
     f64:	4462      	add	r2, ip
     f66:	0038      	movs	r0, r7
     f68:	4f6e      	ldr	r7, [pc, #440]	; (1124 <usart_init+0x31c>)
     f6a:	47b8      	blx	r7
     f6c:	e000      	b.n	f70 <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     f6e:	2000      	movs	r0, #0
     f70:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     f72:	d000      	beq.n	f76 <usart_init+0x16e>
     f74:	e0c0      	b.n	10f8 <usart_init+0x2f0>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     f76:	7e73      	ldrb	r3, [r6, #25]
     f78:	2b00      	cmp	r3, #0
     f7a:	d002      	beq.n	f82 <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     f7c:	7eb3      	ldrb	r3, [r6, #26]
     f7e:	464a      	mov	r2, r9
     f80:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     f82:	682a      	ldr	r2, [r5, #0]
     f84:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     f86:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     f88:	2b00      	cmp	r3, #0
     f8a:	d1fc      	bne.n	f86 <usart_init+0x17e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     f8c:	330e      	adds	r3, #14
     f8e:	aa06      	add	r2, sp, #24
     f90:	4694      	mov	ip, r2
     f92:	4463      	add	r3, ip
     f94:	881b      	ldrh	r3, [r3, #0]
     f96:	464a      	mov	r2, r9
     f98:	8193      	strh	r3, [r2, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
     f9a:	9b04      	ldr	r3, [sp, #16]
     f9c:	465a      	mov	r2, fp
     f9e:	4313      	orrs	r3, r2
     fa0:	9a03      	ldr	r2, [sp, #12]
     fa2:	4313      	orrs	r3, r2
     fa4:	4652      	mov	r2, sl
     fa6:	4313      	orrs	r3, r2
     fa8:	433b      	orrs	r3, r7
     faa:	4642      	mov	r2, r8
     fac:	0212      	lsls	r2, r2, #8
     fae:	4313      	orrs	r3, r2
     fb0:	9a05      	ldr	r2, [sp, #20]
     fb2:	0757      	lsls	r7, r2, #29
     fb4:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     fb6:	2327      	movs	r3, #39	; 0x27
     fb8:	5cf3      	ldrb	r3, [r6, r3]
     fba:	2b00      	cmp	r3, #0
     fbc:	d101      	bne.n	fc2 <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     fbe:	3304      	adds	r3, #4
     fc0:	431f      	orrs	r7, r3
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
     fc2:	7e71      	ldrb	r1, [r6, #25]
     fc4:	0289      	lsls	r1, r1, #10
     fc6:	7f33      	ldrb	r3, [r6, #28]
     fc8:	025b      	lsls	r3, r3, #9
     fca:	4319      	orrs	r1, r3
     fcc:	7f73      	ldrb	r3, [r6, #29]
     fce:	021b      	lsls	r3, r3, #8
     fd0:	4319      	orrs	r1, r3
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     fd2:	2324      	movs	r3, #36	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
     fd4:	5cf3      	ldrb	r3, [r6, r3]
     fd6:	045b      	lsls	r3, r3, #17
     fd8:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     fda:	2325      	movs	r3, #37	; 0x25
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
     fdc:	5cf2      	ldrb	r2, [r6, r3]
     fde:	0412      	lsls	r2, r2, #16
     fe0:	4311      	orrs	r1, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
     fe2:	7af3      	ldrb	r3, [r6, #11]
     fe4:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     fe6:	8933      	ldrh	r3, [r6, #8]
     fe8:	2bff      	cmp	r3, #255	; 0xff
     fea:	d004      	beq.n	ff6 <usart_init+0x1ee>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     fec:	2280      	movs	r2, #128	; 0x80
     fee:	0452      	lsls	r2, r2, #17
     ff0:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     ff2:	4319      	orrs	r1, r3
     ff4:	e005      	b.n	1002 <usart_init+0x1fa>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     ff6:	7ef3      	ldrb	r3, [r6, #27]
     ff8:	2b00      	cmp	r3, #0
     ffa:	d002      	beq.n	1002 <usart_init+0x1fa>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     ffc:	2380      	movs	r3, #128	; 0x80
     ffe:	04db      	lsls	r3, r3, #19
    1000:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1002:	232c      	movs	r3, #44	; 0x2c
    1004:	5cf3      	ldrb	r3, [r6, r3]
    1006:	2b00      	cmp	r3, #0
    1008:	d103      	bne.n	1012 <usart_init+0x20a>
    100a:	4b47      	ldr	r3, [pc, #284]	; (1128 <usart_init+0x320>)
    100c:	789b      	ldrb	r3, [r3, #2]
    100e:	079b      	lsls	r3, r3, #30
    1010:	d501      	bpl.n	1016 <usart_init+0x20e>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1012:	2380      	movs	r3, #128	; 0x80
    1014:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1016:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1018:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    101a:	2b00      	cmp	r3, #0
    101c:	d1fc      	bne.n	1018 <usart_init+0x210>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    101e:	464b      	mov	r3, r9
    1020:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1022:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1024:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1026:	2b00      	cmp	r3, #0
    1028:	d1fc      	bne.n	1024 <usart_init+0x21c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    102a:	464b      	mov	r3, r9
    102c:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    102e:	ab0e      	add	r3, sp, #56	; 0x38
    1030:	2280      	movs	r2, #128	; 0x80
    1032:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1034:	2200      	movs	r2, #0
    1036:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1038:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    103a:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    103c:	6b33      	ldr	r3, [r6, #48]	; 0x30
    103e:	930a      	str	r3, [sp, #40]	; 0x28
    1040:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1042:	930b      	str	r3, [sp, #44]	; 0x2c
    1044:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1046:	930c      	str	r3, [sp, #48]	; 0x30
    1048:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    104a:	9302      	str	r3, [sp, #8]
    104c:	930d      	str	r3, [sp, #52]	; 0x34
    104e:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1050:	ae0e      	add	r6, sp, #56	; 0x38
    1052:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1054:	00bb      	lsls	r3, r7, #2
    1056:	aa0a      	add	r2, sp, #40	; 0x28
    1058:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    105a:	2800      	cmp	r0, #0
    105c:	d102      	bne.n	1064 <usart_init+0x25c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    105e:	0020      	movs	r0, r4
    1060:	4b32      	ldr	r3, [pc, #200]	; (112c <usart_init+0x324>)
    1062:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    1064:	1c43      	adds	r3, r0, #1
    1066:	d005      	beq.n	1074 <usart_init+0x26c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1068:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    106a:	0c00      	lsrs	r0, r0, #16
    106c:	b2c0      	uxtb	r0, r0
    106e:	0031      	movs	r1, r6
    1070:	4b2f      	ldr	r3, [pc, #188]	; (1130 <usart_init+0x328>)
    1072:	4798      	blx	r3
    1074:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1076:	2f04      	cmp	r7, #4
    1078:	d1eb      	bne.n	1052 <usart_init+0x24a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    107a:	2300      	movs	r3, #0
    107c:	60eb      	str	r3, [r5, #12]
    107e:	612b      	str	r3, [r5, #16]
    1080:	616b      	str	r3, [r5, #20]
    1082:	61ab      	str	r3, [r5, #24]
    1084:	61eb      	str	r3, [r5, #28]
    1086:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    1088:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    108a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    108c:	2200      	movs	r2, #0
    108e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1090:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1092:	3330      	adds	r3, #48	; 0x30
    1094:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1096:	3301      	adds	r3, #1
    1098:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    109a:	3301      	adds	r3, #1
    109c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    109e:	3301      	adds	r3, #1
    10a0:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    10a2:	6828      	ldr	r0, [r5, #0]
    10a4:	4b18      	ldr	r3, [pc, #96]	; (1108 <usart_init+0x300>)
    10a6:	4798      	blx	r3
    10a8:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    10aa:	4922      	ldr	r1, [pc, #136]	; (1134 <usart_init+0x32c>)
    10ac:	4b22      	ldr	r3, [pc, #136]	; (1138 <usart_init+0x330>)
    10ae:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    10b0:	00a4      	lsls	r4, r4, #2
    10b2:	4b22      	ldr	r3, [pc, #136]	; (113c <usart_init+0x334>)
    10b4:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    10b6:	2300      	movs	r3, #0
    10b8:	e01e      	b.n	10f8 <usart_init+0x2f0>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    10ba:	2310      	movs	r3, #16
    10bc:	9306      	str	r3, [sp, #24]
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    10be:	2300      	movs	r3, #0
    10c0:	9307      	str	r3, [sp, #28]
    10c2:	e003      	b.n	10cc <usart_init+0x2c4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    10c4:	2303      	movs	r3, #3
    10c6:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    10c8:	2300      	movs	r3, #0
    10ca:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    10cc:	6833      	ldr	r3, [r6, #0]
    10ce:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    10d0:	68f3      	ldr	r3, [r6, #12]
    10d2:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    10d4:	6973      	ldr	r3, [r6, #20]
    10d6:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    10d8:	7e33      	ldrb	r3, [r6, #24]
    10da:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    10dc:	2326      	movs	r3, #38	; 0x26
    10de:	5cf3      	ldrb	r3, [r6, r3]
    10e0:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    10e2:	6873      	ldr	r3, [r6, #4]
    10e4:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    10e6:	2b00      	cmp	r3, #0
    10e8:	d100      	bne.n	10ec <usart_init+0x2e4>
    10ea:	e71f      	b.n	f2c <usart_init+0x124>
    10ec:	2380      	movs	r3, #128	; 0x80
    10ee:	055b      	lsls	r3, r3, #21
    10f0:	459a      	cmp	sl, r3
    10f2:	d100      	bne.n	10f6 <usart_init+0x2ee>
    10f4:	e704      	b.n	f00 <usart_init+0xf8>
    10f6:	e73e      	b.n	f76 <usart_init+0x16e>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    10f8:	0018      	movs	r0, r3
    10fa:	b011      	add	sp, #68	; 0x44
    10fc:	bc3c      	pop	{r2, r3, r4, r5}
    10fe:	4690      	mov	r8, r2
    1100:	4699      	mov	r9, r3
    1102:	46a2      	mov	sl, r4
    1104:	46ab      	mov	fp, r5
    1106:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1108:	00000dc5 	.word	0x00000dc5
    110c:	40000400 	.word	0x40000400
    1110:	000019c1 	.word	0x000019c1
    1114:	00001935 	.word	0x00001935
    1118:	00000c71 	.word	0x00000c71
    111c:	000019dd 	.word	0x000019dd
    1120:	00000a81 	.word	0x00000a81
    1124:	00000aa9 	.word	0x00000aa9
    1128:	41002000 	.word	0x41002000
    112c:	00000cbd 	.word	0x00000cbd
    1130:	00001ab9 	.word	0x00001ab9
    1134:	00001299 	.word	0x00001299
    1138:	00001429 	.word	0x00001429
    113c:	200000c0 	.word	0x200000c0

00001140 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1140:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1142:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1144:	2a00      	cmp	r2, #0
    1146:	d00e      	beq.n	1166 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    1148:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    114a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    114c:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    114e:	2a00      	cmp	r2, #0
    1150:	d109      	bne.n	1166 <usart_write_wait+0x26>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1152:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1154:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1156:	2a00      	cmp	r2, #0
    1158:	d1fc      	bne.n	1154 <usart_write_wait+0x14>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    115a:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    115c:	2102      	movs	r1, #2
    115e:	7e1a      	ldrb	r2, [r3, #24]
    1160:	420a      	tst	r2, r1
    1162:	d0fc      	beq.n	115e <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    1164:	2300      	movs	r3, #0
}
    1166:	0018      	movs	r0, r3
    1168:	4770      	bx	lr
    116a:	46c0      	nop			; (mov r8, r8)

0000116c <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    116c:	b5f0      	push	{r4, r5, r6, r7, lr}
    116e:	464f      	mov	r7, r9
    1170:	b480      	push	{r7}
    1172:	b082      	sub	sp, #8
    1174:	0004      	movs	r4, r0
    1176:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1178:	2017      	movs	r0, #23
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    117a:	2a00      	cmp	r2, #0
    117c:	d049      	beq.n	1212 <usart_write_buffer_wait+0xa6>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    117e:	79e3      	ldrb	r3, [r4, #7]
		return STATUS_ERR_DENIED;
    1180:	3005      	adds	r0, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1182:	2b00      	cmp	r3, #0
    1184:	d045      	beq.n	1212 <usart_write_buffer_wait+0xa6>
		return STATUS_ERR_DENIED;
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1186:	6827      	ldr	r7, [r4, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1188:	69fb      	ldr	r3, [r7, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    118a:	2b00      	cmp	r3, #0
    118c:	d1fc      	bne.n	1188 <usart_write_buffer_wait+0x1c>
    118e:	4691      	mov	r9, r2
    1190:	2500      	movs	r5, #0
	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    1192:	2601      	movs	r6, #1
    1194:	e020      	b.n	11d8 <usart_write_buffer_wait+0x6c>
    1196:	7e3a      	ldrb	r2, [r7, #24]
    1198:	4232      	tst	r2, r6
    119a:	d104      	bne.n	11a6 <usart_write_buffer_wait+0x3a>
				break;
			} else if (i == USART_TIMEOUT) {
    119c:	2b01      	cmp	r3, #1
    119e:	d02a      	beq.n	11f6 <usart_write_buffer_wait+0x8a>
    11a0:	3b01      	subs	r3, #1

	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    11a2:	2b00      	cmp	r3, #0
    11a4:	d1f7      	bne.n	1196 <usart_write_buffer_wait+0x2a>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    11a6:	1c6a      	adds	r2, r5, #1
    11a8:	b292      	uxth	r2, r2
    11aa:	9b01      	ldr	r3, [sp, #4]
    11ac:	5d5b      	ldrb	r3, [r3, r5]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    11ae:	7961      	ldrb	r1, [r4, #5]
    11b0:	2901      	cmp	r1, #1
    11b2:	d002      	beq.n	11ba <usart_write_buffer_wait+0x4e>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    11b4:	b299      	uxth	r1, r3
    11b6:	0015      	movs	r5, r2
    11b8:	e005      	b.n	11c6 <usart_write_buffer_wait+0x5a>

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
    11ba:	1ca9      	adds	r1, r5, #2
    11bc:	b28d      	uxth	r5, r1
    11be:	9901      	ldr	r1, [sp, #4]
    11c0:	5c89      	ldrb	r1, [r1, r2]
    11c2:	0209      	lsls	r1, r1, #8
    11c4:	4319      	orrs	r1, r3
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
    11c6:	0020      	movs	r0, r4
    11c8:	4b14      	ldr	r3, [pc, #80]	; (121c <usart_write_buffer_wait+0xb0>)
    11ca:	4798      	blx	r3
    11cc:	464a      	mov	r2, r9
    11ce:	3a01      	subs	r2, #1
    11d0:	b293      	uxth	r3, r2
    11d2:	4699      	mov	r9, r3
	_usart_wait_for_sync(module);

	uint16_t tx_pos = 0;

	/* Blocks while buffer is being transferred */
	while (length--) {
    11d4:	2b00      	cmp	r3, #0
    11d6:	d016      	beq.n	1206 <usart_write_buffer_wait+0x9a>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    11d8:	7e3b      	ldrb	r3, [r7, #24]
    11da:	4233      	tst	r3, r6
    11dc:	d1e3      	bne.n	11a6 <usart_write_buffer_wait+0x3a>
    11de:	4b10      	ldr	r3, [pc, #64]	; (1220 <usart_write_buffer_wait+0xb4>)
    11e0:	e7d9      	b.n	1196 <usart_write_buffer_wait+0x2a>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    11e2:	7e3a      	ldrb	r2, [r7, #24]
    11e4:	420a      	tst	r2, r1
    11e6:	d108      	bne.n	11fa <usart_write_buffer_wait+0x8e>
			break;
		} else if (i == USART_TIMEOUT) {
    11e8:	2b01      	cmp	r3, #1
    11ea:	d008      	beq.n	11fe <usart_write_buffer_wait+0x92>
    11ec:	3b01      	subs	r3, #1
		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    11ee:	2b00      	cmp	r3, #0
    11f0:	d1f7      	bne.n	11e2 <usart_write_buffer_wait+0x76>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
    11f2:	2000      	movs	r0, #0
    11f4:	e00d      	b.n	1212 <usart_write_buffer_wait+0xa6>
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
				break;
			} else if (i == USART_TIMEOUT) {
				return STATUS_ERR_TIMEOUT;
    11f6:	2012      	movs	r0, #18
    11f8:	e00b      	b.n	1212 <usart_write_buffer_wait+0xa6>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
    11fa:	2000      	movs	r0, #0
    11fc:	e009      	b.n	1212 <usart_write_buffer_wait+0xa6>
	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
			break;
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
    11fe:	2012      	movs	r0, #18
    1200:	e007      	b.n	1212 <usart_write_buffer_wait+0xa6>
		}
	}

	return STATUS_OK;
    1202:	2000      	movs	r0, #0
    1204:	e005      	b.n	1212 <usart_write_buffer_wait+0xa6>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    1206:	7e3b      	ldrb	r3, [r7, #24]
    1208:	079b      	lsls	r3, r3, #30
    120a:	d4fa      	bmi.n	1202 <usart_write_buffer_wait+0x96>
    120c:	4b04      	ldr	r3, [pc, #16]	; (1220 <usart_write_buffer_wait+0xb4>)
    120e:	2102      	movs	r1, #2
    1210:	e7e7      	b.n	11e2 <usart_write_buffer_wait+0x76>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    1212:	b002      	add	sp, #8
    1214:	bc04      	pop	{r2}
    1216:	4691      	mov	r9, r2
    1218:	bdf0      	pop	{r4, r5, r6, r7, pc}
    121a:	46c0      	nop			; (mov r8, r8)
    121c:	00001141 	.word	0x00001141
    1220:	0000ffff 	.word	0x0000ffff

00001224 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    1224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1226:	0006      	movs	r6, r0
    1228:	000c      	movs	r4, r1
    122a:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    122c:	6807      	ldr	r7, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    122e:	4b0a      	ldr	r3, [pc, #40]	; (1258 <_usart_write_buffer+0x34>)
    1230:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    1232:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    1234:	b29b      	uxth	r3, r3
    1236:	2b00      	cmp	r3, #0
    1238:	d003      	beq.n	1242 <_usart_write_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    123a:	4b08      	ldr	r3, [pc, #32]	; (125c <_usart_write_buffer+0x38>)
    123c:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    123e:	2005      	movs	r0, #5
    1240:	e009      	b.n	1256 <_usart_write_buffer+0x32>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    1242:	85f5      	strh	r5, [r6, #46]	; 0x2e
    1244:	4b05      	ldr	r3, [pc, #20]	; (125c <_usart_write_buffer+0x38>)
    1246:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	module->tx_buffer_ptr              = tx_data;
    1248:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    124a:	2205      	movs	r2, #5
    124c:	2333      	movs	r3, #51	; 0x33
    124e:	54f2      	strb	r2, [r6, r3]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    1250:	3b32      	subs	r3, #50	; 0x32
    1252:	75bb      	strb	r3, [r7, #22]

	return STATUS_OK;
    1254:	2000      	movs	r0, #0
}
    1256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1258:	0000150d 	.word	0x0000150d
    125c:	0000154d 	.word	0x0000154d

00001260 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1260:	1c93      	adds	r3, r2, #2
    1262:	009b      	lsls	r3, r3, #2
    1264:	18c3      	adds	r3, r0, r3
    1266:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    1268:	2130      	movs	r1, #48	; 0x30
    126a:	2301      	movs	r3, #1
    126c:	4093      	lsls	r3, r2
    126e:	5c42      	ldrb	r2, [r0, r1]
    1270:	4313      	orrs	r3, r2
    1272:	5443      	strb	r3, [r0, r1]
}
    1274:	4770      	bx	lr
    1276:	46c0      	nop			; (mov r8, r8)

00001278 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    1278:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    127a:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    127c:	2a00      	cmp	r2, #0
    127e:	d006      	beq.n	128e <usart_write_buffer_job+0x16>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    1280:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    1282:	3305      	adds	r3, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    1284:	2c00      	cmp	r4, #0
    1286:	d002      	beq.n	128e <usart_write_buffer_job+0x16>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    1288:	4b02      	ldr	r3, [pc, #8]	; (1294 <usart_write_buffer_job+0x1c>)
    128a:	4798      	blx	r3
    128c:	0003      	movs	r3, r0
}
    128e:	0018      	movs	r0, r3
    1290:	bd10      	pop	{r4, pc}
    1292:	46c0      	nop			; (mov r8, r8)
    1294:	00001225 	.word	0x00001225

00001298 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    129a:	0080      	lsls	r0, r0, #2
    129c:	4b60      	ldr	r3, [pc, #384]	; (1420 <_usart_interrupt_handler+0x188>)
    129e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    12a0:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    12a2:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    12a4:	2b00      	cmp	r3, #0
    12a6:	d1fc      	bne.n	12a2 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    12a8:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    12aa:	7da6      	ldrb	r6, [r4, #22]
    12ac:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    12ae:	2330      	movs	r3, #48	; 0x30
    12b0:	5ceb      	ldrb	r3, [r5, r3]
    12b2:	2231      	movs	r2, #49	; 0x31
    12b4:	5caf      	ldrb	r7, [r5, r2]
    12b6:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    12b8:	07f3      	lsls	r3, r6, #31
    12ba:	d522      	bpl.n	1302 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    12bc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    12be:	b29b      	uxth	r3, r3
    12c0:	2b00      	cmp	r3, #0
    12c2:	d01c      	beq.n	12fe <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    12c4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    12c6:	7813      	ldrb	r3, [r2, #0]
    12c8:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    12ca:	1c51      	adds	r1, r2, #1
    12cc:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    12ce:	7969      	ldrb	r1, [r5, #5]
    12d0:	2901      	cmp	r1, #1
    12d2:	d001      	beq.n	12d8 <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    12d4:	b29b      	uxth	r3, r3
    12d6:	e004      	b.n	12e2 <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    12d8:	7851      	ldrb	r1, [r2, #1]
    12da:	0209      	lsls	r1, r1, #8
    12dc:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    12de:	3202      	adds	r2, #2
    12e0:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    12e2:	05db      	lsls	r3, r3, #23
    12e4:	0ddb      	lsrs	r3, r3, #23
    12e6:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    12e8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    12ea:	3b01      	subs	r3, #1
    12ec:	b29b      	uxth	r3, r3
    12ee:	85eb      	strh	r3, [r5, #46]	; 0x2e
    12f0:	2b00      	cmp	r3, #0
    12f2:	d106      	bne.n	1302 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    12f4:	3301      	adds	r3, #1
    12f6:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    12f8:	3301      	adds	r3, #1
    12fa:	75a3      	strb	r3, [r4, #22]
    12fc:	e001      	b.n	1302 <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    12fe:	2301      	movs	r3, #1
    1300:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1302:	07b3      	lsls	r3, r6, #30
    1304:	d509      	bpl.n	131a <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1306:	2302      	movs	r3, #2
    1308:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    130a:	2200      	movs	r2, #0
    130c:	3331      	adds	r3, #49	; 0x31
    130e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1310:	07fb      	lsls	r3, r7, #31
    1312:	d502      	bpl.n	131a <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1314:	0028      	movs	r0, r5
    1316:	68eb      	ldr	r3, [r5, #12]
    1318:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    131a:	0773      	lsls	r3, r6, #29
    131c:	d560      	bpl.n	13e0 <_usart_interrupt_handler+0x148>

		if (module->remaining_rx_buffer_length) {
    131e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1320:	b29b      	uxth	r3, r3
    1322:	2b00      	cmp	r3, #0
    1324:	d05a      	beq.n	13dc <_usart_interrupt_handler+0x144>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1326:	8b63      	ldrh	r3, [r4, #26]
    1328:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    132a:	071a      	lsls	r2, r3, #28
    132c:	d402      	bmi.n	1334 <_usart_interrupt_handler+0x9c>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    132e:	223f      	movs	r2, #63	; 0x3f
    1330:	4013      	ands	r3, r2
    1332:	e001      	b.n	1338 <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1334:	2237      	movs	r2, #55	; 0x37
    1336:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1338:	2b00      	cmp	r3, #0
    133a:	d02d      	beq.n	1398 <_usart_interrupt_handler+0x100>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    133c:	079a      	lsls	r2, r3, #30
    133e:	d505      	bpl.n	134c <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1340:	221a      	movs	r2, #26
    1342:	2332      	movs	r3, #50	; 0x32
    1344:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1346:	3b30      	subs	r3, #48	; 0x30
    1348:	8363      	strh	r3, [r4, #26]
    134a:	e01f      	b.n	138c <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    134c:	075a      	lsls	r2, r3, #29
    134e:	d505      	bpl.n	135c <_usart_interrupt_handler+0xc4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    1350:	221e      	movs	r2, #30
    1352:	2332      	movs	r3, #50	; 0x32
    1354:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1356:	3b2e      	subs	r3, #46	; 0x2e
    1358:	8363      	strh	r3, [r4, #26]
    135a:	e017      	b.n	138c <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    135c:	07da      	lsls	r2, r3, #31
    135e:	d505      	bpl.n	136c <_usart_interrupt_handler+0xd4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    1360:	2213      	movs	r2, #19
    1362:	2332      	movs	r3, #50	; 0x32
    1364:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1366:	3b31      	subs	r3, #49	; 0x31
    1368:	8363      	strh	r3, [r4, #26]
    136a:	e00f      	b.n	138c <_usart_interrupt_handler+0xf4>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    136c:	06da      	lsls	r2, r3, #27
    136e:	d505      	bpl.n	137c <_usart_interrupt_handler+0xe4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1370:	2242      	movs	r2, #66	; 0x42
    1372:	2332      	movs	r3, #50	; 0x32
    1374:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1376:	3b22      	subs	r3, #34	; 0x22
    1378:	8363      	strh	r3, [r4, #26]
    137a:	e007      	b.n	138c <_usart_interrupt_handler+0xf4>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    137c:	2220      	movs	r2, #32
    137e:	421a      	tst	r2, r3
    1380:	d004      	beq.n	138c <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1382:	3221      	adds	r2, #33	; 0x21
    1384:	2332      	movs	r3, #50	; 0x32
    1386:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1388:	3b12      	subs	r3, #18
    138a:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    138c:	077b      	lsls	r3, r7, #29
    138e:	d527      	bpl.n	13e0 <_usart_interrupt_handler+0x148>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1390:	0028      	movs	r0, r5
    1392:	696b      	ldr	r3, [r5, #20]
    1394:	4798      	blx	r3
    1396:	e023      	b.n	13e0 <_usart_interrupt_handler+0x148>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1398:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    139a:	05db      	lsls	r3, r3, #23
    139c:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    139e:	b2da      	uxtb	r2, r3
    13a0:	6a69      	ldr	r1, [r5, #36]	; 0x24
    13a2:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    13a4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    13a6:	1c51      	adds	r1, r2, #1
    13a8:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    13aa:	7969      	ldrb	r1, [r5, #5]
    13ac:	2901      	cmp	r1, #1
    13ae:	d104      	bne.n	13ba <_usart_interrupt_handler+0x122>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    13b0:	0a1b      	lsrs	r3, r3, #8
    13b2:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    13b4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    13b6:	3301      	adds	r3, #1
    13b8:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    13ba:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    13bc:	3b01      	subs	r3, #1
    13be:	b29b      	uxth	r3, r3
    13c0:	85ab      	strh	r3, [r5, #44]	; 0x2c
    13c2:	2b00      	cmp	r3, #0
    13c4:	d10c      	bne.n	13e0 <_usart_interrupt_handler+0x148>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    13c6:	3304      	adds	r3, #4
    13c8:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    13ca:	2200      	movs	r2, #0
    13cc:	332e      	adds	r3, #46	; 0x2e
    13ce:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    13d0:	07bb      	lsls	r3, r7, #30
    13d2:	d505      	bpl.n	13e0 <_usart_interrupt_handler+0x148>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    13d4:	0028      	movs	r0, r5
    13d6:	692b      	ldr	r3, [r5, #16]
    13d8:	4798      	blx	r3
    13da:	e001      	b.n	13e0 <_usart_interrupt_handler+0x148>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    13dc:	2304      	movs	r3, #4
    13de:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    13e0:	06f3      	lsls	r3, r6, #27
    13e2:	d507      	bpl.n	13f4 <_usart_interrupt_handler+0x15c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    13e4:	2310      	movs	r3, #16
    13e6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    13e8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    13ea:	06fb      	lsls	r3, r7, #27
    13ec:	d502      	bpl.n	13f4 <_usart_interrupt_handler+0x15c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    13ee:	0028      	movs	r0, r5
    13f0:	69eb      	ldr	r3, [r5, #28]
    13f2:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    13f4:	06b3      	lsls	r3, r6, #26
    13f6:	d507      	bpl.n	1408 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    13f8:	2320      	movs	r3, #32
    13fa:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    13fc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    13fe:	073b      	lsls	r3, r7, #28
    1400:	d502      	bpl.n	1408 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1402:	0028      	movs	r0, r5
    1404:	69ab      	ldr	r3, [r5, #24]
    1406:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1408:	0733      	lsls	r3, r6, #28
    140a:	d507      	bpl.n	141c <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    140c:	2308      	movs	r3, #8
    140e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1410:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1412:	06bb      	lsls	r3, r7, #26
    1414:	d502      	bpl.n	141c <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1416:	6a2b      	ldr	r3, [r5, #32]
    1418:	0028      	movs	r0, r5
    141a:	4798      	blx	r3
		}
	}
#endif
}
    141c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    141e:	46c0      	nop			; (mov r8, r8)
    1420:	200000c0 	.word	0x200000c0

00001424 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1424:	4770      	bx	lr
    1426:	46c0      	nop			; (mov r8, r8)

00001428 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1428:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    142a:	4b0b      	ldr	r3, [pc, #44]	; (1458 <_sercom_set_handler+0x30>)
    142c:	781b      	ldrb	r3, [r3, #0]
    142e:	2b00      	cmp	r3, #0
    1430:	d10e      	bne.n	1450 <_sercom_set_handler+0x28>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1432:	4c0a      	ldr	r4, [pc, #40]	; (145c <_sercom_set_handler+0x34>)
    1434:	4d0a      	ldr	r5, [pc, #40]	; (1460 <_sercom_set_handler+0x38>)
    1436:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
    1438:	4b0a      	ldr	r3, [pc, #40]	; (1464 <_sercom_set_handler+0x3c>)
    143a:	2200      	movs	r2, #0
    143c:	601a      	str	r2, [r3, #0]
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    143e:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
    1440:	605a      	str	r2, [r3, #4]
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1442:	60a5      	str	r5, [r4, #8]
			_sercom_instances[i] = NULL;
    1444:	609a      	str	r2, [r3, #8]
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1446:	60e5      	str	r5, [r4, #12]
			_sercom_instances[i] = NULL;
    1448:	60da      	str	r2, [r3, #12]
		}

		_handler_table_initialized = true;
    144a:	3201      	adds	r2, #1
    144c:	4b02      	ldr	r3, [pc, #8]	; (1458 <_sercom_set_handler+0x30>)
    144e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1450:	0080      	lsls	r0, r0, #2
    1452:	4b02      	ldr	r3, [pc, #8]	; (145c <_sercom_set_handler+0x34>)
    1454:	50c1      	str	r1, [r0, r3]
}
    1456:	bd30      	pop	{r4, r5, pc}
    1458:	20000022 	.word	0x20000022
    145c:	20000024 	.word	0x20000024
    1460:	00001425 	.word	0x00001425
    1464:	200000c0 	.word	0x200000c0

00001468 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1468:	b530      	push	{r4, r5, lr}
    146a:	b083      	sub	sp, #12
    146c:	0005      	movs	r5, r0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    146e:	ac01      	add	r4, sp, #4
    1470:	2204      	movs	r2, #4
    1472:	4905      	ldr	r1, [pc, #20]	; (1488 <_sercom_get_interrupt_vector+0x20>)
    1474:	0020      	movs	r0, r4
    1476:	4b05      	ldr	r3, [pc, #20]	; (148c <_sercom_get_interrupt_vector+0x24>)
    1478:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    147a:	0028      	movs	r0, r5
    147c:	4b04      	ldr	r3, [pc, #16]	; (1490 <_sercom_get_interrupt_vector+0x28>)
    147e:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1480:	5620      	ldrsb	r0, [r4, r0]
}
    1482:	b003      	add	sp, #12
    1484:	bd30      	pop	{r4, r5, pc}
    1486:	46c0      	nop			; (mov r8, r8)
    1488:	0000376c 	.word	0x0000376c
    148c:	0000373d 	.word	0x0000373d
    1490:	00000dc5 	.word	0x00000dc5

00001494 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1494:	b510      	push	{r4, lr}
    1496:	4b02      	ldr	r3, [pc, #8]	; (14a0 <SERCOM0_Handler+0xc>)
    1498:	681b      	ldr	r3, [r3, #0]
    149a:	2000      	movs	r0, #0
    149c:	4798      	blx	r3
    149e:	bd10      	pop	{r4, pc}
    14a0:	20000024 	.word	0x20000024

000014a4 <SERCOM1_Handler>:
    14a4:	b510      	push	{r4, lr}
    14a6:	4b02      	ldr	r3, [pc, #8]	; (14b0 <SERCOM1_Handler+0xc>)
    14a8:	685b      	ldr	r3, [r3, #4]
    14aa:	2001      	movs	r0, #1
    14ac:	4798      	blx	r3
    14ae:	bd10      	pop	{r4, pc}
    14b0:	20000024 	.word	0x20000024

000014b4 <SERCOM2_Handler>:
    14b4:	b510      	push	{r4, lr}
    14b6:	4b02      	ldr	r3, [pc, #8]	; (14c0 <SERCOM2_Handler+0xc>)
    14b8:	689b      	ldr	r3, [r3, #8]
    14ba:	2002      	movs	r0, #2
    14bc:	4798      	blx	r3
    14be:	bd10      	pop	{r4, pc}
    14c0:	20000024 	.word	0x20000024

000014c4 <SERCOM3_Handler>:
    14c4:	b510      	push	{r4, lr}
    14c6:	4b02      	ldr	r3, [pc, #8]	; (14d0 <SERCOM3_Handler+0xc>)
    14c8:	68db      	ldr	r3, [r3, #12]
    14ca:	2003      	movs	r0, #3
    14cc:	4798      	blx	r3
    14ce:	bd10      	pop	{r4, pc}
    14d0:	20000024 	.word	0x20000024

000014d4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    14d4:	b570      	push	{r4, r5, r6, lr}
    14d6:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    14d8:	ac01      	add	r4, sp, #4
    14da:	2301      	movs	r3, #1
    14dc:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    14de:	2200      	movs	r2, #0
    14e0:	70a2      	strb	r2, [r4, #2]
    
    struct port_config pin_conf;
    port_get_config_defaults(&pin_conf);

    ///* Configure LEDs as outputs, turn them off */
    pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    14e2:	7023      	strb	r3, [r4, #0]
    port_pin_set_config(LED_RED_PIN, &pin_conf);
    14e4:	0021      	movs	r1, r4
    14e6:	200e      	movs	r0, #14
    14e8:	4e06      	ldr	r6, [pc, #24]	; (1504 <system_board_init+0x30>)
    14ea:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    14ec:	4d06      	ldr	r5, [pc, #24]	; (1508 <system_board_init+0x34>)
    14ee:	2380      	movs	r3, #128	; 0x80
    14f0:	01db      	lsls	r3, r3, #7
    14f2:	61ab      	str	r3, [r5, #24]
    port_pin_set_output_level(LED_RED_PIN, LED_RED_INACTIVE);
    
    port_pin_set_config(LED_GREEN_PIN, &pin_conf);
    14f4:	0021      	movs	r1, r4
    14f6:	200f      	movs	r0, #15
    14f8:	47b0      	blx	r6
    14fa:	2380      	movs	r3, #128	; 0x80
    14fc:	021b      	lsls	r3, r3, #8
    14fe:	61ab      	str	r3, [r5, #24]

    /* Set buttons as inputs */
    //pin_conf.direction  = PORT_PIN_DIR_INPUT;
    //pin_conf.input_pull = PORT_PIN_PULL_UP;
    //port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1500:	b002      	add	sp, #8
    1502:	bd70      	pop	{r4, r5, r6, pc}
    1504:	000004dd 	.word	0x000004dd
    1508:	41004400 	.word	0x41004400

0000150c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    150c:	4b0c      	ldr	r3, [pc, #48]	; (1540 <cpu_irq_enter_critical+0x34>)
    150e:	681b      	ldr	r3, [r3, #0]
    1510:	2b00      	cmp	r3, #0
    1512:	d110      	bne.n	1536 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1514:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1518:	2b00      	cmp	r3, #0
    151a:	d109      	bne.n	1530 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    151c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    151e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1522:	2200      	movs	r2, #0
    1524:	4b07      	ldr	r3, [pc, #28]	; (1544 <cpu_irq_enter_critical+0x38>)
    1526:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1528:	3201      	adds	r2, #1
    152a:	4b07      	ldr	r3, [pc, #28]	; (1548 <cpu_irq_enter_critical+0x3c>)
    152c:	701a      	strb	r2, [r3, #0]
    152e:	e002      	b.n	1536 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1530:	2200      	movs	r2, #0
    1532:	4b05      	ldr	r3, [pc, #20]	; (1548 <cpu_irq_enter_critical+0x3c>)
    1534:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1536:	4a02      	ldr	r2, [pc, #8]	; (1540 <cpu_irq_enter_critical+0x34>)
    1538:	6813      	ldr	r3, [r2, #0]
    153a:	3301      	adds	r3, #1
    153c:	6013      	str	r3, [r2, #0]
}
    153e:	4770      	bx	lr
    1540:	20000034 	.word	0x20000034
    1544:	20000000 	.word	0x20000000
    1548:	20000038 	.word	0x20000038

0000154c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    154c:	4b08      	ldr	r3, [pc, #32]	; (1570 <cpu_irq_leave_critical+0x24>)
    154e:	681a      	ldr	r2, [r3, #0]
    1550:	3a01      	subs	r2, #1
    1552:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1554:	681b      	ldr	r3, [r3, #0]
    1556:	2b00      	cmp	r3, #0
    1558:	d109      	bne.n	156e <cpu_irq_leave_critical+0x22>
    155a:	4b06      	ldr	r3, [pc, #24]	; (1574 <cpu_irq_leave_critical+0x28>)
    155c:	781b      	ldrb	r3, [r3, #0]
    155e:	2b00      	cmp	r3, #0
    1560:	d005      	beq.n	156e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1562:	2201      	movs	r2, #1
    1564:	4b04      	ldr	r3, [pc, #16]	; (1578 <cpu_irq_leave_critical+0x2c>)
    1566:	701a      	strb	r2, [r3, #0]
    1568:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    156c:	b662      	cpsie	i
	}
}
    156e:	4770      	bx	lr
    1570:	20000034 	.word	0x20000034
    1574:	20000038 	.word	0x20000038
    1578:	20000000 	.word	0x20000000

0000157c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    157c:	b510      	push	{r4, lr}
	switch (clock_source) {
    157e:	2808      	cmp	r0, #8
    1580:	d803      	bhi.n	158a <system_clock_source_get_hz+0xe>
    1582:	0080      	lsls	r0, r0, #2
    1584:	4b1b      	ldr	r3, [pc, #108]	; (15f4 <system_clock_source_get_hz+0x78>)
    1586:	581b      	ldr	r3, [r3, r0]
    1588:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    158a:	2000      	movs	r0, #0
    158c:	e030      	b.n	15f0 <system_clock_source_get_hz+0x74>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    158e:	4b1a      	ldr	r3, [pc, #104]	; (15f8 <system_clock_source_get_hz+0x7c>)
    1590:	6918      	ldr	r0, [r3, #16]
    1592:	e02d      	b.n	15f0 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1594:	4b19      	ldr	r3, [pc, #100]	; (15fc <system_clock_source_get_hz+0x80>)
    1596:	6a1b      	ldr	r3, [r3, #32]
    1598:	059b      	lsls	r3, r3, #22
    159a:	0f9b      	lsrs	r3, r3, #30
    159c:	4818      	ldr	r0, [pc, #96]	; (1600 <system_clock_source_get_hz+0x84>)
    159e:	40d8      	lsrs	r0, r3
    15a0:	e026      	b.n	15f0 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    15a2:	4b15      	ldr	r3, [pc, #84]	; (15f8 <system_clock_source_get_hz+0x7c>)
    15a4:	6958      	ldr	r0, [r3, #20]
    15a6:	e023      	b.n	15f0 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    15a8:	4b13      	ldr	r3, [pc, #76]	; (15f8 <system_clock_source_get_hz+0x7c>)
    15aa:	681b      	ldr	r3, [r3, #0]
    15ac:	2002      	movs	r0, #2
    15ae:	4018      	ands	r0, r3
    15b0:	d01e      	beq.n	15f0 <system_clock_source_get_hz+0x74>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    15b2:	4912      	ldr	r1, [pc, #72]	; (15fc <system_clock_source_get_hz+0x80>)
    15b4:	2210      	movs	r2, #16
    15b6:	68cb      	ldr	r3, [r1, #12]
    15b8:	421a      	tst	r2, r3
    15ba:	d0fc      	beq.n	15b6 <system_clock_source_get_hz+0x3a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    15bc:	4b0e      	ldr	r3, [pc, #56]	; (15f8 <system_clock_source_get_hz+0x7c>)
    15be:	681b      	ldr	r3, [r3, #0]
    15c0:	075b      	lsls	r3, r3, #29
    15c2:	d514      	bpl.n	15ee <system_clock_source_get_hz+0x72>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    15c4:	2000      	movs	r0, #0
    15c6:	4b0f      	ldr	r3, [pc, #60]	; (1604 <system_clock_source_get_hz+0x88>)
    15c8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    15ca:	4b0b      	ldr	r3, [pc, #44]	; (15f8 <system_clock_source_get_hz+0x7c>)
    15cc:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    15ce:	041b      	lsls	r3, r3, #16
    15d0:	0c1b      	lsrs	r3, r3, #16
    15d2:	4358      	muls	r0, r3
    15d4:	e00c      	b.n	15f0 <system_clock_source_get_hz+0x74>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    15d6:	2350      	movs	r3, #80	; 0x50
    15d8:	4a08      	ldr	r2, [pc, #32]	; (15fc <system_clock_source_get_hz+0x80>)
    15da:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    15dc:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    15de:	075b      	lsls	r3, r3, #29
    15e0:	d506      	bpl.n	15f0 <system_clock_source_get_hz+0x74>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    15e2:	4b05      	ldr	r3, [pc, #20]	; (15f8 <system_clock_source_get_hz+0x7c>)
    15e4:	68d8      	ldr	r0, [r3, #12]
    15e6:	e003      	b.n	15f0 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    15e8:	2080      	movs	r0, #128	; 0x80
    15ea:	0200      	lsls	r0, r0, #8
    15ec:	e000      	b.n	15f0 <system_clock_source_get_hz+0x74>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    15ee:	4806      	ldr	r0, [pc, #24]	; (1608 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    15f0:	bd10      	pop	{r4, pc}
    15f2:	46c0      	nop			; (mov r8, r8)
    15f4:	00003770 	.word	0x00003770
    15f8:	2000003c 	.word	0x2000003c
    15fc:	40000800 	.word	0x40000800
    1600:	007a1200 	.word	0x007a1200
    1604:	000019dd 	.word	0x000019dd
    1608:	02dc6c00 	.word	0x02dc6c00

0000160c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    160c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    160e:	4c0c      	ldr	r4, [pc, #48]	; (1640 <system_clock_source_osc8m_set_config+0x34>)
    1610:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1612:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1614:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1616:	7842      	ldrb	r2, [r0, #1]
    1618:	2001      	movs	r0, #1
    161a:	4002      	ands	r2, r0
    161c:	0192      	lsls	r2, r2, #6
    161e:	2640      	movs	r6, #64	; 0x40
    1620:	43b3      	bics	r3, r6
    1622:	4313      	orrs	r3, r2
    1624:	0002      	movs	r2, r0
    1626:	402a      	ands	r2, r5
    1628:	01d2      	lsls	r2, r2, #7
    162a:	307f      	adds	r0, #127	; 0x7f
    162c:	4383      	bics	r3, r0
    162e:	4313      	orrs	r3, r2
    1630:	2203      	movs	r2, #3
    1632:	400a      	ands	r2, r1
    1634:	0212      	lsls	r2, r2, #8
    1636:	4903      	ldr	r1, [pc, #12]	; (1644 <system_clock_source_osc8m_set_config+0x38>)
    1638:	400b      	ands	r3, r1
    163a:	4313      	orrs	r3, r2
    163c:	6223      	str	r3, [r4, #32]
}
    163e:	bd70      	pop	{r4, r5, r6, pc}
    1640:	40000800 	.word	0x40000800
    1644:	fffffcff 	.word	0xfffffcff

00001648 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1648:	2808      	cmp	r0, #8
    164a:	d803      	bhi.n	1654 <system_clock_source_enable+0xc>
    164c:	0080      	lsls	r0, r0, #2
    164e:	4b25      	ldr	r3, [pc, #148]	; (16e4 <system_clock_source_enable+0x9c>)
    1650:	581b      	ldr	r3, [r3, r0]
    1652:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1654:	2017      	movs	r0, #23
    1656:	e044      	b.n	16e2 <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1658:	4a23      	ldr	r2, [pc, #140]	; (16e8 <system_clock_source_enable+0xa0>)
    165a:	6a11      	ldr	r1, [r2, #32]
    165c:	2302      	movs	r3, #2
    165e:	430b      	orrs	r3, r1
    1660:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1662:	2000      	movs	r0, #0
    1664:	e03d      	b.n	16e2 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1666:	4a20      	ldr	r2, [pc, #128]	; (16e8 <system_clock_source_enable+0xa0>)
    1668:	6991      	ldr	r1, [r2, #24]
    166a:	2302      	movs	r3, #2
    166c:	430b      	orrs	r3, r1
    166e:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1670:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    1672:	e036      	b.n	16e2 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1674:	4a1c      	ldr	r2, [pc, #112]	; (16e8 <system_clock_source_enable+0xa0>)
    1676:	8a11      	ldrh	r1, [r2, #16]
    1678:	2302      	movs	r3, #2
    167a:	430b      	orrs	r3, r1
    167c:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    167e:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    1680:	e02f      	b.n	16e2 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1682:	4a19      	ldr	r2, [pc, #100]	; (16e8 <system_clock_source_enable+0xa0>)
    1684:	8a91      	ldrh	r1, [r2, #20]
    1686:	2302      	movs	r3, #2
    1688:	430b      	orrs	r3, r1
    168a:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    168c:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    168e:	e028      	b.n	16e2 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1690:	4916      	ldr	r1, [pc, #88]	; (16ec <system_clock_source_enable+0xa4>)
    1692:	680b      	ldr	r3, [r1, #0]
    1694:	2202      	movs	r2, #2
    1696:	4313      	orrs	r3, r2
    1698:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    169a:	4b13      	ldr	r3, [pc, #76]	; (16e8 <system_clock_source_enable+0xa0>)
    169c:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    169e:	0019      	movs	r1, r3
    16a0:	320e      	adds	r2, #14
    16a2:	68cb      	ldr	r3, [r1, #12]
    16a4:	421a      	tst	r2, r3
    16a6:	d0fc      	beq.n	16a2 <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    16a8:	4a10      	ldr	r2, [pc, #64]	; (16ec <system_clock_source_enable+0xa4>)
    16aa:	6891      	ldr	r1, [r2, #8]
    16ac:	4b0e      	ldr	r3, [pc, #56]	; (16e8 <system_clock_source_enable+0xa0>)
    16ae:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    16b0:	6852      	ldr	r2, [r2, #4]
    16b2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    16b4:	2200      	movs	r2, #0
    16b6:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    16b8:	0019      	movs	r1, r3
    16ba:	3210      	adds	r2, #16
    16bc:	68cb      	ldr	r3, [r1, #12]
    16be:	421a      	tst	r2, r3
    16c0:	d0fc      	beq.n	16bc <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    16c2:	4b0a      	ldr	r3, [pc, #40]	; (16ec <system_clock_source_enable+0xa4>)
    16c4:	681b      	ldr	r3, [r3, #0]
    16c6:	b29b      	uxth	r3, r3
    16c8:	4a07      	ldr	r2, [pc, #28]	; (16e8 <system_clock_source_enable+0xa0>)
    16ca:	8493      	strh	r3, [r2, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    16cc:	2000      	movs	r0, #0
    16ce:	e008      	b.n	16e2 <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    16d0:	4905      	ldr	r1, [pc, #20]	; (16e8 <system_clock_source_enable+0xa0>)
    16d2:	2244      	movs	r2, #68	; 0x44
    16d4:	5c88      	ldrb	r0, [r1, r2]
    16d6:	2302      	movs	r3, #2
    16d8:	4303      	orrs	r3, r0
    16da:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    16dc:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    16de:	e000      	b.n	16e2 <system_clock_source_enable+0x9a>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    16e0:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    16e2:	4770      	bx	lr
    16e4:	00003794 	.word	0x00003794
    16e8:	40000800 	.word	0x40000800
    16ec:	2000003c 	.word	0x2000003c

000016f0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    16f0:	b530      	push	{r4, r5, lr}
    16f2:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    16f4:	22c2      	movs	r2, #194	; 0xc2
    16f6:	00d2      	lsls	r2, r2, #3
    16f8:	4b1a      	ldr	r3, [pc, #104]	; (1764 <system_clock_init+0x74>)
    16fa:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    16fc:	4a1a      	ldr	r2, [pc, #104]	; (1768 <system_clock_init+0x78>)
    16fe:	6853      	ldr	r3, [r2, #4]
    1700:	211e      	movs	r1, #30
    1702:	438b      	bics	r3, r1
    1704:	6053      	str	r3, [r2, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1706:	2301      	movs	r3, #1
    1708:	466a      	mov	r2, sp
    170a:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    170c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    170e:	4d17      	ldr	r5, [pc, #92]	; (176c <system_clock_init+0x7c>)
    1710:	b2e0      	uxtb	r0, r4
    1712:	4669      	mov	r1, sp
    1714:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1716:	3401      	adds	r4, #1
    1718:	2c25      	cmp	r4, #37	; 0x25
    171a:	d1f9      	bne.n	1710 <system_clock_init+0x20>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    171c:	a803      	add	r0, sp, #12
    171e:	2400      	movs	r4, #0
    1720:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1722:	2501      	movs	r5, #1
    1724:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1726:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1728:	4b11      	ldr	r3, [pc, #68]	; (1770 <system_clock_init+0x80>)
    172a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    172c:	2006      	movs	r0, #6
    172e:	4b11      	ldr	r3, [pc, #68]	; (1774 <system_clock_init+0x84>)
    1730:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1732:	4b11      	ldr	r3, [pc, #68]	; (1778 <system_clock_init+0x88>)
    1734:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    1736:	4b11      	ldr	r3, [pc, #68]	; (177c <system_clock_init+0x8c>)
    1738:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    173a:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    173c:	729c      	strb	r4, [r3, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    173e:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1740:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1742:	466b      	mov	r3, sp
    1744:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1746:	2306      	movs	r3, #6
    1748:	466a      	mov	r2, sp
    174a:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    174c:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    174e:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1750:	4669      	mov	r1, sp
    1752:	2000      	movs	r0, #0
    1754:	4b0a      	ldr	r3, [pc, #40]	; (1780 <system_clock_init+0x90>)
    1756:	4798      	blx	r3
    1758:	2000      	movs	r0, #0
    175a:	4b0a      	ldr	r3, [pc, #40]	; (1784 <system_clock_init+0x94>)
    175c:	4798      	blx	r3
#endif
}
    175e:	b005      	add	sp, #20
    1760:	bd30      	pop	{r4, r5, pc}
    1762:	46c0      	nop			; (mov r8, r8)
    1764:	40000800 	.word	0x40000800
    1768:	41004000 	.word	0x41004000
    176c:	000019c1 	.word	0x000019c1
    1770:	0000160d 	.word	0x0000160d
    1774:	00001649 	.word	0x00001649
    1778:	00001789 	.word	0x00001789
    177c:	40000400 	.word	0x40000400
    1780:	000017ad 	.word	0x000017ad
    1784:	00001865 	.word	0x00001865

00001788 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1788:	4a06      	ldr	r2, [pc, #24]	; (17a4 <system_gclk_init+0x1c>)
    178a:	6991      	ldr	r1, [r2, #24]
    178c:	2308      	movs	r3, #8
    178e:	430b      	orrs	r3, r1
    1790:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1792:	2201      	movs	r2, #1
    1794:	4b04      	ldr	r3, [pc, #16]	; (17a8 <system_gclk_init+0x20>)
    1796:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1798:	0019      	movs	r1, r3
    179a:	780b      	ldrb	r3, [r1, #0]
    179c:	4213      	tst	r3, r2
    179e:	d1fc      	bne.n	179a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    17a0:	4770      	bx	lr
    17a2:	46c0      	nop			; (mov r8, r8)
    17a4:	40000400 	.word	0x40000400
    17a8:	40000c00 	.word	0x40000c00

000017ac <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    17ac:	b570      	push	{r4, r5, r6, lr}
    17ae:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    17b0:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    17b2:	780c      	ldrb	r4, [r1, #0]
    17b4:	0224      	lsls	r4, r4, #8
    17b6:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    17b8:	784b      	ldrb	r3, [r1, #1]
    17ba:	2b00      	cmp	r3, #0
    17bc:	d002      	beq.n	17c4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    17be:	2380      	movs	r3, #128	; 0x80
    17c0:	02db      	lsls	r3, r3, #11
    17c2:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    17c4:	7a4b      	ldrb	r3, [r1, #9]
    17c6:	2b00      	cmp	r3, #0
    17c8:	d002      	beq.n	17d0 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    17ca:	2380      	movs	r3, #128	; 0x80
    17cc:	031b      	lsls	r3, r3, #12
    17ce:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    17d0:	6848      	ldr	r0, [r1, #4]
    17d2:	2801      	cmp	r0, #1
    17d4:	d918      	bls.n	1808 <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    17d6:	1e43      	subs	r3, r0, #1
    17d8:	4218      	tst	r0, r3
    17da:	d110      	bne.n	17fe <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    17dc:	2802      	cmp	r0, #2
    17de:	d906      	bls.n	17ee <system_gclk_gen_set_config+0x42>
    17e0:	2302      	movs	r3, #2
    17e2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    17e4:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    17e6:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    17e8:	4298      	cmp	r0, r3
    17ea:	d8fb      	bhi.n	17e4 <system_gclk_gen_set_config+0x38>
    17ec:	e000      	b.n	17f0 <system_gclk_gen_set_config+0x44>
    17ee:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    17f0:	0212      	lsls	r2, r2, #8
    17f2:	4332      	orrs	r2, r6
    17f4:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    17f6:	2380      	movs	r3, #128	; 0x80
    17f8:	035b      	lsls	r3, r3, #13
    17fa:	431c      	orrs	r4, r3
    17fc:	e004      	b.n	1808 <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    17fe:	0205      	lsls	r5, r0, #8
    1800:	4335      	orrs	r5, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1802:	2380      	movs	r3, #128	; 0x80
    1804:	029b      	lsls	r3, r3, #10
    1806:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1808:	7a0b      	ldrb	r3, [r1, #8]
    180a:	2b00      	cmp	r3, #0
    180c:	d002      	beq.n	1814 <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    180e:	2380      	movs	r3, #128	; 0x80
    1810:	039b      	lsls	r3, r3, #14
    1812:	431c      	orrs	r4, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1814:	4a0f      	ldr	r2, [pc, #60]	; (1854 <system_gclk_gen_set_config+0xa8>)
    1816:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    1818:	b25b      	sxtb	r3, r3
    181a:	2b00      	cmp	r3, #0
    181c:	dbfb      	blt.n	1816 <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    181e:	4b0e      	ldr	r3, [pc, #56]	; (1858 <system_gclk_gen_set_config+0xac>)
    1820:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1822:	4b0e      	ldr	r3, [pc, #56]	; (185c <system_gclk_gen_set_config+0xb0>)
    1824:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1826:	4a0b      	ldr	r2, [pc, #44]	; (1854 <system_gclk_gen_set_config+0xa8>)
    1828:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    182a:	b25b      	sxtb	r3, r3
    182c:	2b00      	cmp	r3, #0
    182e:	dbfb      	blt.n	1828 <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1830:	4b08      	ldr	r3, [pc, #32]	; (1854 <system_gclk_gen_set_config+0xa8>)
    1832:	609d      	str	r5, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1834:	001a      	movs	r2, r3
    1836:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    1838:	b25b      	sxtb	r3, r3
    183a:	2b00      	cmp	r3, #0
    183c:	dbfb      	blt.n	1836 <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    183e:	4a05      	ldr	r2, [pc, #20]	; (1854 <system_gclk_gen_set_config+0xa8>)
    1840:	6851      	ldr	r1, [r2, #4]
    1842:	2380      	movs	r3, #128	; 0x80
    1844:	025b      	lsls	r3, r3, #9
    1846:	400b      	ands	r3, r1
    1848:	431c      	orrs	r4, r3
    184a:	6054      	str	r4, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    184c:	4b04      	ldr	r3, [pc, #16]	; (1860 <system_gclk_gen_set_config+0xb4>)
    184e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1850:	bd70      	pop	{r4, r5, r6, pc}
    1852:	46c0      	nop			; (mov r8, r8)
    1854:	40000c00 	.word	0x40000c00
    1858:	0000150d 	.word	0x0000150d
    185c:	40000c08 	.word	0x40000c08
    1860:	0000154d 	.word	0x0000154d

00001864 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1864:	b510      	push	{r4, lr}
    1866:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1868:	4a0b      	ldr	r2, [pc, #44]	; (1898 <system_gclk_gen_enable+0x34>)
    186a:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    186c:	b25b      	sxtb	r3, r3
    186e:	2b00      	cmp	r3, #0
    1870:	dbfb      	blt.n	186a <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1872:	4b0a      	ldr	r3, [pc, #40]	; (189c <system_gclk_gen_enable+0x38>)
    1874:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1876:	4b0a      	ldr	r3, [pc, #40]	; (18a0 <system_gclk_gen_enable+0x3c>)
    1878:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    187a:	4a07      	ldr	r2, [pc, #28]	; (1898 <system_gclk_gen_enable+0x34>)
    187c:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    187e:	b25b      	sxtb	r3, r3
    1880:	2b00      	cmp	r3, #0
    1882:	dbfb      	blt.n	187c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1884:	4a04      	ldr	r2, [pc, #16]	; (1898 <system_gclk_gen_enable+0x34>)
    1886:	6853      	ldr	r3, [r2, #4]
    1888:	2180      	movs	r1, #128	; 0x80
    188a:	0249      	lsls	r1, r1, #9
    188c:	430b      	orrs	r3, r1
    188e:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1890:	4b04      	ldr	r3, [pc, #16]	; (18a4 <system_gclk_gen_enable+0x40>)
    1892:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1894:	bd10      	pop	{r4, pc}
    1896:	46c0      	nop			; (mov r8, r8)
    1898:	40000c00 	.word	0x40000c00
    189c:	0000150d 	.word	0x0000150d
    18a0:	40000c04 	.word	0x40000c04
    18a4:	0000154d 	.word	0x0000154d

000018a8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    18a8:	b570      	push	{r4, r5, r6, lr}
    18aa:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18ac:	4a1a      	ldr	r2, [pc, #104]	; (1918 <system_gclk_gen_get_hz+0x70>)
    18ae:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    18b0:	b25b      	sxtb	r3, r3
    18b2:	2b00      	cmp	r3, #0
    18b4:	dbfb      	blt.n	18ae <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    18b6:	4b19      	ldr	r3, [pc, #100]	; (191c <system_gclk_gen_get_hz+0x74>)
    18b8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    18ba:	4b19      	ldr	r3, [pc, #100]	; (1920 <system_gclk_gen_get_hz+0x78>)
    18bc:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18be:	4a16      	ldr	r2, [pc, #88]	; (1918 <system_gclk_gen_get_hz+0x70>)
    18c0:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    18c2:	b25b      	sxtb	r3, r3
    18c4:	2b00      	cmp	r3, #0
    18c6:	dbfb      	blt.n	18c0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    18c8:	4e13      	ldr	r6, [pc, #76]	; (1918 <system_gclk_gen_get_hz+0x70>)
    18ca:	6870      	ldr	r0, [r6, #4]
    18cc:	04c0      	lsls	r0, r0, #19
    18ce:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    18d0:	4b14      	ldr	r3, [pc, #80]	; (1924 <system_gclk_gen_get_hz+0x7c>)
    18d2:	4798      	blx	r3
    18d4:	0005      	movs	r5, r0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    18d6:	4b12      	ldr	r3, [pc, #72]	; (1920 <system_gclk_gen_get_hz+0x78>)
    18d8:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    18da:	6876      	ldr	r6, [r6, #4]
    18dc:	02f6      	lsls	r6, r6, #11
    18de:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    18e0:	4b11      	ldr	r3, [pc, #68]	; (1928 <system_gclk_gen_get_hz+0x80>)
    18e2:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18e4:	4a0c      	ldr	r2, [pc, #48]	; (1918 <system_gclk_gen_get_hz+0x70>)
    18e6:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    18e8:	b25b      	sxtb	r3, r3
    18ea:	2b00      	cmp	r3, #0
    18ec:	dbfb      	blt.n	18e6 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    18ee:	4b0a      	ldr	r3, [pc, #40]	; (1918 <system_gclk_gen_get_hz+0x70>)
    18f0:	689c      	ldr	r4, [r3, #8]
    18f2:	0224      	lsls	r4, r4, #8
    18f4:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    18f6:	4b0d      	ldr	r3, [pc, #52]	; (192c <system_gclk_gen_get_hz+0x84>)
    18f8:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    18fa:	2e00      	cmp	r6, #0
    18fc:	d107      	bne.n	190e <system_gclk_gen_get_hz+0x66>
    18fe:	2c01      	cmp	r4, #1
    1900:	d907      	bls.n	1912 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1902:	0021      	movs	r1, r4
    1904:	0028      	movs	r0, r5
    1906:	4b0a      	ldr	r3, [pc, #40]	; (1930 <system_gclk_gen_get_hz+0x88>)
    1908:	4798      	blx	r3
    190a:	0005      	movs	r5, r0
    190c:	e001      	b.n	1912 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    190e:	3401      	adds	r4, #1
    1910:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1912:	0028      	movs	r0, r5
    1914:	bd70      	pop	{r4, r5, r6, pc}
    1916:	46c0      	nop			; (mov r8, r8)
    1918:	40000c00 	.word	0x40000c00
    191c:	0000150d 	.word	0x0000150d
    1920:	40000c04 	.word	0x40000c04
    1924:	0000157d 	.word	0x0000157d
    1928:	40000c08 	.word	0x40000c08
    192c:	0000154d 	.word	0x0000154d
    1930:	00001c49 	.word	0x00001c49

00001934 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1934:	b510      	push	{r4, lr}
    1936:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1938:	4b06      	ldr	r3, [pc, #24]	; (1954 <system_gclk_chan_enable+0x20>)
    193a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    193c:	4b06      	ldr	r3, [pc, #24]	; (1958 <system_gclk_chan_enable+0x24>)
    193e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1940:	4a06      	ldr	r2, [pc, #24]	; (195c <system_gclk_chan_enable+0x28>)
    1942:	8851      	ldrh	r1, [r2, #2]
    1944:	2380      	movs	r3, #128	; 0x80
    1946:	01db      	lsls	r3, r3, #7
    1948:	430b      	orrs	r3, r1
    194a:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    194c:	4b04      	ldr	r3, [pc, #16]	; (1960 <system_gclk_chan_enable+0x2c>)
    194e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1950:	bd10      	pop	{r4, pc}
    1952:	46c0      	nop			; (mov r8, r8)
    1954:	0000150d 	.word	0x0000150d
    1958:	40000c02 	.word	0x40000c02
    195c:	40000c00 	.word	0x40000c00
    1960:	0000154d 	.word	0x0000154d

00001964 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1964:	b510      	push	{r4, lr}
    1966:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1968:	4b0f      	ldr	r3, [pc, #60]	; (19a8 <system_gclk_chan_disable+0x44>)
    196a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    196c:	4b0f      	ldr	r3, [pc, #60]	; (19ac <system_gclk_chan_disable+0x48>)
    196e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1970:	4b0f      	ldr	r3, [pc, #60]	; (19b0 <system_gclk_chan_disable+0x4c>)
    1972:	885a      	ldrh	r2, [r3, #2]
    1974:	0512      	lsls	r2, r2, #20
    1976:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1978:	8859      	ldrh	r1, [r3, #2]
    197a:	4a0e      	ldr	r2, [pc, #56]	; (19b4 <system_gclk_chan_disable+0x50>)
    197c:	400a      	ands	r2, r1
    197e:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1980:	8859      	ldrh	r1, [r3, #2]
    1982:	4a0d      	ldr	r2, [pc, #52]	; (19b8 <system_gclk_chan_disable+0x54>)
    1984:	400a      	ands	r2, r1
    1986:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1988:	0019      	movs	r1, r3
    198a:	2280      	movs	r2, #128	; 0x80
    198c:	01d2      	lsls	r2, r2, #7
    198e:	884b      	ldrh	r3, [r1, #2]
    1990:	4213      	tst	r3, r2
    1992:	d1fc      	bne.n	198e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1994:	4906      	ldr	r1, [pc, #24]	; (19b0 <system_gclk_chan_disable+0x4c>)
    1996:	884c      	ldrh	r4, [r1, #2]
    1998:	0202      	lsls	r2, r0, #8
    199a:	4b06      	ldr	r3, [pc, #24]	; (19b4 <system_gclk_chan_disable+0x50>)
    199c:	4023      	ands	r3, r4
    199e:	4313      	orrs	r3, r2
    19a0:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    19a2:	4b06      	ldr	r3, [pc, #24]	; (19bc <system_gclk_chan_disable+0x58>)
    19a4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    19a6:	bd10      	pop	{r4, pc}
    19a8:	0000150d 	.word	0x0000150d
    19ac:	40000c02 	.word	0x40000c02
    19b0:	40000c00 	.word	0x40000c00
    19b4:	fffff0ff 	.word	0xfffff0ff
    19b8:	ffffbfff 	.word	0xffffbfff
    19bc:	0000154d 	.word	0x0000154d

000019c0 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    19c0:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    19c2:	780c      	ldrb	r4, [r1, #0]
    19c4:	0224      	lsls	r4, r4, #8
    19c6:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    19c8:	4b02      	ldr	r3, [pc, #8]	; (19d4 <system_gclk_chan_set_config+0x14>)
    19ca:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    19cc:	b2a4      	uxth	r4, r4
    19ce:	4b02      	ldr	r3, [pc, #8]	; (19d8 <system_gclk_chan_set_config+0x18>)
    19d0:	805c      	strh	r4, [r3, #2]
}
    19d2:	bd10      	pop	{r4, pc}
    19d4:	00001965 	.word	0x00001965
    19d8:	40000c00 	.word	0x40000c00

000019dc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    19dc:	b510      	push	{r4, lr}
    19de:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    19e0:	4b06      	ldr	r3, [pc, #24]	; (19fc <system_gclk_chan_get_hz+0x20>)
    19e2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    19e4:	4b06      	ldr	r3, [pc, #24]	; (1a00 <system_gclk_chan_get_hz+0x24>)
    19e6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    19e8:	4b06      	ldr	r3, [pc, #24]	; (1a04 <system_gclk_chan_get_hz+0x28>)
    19ea:	885c      	ldrh	r4, [r3, #2]
    19ec:	0524      	lsls	r4, r4, #20
    19ee:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    19f0:	4b05      	ldr	r3, [pc, #20]	; (1a08 <system_gclk_chan_get_hz+0x2c>)
    19f2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    19f4:	0020      	movs	r0, r4
    19f6:	4b05      	ldr	r3, [pc, #20]	; (1a0c <system_gclk_chan_get_hz+0x30>)
    19f8:	4798      	blx	r3
}
    19fa:	bd10      	pop	{r4, pc}
    19fc:	0000150d 	.word	0x0000150d
    1a00:	40000c02 	.word	0x40000c02
    1a04:	40000c00 	.word	0x40000c00
    1a08:	0000154d 	.word	0x0000154d
    1a0c:	000018a9 	.word	0x000018a9

00001a10 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1a10:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1a12:	78d3      	ldrb	r3, [r2, #3]
    1a14:	2b00      	cmp	r3, #0
    1a16:	d11e      	bne.n	1a56 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1a18:	7813      	ldrb	r3, [r2, #0]
    1a1a:	2b80      	cmp	r3, #128	; 0x80
    1a1c:	d004      	beq.n	1a28 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1a1e:	061b      	lsls	r3, r3, #24
    1a20:	2480      	movs	r4, #128	; 0x80
    1a22:	0264      	lsls	r4, r4, #9
    1a24:	4323      	orrs	r3, r4
    1a26:	e000      	b.n	1a2a <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1a28:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1a2a:	7854      	ldrb	r4, [r2, #1]
    1a2c:	2502      	movs	r5, #2
    1a2e:	43ac      	bics	r4, r5
    1a30:	d10a      	bne.n	1a48 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1a32:	7894      	ldrb	r4, [r2, #2]
    1a34:	2c00      	cmp	r4, #0
    1a36:	d103      	bne.n	1a40 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1a38:	2480      	movs	r4, #128	; 0x80
    1a3a:	02a4      	lsls	r4, r4, #10
    1a3c:	4323      	orrs	r3, r4
    1a3e:	e002      	b.n	1a46 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1a40:	24c0      	movs	r4, #192	; 0xc0
    1a42:	02e4      	lsls	r4, r4, #11
    1a44:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1a46:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1a48:	7854      	ldrb	r4, [r2, #1]
    1a4a:	3c01      	subs	r4, #1
    1a4c:	2c01      	cmp	r4, #1
    1a4e:	d812      	bhi.n	1a76 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1a50:	4c18      	ldr	r4, [pc, #96]	; (1ab4 <_system_pinmux_config+0xa4>)
    1a52:	4023      	ands	r3, r4
    1a54:	e00f      	b.n	1a76 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1a56:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1a58:	040b      	lsls	r3, r1, #16
    1a5a:	0c1b      	lsrs	r3, r3, #16
    1a5c:	24a0      	movs	r4, #160	; 0xa0
    1a5e:	05e4      	lsls	r4, r4, #23
    1a60:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a62:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1a64:	0c0b      	lsrs	r3, r1, #16
    1a66:	24d0      	movs	r4, #208	; 0xd0
    1a68:	0624      	lsls	r4, r4, #24
    1a6a:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a6c:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1a6e:	78d3      	ldrb	r3, [r2, #3]
    1a70:	2b00      	cmp	r3, #0
    1a72:	d018      	beq.n	1aa6 <_system_pinmux_config+0x96>
    1a74:	e01c      	b.n	1ab0 <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1a76:	040c      	lsls	r4, r1, #16
    1a78:	0c24      	lsrs	r4, r4, #16
    1a7a:	25a0      	movs	r5, #160	; 0xa0
    1a7c:	05ed      	lsls	r5, r5, #23
    1a7e:	432c      	orrs	r4, r5
    1a80:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a82:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1a84:	0c0c      	lsrs	r4, r1, #16
    1a86:	25d0      	movs	r5, #208	; 0xd0
    1a88:	062d      	lsls	r5, r5, #24
    1a8a:	432c      	orrs	r4, r5
    1a8c:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a8e:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1a90:	78d4      	ldrb	r4, [r2, #3]
    1a92:	2c00      	cmp	r4, #0
    1a94:	d10c      	bne.n	1ab0 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1a96:	035b      	lsls	r3, r3, #13
    1a98:	d505      	bpl.n	1aa6 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1a9a:	7893      	ldrb	r3, [r2, #2]
    1a9c:	2b01      	cmp	r3, #1
    1a9e:	d101      	bne.n	1aa4 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    1aa0:	6181      	str	r1, [r0, #24]
    1aa2:	e000      	b.n	1aa6 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    1aa4:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1aa6:	7853      	ldrb	r3, [r2, #1]
    1aa8:	3b01      	subs	r3, #1
    1aaa:	2b01      	cmp	r3, #1
    1aac:	d800      	bhi.n	1ab0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1aae:	6081      	str	r1, [r0, #8]
		}
	}
}
    1ab0:	bd30      	pop	{r4, r5, pc}
    1ab2:	46c0      	nop			; (mov r8, r8)
    1ab4:	fffbffff 	.word	0xfffbffff

00001ab8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1ab8:	b510      	push	{r4, lr}
    1aba:	0003      	movs	r3, r0
    1abc:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1abe:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1ac0:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1ac2:	2900      	cmp	r1, #0
    1ac4:	d104      	bne.n	1ad0 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    1ac6:	0958      	lsrs	r0, r3, #5
    1ac8:	01c0      	lsls	r0, r0, #7
    1aca:	4905      	ldr	r1, [pc, #20]	; (1ae0 <system_pinmux_pin_set_config+0x28>)
    1acc:	468c      	mov	ip, r1
    1ace:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
    1ad0:	211f      	movs	r1, #31
    1ad2:	400b      	ands	r3, r1
    1ad4:	391e      	subs	r1, #30
    1ad6:	4099      	lsls	r1, r3
    1ad8:	4b02      	ldr	r3, [pc, #8]	; (1ae4 <system_pinmux_pin_set_config+0x2c>)
    1ada:	4798      	blx	r3
}
    1adc:	bd10      	pop	{r4, pc}
    1ade:	46c0      	nop			; (mov r8, r8)
    1ae0:	41004400 	.word	0x41004400
    1ae4:	00001a11 	.word	0x00001a11

00001ae8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1ae8:	4770      	bx	lr
    1aea:	46c0      	nop			; (mov r8, r8)

00001aec <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1aec:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1aee:	4b05      	ldr	r3, [pc, #20]	; (1b04 <system_init+0x18>)
    1af0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1af2:	4b05      	ldr	r3, [pc, #20]	; (1b08 <system_init+0x1c>)
    1af4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1af6:	4b05      	ldr	r3, [pc, #20]	; (1b0c <system_init+0x20>)
    1af8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1afa:	4b05      	ldr	r3, [pc, #20]	; (1b10 <system_init+0x24>)
    1afc:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1afe:	4b05      	ldr	r3, [pc, #20]	; (1b14 <system_init+0x28>)
    1b00:	4798      	blx	r3
}
    1b02:	bd10      	pop	{r4, pc}
    1b04:	000016f1 	.word	0x000016f1
    1b08:	000014d5 	.word	0x000014d5
    1b0c:	00001ae9 	.word	0x00001ae9
    1b10:	00001ae9 	.word	0x00001ae9
    1b14:	00001ae9 	.word	0x00001ae9

00001b18 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1b18:	e7fe      	b.n	1b18 <Dummy_Handler>
    1b1a:	46c0      	nop			; (mov r8, r8)

00001b1c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1b1c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1b1e:	4b2e      	ldr	r3, [pc, #184]	; (1bd8 <Reset_Handler+0xbc>)
    1b20:	4a2e      	ldr	r2, [pc, #184]	; (1bdc <Reset_Handler+0xc0>)
    1b22:	429a      	cmp	r2, r3
    1b24:	d003      	beq.n	1b2e <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    1b26:	4b2e      	ldr	r3, [pc, #184]	; (1be0 <Reset_Handler+0xc4>)
    1b28:	4a2b      	ldr	r2, [pc, #172]	; (1bd8 <Reset_Handler+0xbc>)
    1b2a:	429a      	cmp	r2, r3
    1b2c:	d304      	bcc.n	1b38 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1b2e:	4b2d      	ldr	r3, [pc, #180]	; (1be4 <Reset_Handler+0xc8>)
    1b30:	4a2d      	ldr	r2, [pc, #180]	; (1be8 <Reset_Handler+0xcc>)
    1b32:	429a      	cmp	r2, r3
    1b34:	d310      	bcc.n	1b58 <Reset_Handler+0x3c>
    1b36:	e01e      	b.n	1b76 <Reset_Handler+0x5a>
    1b38:	4a2c      	ldr	r2, [pc, #176]	; (1bec <Reset_Handler+0xd0>)
    1b3a:	4b29      	ldr	r3, [pc, #164]	; (1be0 <Reset_Handler+0xc4>)
    1b3c:	3303      	adds	r3, #3
    1b3e:	1a9b      	subs	r3, r3, r2
    1b40:	089b      	lsrs	r3, r3, #2
    1b42:	3301      	adds	r3, #1
    1b44:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1b46:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1b48:	4823      	ldr	r0, [pc, #140]	; (1bd8 <Reset_Handler+0xbc>)
    1b4a:	4924      	ldr	r1, [pc, #144]	; (1bdc <Reset_Handler+0xc0>)
    1b4c:	588c      	ldr	r4, [r1, r2]
    1b4e:	5084      	str	r4, [r0, r2]
    1b50:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1b52:	429a      	cmp	r2, r3
    1b54:	d1fa      	bne.n	1b4c <Reset_Handler+0x30>
    1b56:	e7ea      	b.n	1b2e <Reset_Handler+0x12>
    1b58:	4a25      	ldr	r2, [pc, #148]	; (1bf0 <Reset_Handler+0xd4>)
    1b5a:	4b22      	ldr	r3, [pc, #136]	; (1be4 <Reset_Handler+0xc8>)
    1b5c:	3303      	adds	r3, #3
    1b5e:	1a9b      	subs	r3, r3, r2
    1b60:	089b      	lsrs	r3, r3, #2
    1b62:	3301      	adds	r3, #1
    1b64:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1b66:	2200      	movs	r2, #0
                *pDest++ = 0;
    1b68:	481f      	ldr	r0, [pc, #124]	; (1be8 <Reset_Handler+0xcc>)
    1b6a:	2100      	movs	r1, #0
    1b6c:	1814      	adds	r4, r2, r0
    1b6e:	6021      	str	r1, [r4, #0]
    1b70:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1b72:	429a      	cmp	r2, r3
    1b74:	d1fa      	bne.n	1b6c <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1b76:	4a1f      	ldr	r2, [pc, #124]	; (1bf4 <Reset_Handler+0xd8>)
    1b78:	21ff      	movs	r1, #255	; 0xff
    1b7a:	4b1f      	ldr	r3, [pc, #124]	; (1bf8 <Reset_Handler+0xdc>)
    1b7c:	438b      	bics	r3, r1
    1b7e:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1b80:	39fd      	subs	r1, #253	; 0xfd
    1b82:	2390      	movs	r3, #144	; 0x90
    1b84:	005b      	lsls	r3, r3, #1
    1b86:	4a1d      	ldr	r2, [pc, #116]	; (1bfc <Reset_Handler+0xe0>)
    1b88:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1b8a:	481d      	ldr	r0, [pc, #116]	; (1c00 <Reset_Handler+0xe4>)
    1b8c:	78c3      	ldrb	r3, [r0, #3]
    1b8e:	2403      	movs	r4, #3
    1b90:	43a3      	bics	r3, r4
    1b92:	2202      	movs	r2, #2
    1b94:	4313      	orrs	r3, r2
    1b96:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1b98:	78c3      	ldrb	r3, [r0, #3]
    1b9a:	260c      	movs	r6, #12
    1b9c:	43b3      	bics	r3, r6
    1b9e:	2108      	movs	r1, #8
    1ba0:	430b      	orrs	r3, r1
    1ba2:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    1ba4:	4b17      	ldr	r3, [pc, #92]	; (1c04 <Reset_Handler+0xe8>)
    1ba6:	7b98      	ldrb	r0, [r3, #14]
    1ba8:	2530      	movs	r5, #48	; 0x30
    1baa:	43a8      	bics	r0, r5
    1bac:	0005      	movs	r5, r0
    1bae:	2020      	movs	r0, #32
    1bb0:	4328      	orrs	r0, r5
    1bb2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1bb4:	7b98      	ldrb	r0, [r3, #14]
    1bb6:	43b0      	bics	r0, r6
    1bb8:	4301      	orrs	r1, r0
    1bba:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1bbc:	7b99      	ldrb	r1, [r3, #14]
    1bbe:	43a1      	bics	r1, r4
    1bc0:	430a      	orrs	r2, r1
    1bc2:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    1bc4:	4a10      	ldr	r2, [pc, #64]	; (1c08 <Reset_Handler+0xec>)
    1bc6:	6851      	ldr	r1, [r2, #4]
    1bc8:	2380      	movs	r3, #128	; 0x80
    1bca:	430b      	orrs	r3, r1
    1bcc:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    1bce:	4b0f      	ldr	r3, [pc, #60]	; (1c0c <Reset_Handler+0xf0>)
    1bd0:	4798      	blx	r3

        /* Branch to main function */
        main();
    1bd2:	4b0f      	ldr	r3, [pc, #60]	; (1c10 <Reset_Handler+0xf4>)
    1bd4:	4798      	blx	r3
    1bd6:	e7fe      	b.n	1bd6 <Reset_Handler+0xba>
    1bd8:	20000000 	.word	0x20000000
    1bdc:	00003858 	.word	0x00003858
    1be0:	20000004 	.word	0x20000004
    1be4:	200000d0 	.word	0x200000d0
    1be8:	20000004 	.word	0x20000004
    1bec:	20000004 	.word	0x20000004
    1bf0:	20000008 	.word	0x20000008
    1bf4:	e000ed00 	.word	0xe000ed00
    1bf8:	00000000 	.word	0x00000000
    1bfc:	41007000 	.word	0x41007000
    1c00:	41005000 	.word	0x41005000
    1c04:	41004800 	.word	0x41004800
    1c08:	41004000 	.word	0x41004000
    1c0c:	000036f1 	.word	0x000036f1
    1c10:	00001c15 	.word	0x00001c15

00001c14 <main>:

//=============================================================================
//! \brief Main Function.
//=============================================================================
int main (void)
{
    1c14:	b510      	push	{r4, lr}
	system_init();
    1c16:	4b07      	ldr	r3, [pc, #28]	; (1c34 <main+0x20>)
    1c18:	4798      	blx	r3

	/* Insert application code here, after the board has been initialized. */
    
    //! [setup_init]
    configure_usart();
    1c1a:	4b07      	ldr	r3, [pc, #28]	; (1c38 <main+0x24>)
    1c1c:	4798      	blx	r3
    configure_usart_callbacks();
    1c1e:	4b07      	ldr	r3, [pc, #28]	; (1c3c <main+0x28>)
    1c20:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    1c22:	2201      	movs	r2, #1
    1c24:	4b06      	ldr	r3, [pc, #24]	; (1c40 <main+0x2c>)
    1c26:	701a      	strb	r2, [r3, #0]
    1c28:	f3bf 8f5f 	dmb	sy
    1c2c:	b662      	cpsie	i
    //uint8_t string[] = "Hello World!\r\n";
    //usart_write_buffer_wait(&usart_instance, string, sizeof(string));
    //! [main_send_string]
    
    /* Configure device and enable. */
    configure_gas_gauge();
    1c2e:	4b05      	ldr	r3, [pc, #20]	; (1c44 <main+0x30>)
    1c30:	4798      	blx	r3
    1c32:	e7fe      	b.n	1c32 <main+0x1e>
    1c34:	00001aed 	.word	0x00001aed
    1c38:	0000022d 	.word	0x0000022d
    1c3c:	00000349 	.word	0x00000349
    1c40:	20000000 	.word	0x20000000
    1c44:	00000115 	.word	0x00000115

00001c48 <__aeabi_uidiv>:
    1c48:	2200      	movs	r2, #0
    1c4a:	0843      	lsrs	r3, r0, #1
    1c4c:	428b      	cmp	r3, r1
    1c4e:	d374      	bcc.n	1d3a <__aeabi_uidiv+0xf2>
    1c50:	0903      	lsrs	r3, r0, #4
    1c52:	428b      	cmp	r3, r1
    1c54:	d35f      	bcc.n	1d16 <__aeabi_uidiv+0xce>
    1c56:	0a03      	lsrs	r3, r0, #8
    1c58:	428b      	cmp	r3, r1
    1c5a:	d344      	bcc.n	1ce6 <__aeabi_uidiv+0x9e>
    1c5c:	0b03      	lsrs	r3, r0, #12
    1c5e:	428b      	cmp	r3, r1
    1c60:	d328      	bcc.n	1cb4 <__aeabi_uidiv+0x6c>
    1c62:	0c03      	lsrs	r3, r0, #16
    1c64:	428b      	cmp	r3, r1
    1c66:	d30d      	bcc.n	1c84 <__aeabi_uidiv+0x3c>
    1c68:	22ff      	movs	r2, #255	; 0xff
    1c6a:	0209      	lsls	r1, r1, #8
    1c6c:	ba12      	rev	r2, r2
    1c6e:	0c03      	lsrs	r3, r0, #16
    1c70:	428b      	cmp	r3, r1
    1c72:	d302      	bcc.n	1c7a <__aeabi_uidiv+0x32>
    1c74:	1212      	asrs	r2, r2, #8
    1c76:	0209      	lsls	r1, r1, #8
    1c78:	d065      	beq.n	1d46 <__aeabi_uidiv+0xfe>
    1c7a:	0b03      	lsrs	r3, r0, #12
    1c7c:	428b      	cmp	r3, r1
    1c7e:	d319      	bcc.n	1cb4 <__aeabi_uidiv+0x6c>
    1c80:	e000      	b.n	1c84 <__aeabi_uidiv+0x3c>
    1c82:	0a09      	lsrs	r1, r1, #8
    1c84:	0bc3      	lsrs	r3, r0, #15
    1c86:	428b      	cmp	r3, r1
    1c88:	d301      	bcc.n	1c8e <__aeabi_uidiv+0x46>
    1c8a:	03cb      	lsls	r3, r1, #15
    1c8c:	1ac0      	subs	r0, r0, r3
    1c8e:	4152      	adcs	r2, r2
    1c90:	0b83      	lsrs	r3, r0, #14
    1c92:	428b      	cmp	r3, r1
    1c94:	d301      	bcc.n	1c9a <__aeabi_uidiv+0x52>
    1c96:	038b      	lsls	r3, r1, #14
    1c98:	1ac0      	subs	r0, r0, r3
    1c9a:	4152      	adcs	r2, r2
    1c9c:	0b43      	lsrs	r3, r0, #13
    1c9e:	428b      	cmp	r3, r1
    1ca0:	d301      	bcc.n	1ca6 <__aeabi_uidiv+0x5e>
    1ca2:	034b      	lsls	r3, r1, #13
    1ca4:	1ac0      	subs	r0, r0, r3
    1ca6:	4152      	adcs	r2, r2
    1ca8:	0b03      	lsrs	r3, r0, #12
    1caa:	428b      	cmp	r3, r1
    1cac:	d301      	bcc.n	1cb2 <__aeabi_uidiv+0x6a>
    1cae:	030b      	lsls	r3, r1, #12
    1cb0:	1ac0      	subs	r0, r0, r3
    1cb2:	4152      	adcs	r2, r2
    1cb4:	0ac3      	lsrs	r3, r0, #11
    1cb6:	428b      	cmp	r3, r1
    1cb8:	d301      	bcc.n	1cbe <__aeabi_uidiv+0x76>
    1cba:	02cb      	lsls	r3, r1, #11
    1cbc:	1ac0      	subs	r0, r0, r3
    1cbe:	4152      	adcs	r2, r2
    1cc0:	0a83      	lsrs	r3, r0, #10
    1cc2:	428b      	cmp	r3, r1
    1cc4:	d301      	bcc.n	1cca <__aeabi_uidiv+0x82>
    1cc6:	028b      	lsls	r3, r1, #10
    1cc8:	1ac0      	subs	r0, r0, r3
    1cca:	4152      	adcs	r2, r2
    1ccc:	0a43      	lsrs	r3, r0, #9
    1cce:	428b      	cmp	r3, r1
    1cd0:	d301      	bcc.n	1cd6 <__aeabi_uidiv+0x8e>
    1cd2:	024b      	lsls	r3, r1, #9
    1cd4:	1ac0      	subs	r0, r0, r3
    1cd6:	4152      	adcs	r2, r2
    1cd8:	0a03      	lsrs	r3, r0, #8
    1cda:	428b      	cmp	r3, r1
    1cdc:	d301      	bcc.n	1ce2 <__aeabi_uidiv+0x9a>
    1cde:	020b      	lsls	r3, r1, #8
    1ce0:	1ac0      	subs	r0, r0, r3
    1ce2:	4152      	adcs	r2, r2
    1ce4:	d2cd      	bcs.n	1c82 <__aeabi_uidiv+0x3a>
    1ce6:	09c3      	lsrs	r3, r0, #7
    1ce8:	428b      	cmp	r3, r1
    1cea:	d301      	bcc.n	1cf0 <__aeabi_uidiv+0xa8>
    1cec:	01cb      	lsls	r3, r1, #7
    1cee:	1ac0      	subs	r0, r0, r3
    1cf0:	4152      	adcs	r2, r2
    1cf2:	0983      	lsrs	r3, r0, #6
    1cf4:	428b      	cmp	r3, r1
    1cf6:	d301      	bcc.n	1cfc <__aeabi_uidiv+0xb4>
    1cf8:	018b      	lsls	r3, r1, #6
    1cfa:	1ac0      	subs	r0, r0, r3
    1cfc:	4152      	adcs	r2, r2
    1cfe:	0943      	lsrs	r3, r0, #5
    1d00:	428b      	cmp	r3, r1
    1d02:	d301      	bcc.n	1d08 <__aeabi_uidiv+0xc0>
    1d04:	014b      	lsls	r3, r1, #5
    1d06:	1ac0      	subs	r0, r0, r3
    1d08:	4152      	adcs	r2, r2
    1d0a:	0903      	lsrs	r3, r0, #4
    1d0c:	428b      	cmp	r3, r1
    1d0e:	d301      	bcc.n	1d14 <__aeabi_uidiv+0xcc>
    1d10:	010b      	lsls	r3, r1, #4
    1d12:	1ac0      	subs	r0, r0, r3
    1d14:	4152      	adcs	r2, r2
    1d16:	08c3      	lsrs	r3, r0, #3
    1d18:	428b      	cmp	r3, r1
    1d1a:	d301      	bcc.n	1d20 <__aeabi_uidiv+0xd8>
    1d1c:	00cb      	lsls	r3, r1, #3
    1d1e:	1ac0      	subs	r0, r0, r3
    1d20:	4152      	adcs	r2, r2
    1d22:	0883      	lsrs	r3, r0, #2
    1d24:	428b      	cmp	r3, r1
    1d26:	d301      	bcc.n	1d2c <__aeabi_uidiv+0xe4>
    1d28:	008b      	lsls	r3, r1, #2
    1d2a:	1ac0      	subs	r0, r0, r3
    1d2c:	4152      	adcs	r2, r2
    1d2e:	0843      	lsrs	r3, r0, #1
    1d30:	428b      	cmp	r3, r1
    1d32:	d301      	bcc.n	1d38 <__aeabi_uidiv+0xf0>
    1d34:	004b      	lsls	r3, r1, #1
    1d36:	1ac0      	subs	r0, r0, r3
    1d38:	4152      	adcs	r2, r2
    1d3a:	1a41      	subs	r1, r0, r1
    1d3c:	d200      	bcs.n	1d40 <__aeabi_uidiv+0xf8>
    1d3e:	4601      	mov	r1, r0
    1d40:	4152      	adcs	r2, r2
    1d42:	4610      	mov	r0, r2
    1d44:	4770      	bx	lr
    1d46:	e7ff      	b.n	1d48 <__aeabi_uidiv+0x100>
    1d48:	b501      	push	{r0, lr}
    1d4a:	2000      	movs	r0, #0
    1d4c:	f000 f806 	bl	1d5c <__aeabi_idiv0>
    1d50:	bd02      	pop	{r1, pc}
    1d52:	46c0      	nop			; (mov r8, r8)

00001d54 <__aeabi_uidivmod>:
    1d54:	2900      	cmp	r1, #0
    1d56:	d0f7      	beq.n	1d48 <__aeabi_uidiv+0x100>
    1d58:	e776      	b.n	1c48 <__aeabi_uidiv>
    1d5a:	4770      	bx	lr

00001d5c <__aeabi_idiv0>:
    1d5c:	4770      	bx	lr
    1d5e:	46c0      	nop			; (mov r8, r8)

00001d60 <__aeabi_lmul>:
    1d60:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d62:	464f      	mov	r7, r9
    1d64:	4646      	mov	r6, r8
    1d66:	b4c0      	push	{r6, r7}
    1d68:	0416      	lsls	r6, r2, #16
    1d6a:	0c36      	lsrs	r6, r6, #16
    1d6c:	4699      	mov	r9, r3
    1d6e:	0033      	movs	r3, r6
    1d70:	0405      	lsls	r5, r0, #16
    1d72:	0c2c      	lsrs	r4, r5, #16
    1d74:	0c07      	lsrs	r7, r0, #16
    1d76:	0c15      	lsrs	r5, r2, #16
    1d78:	4363      	muls	r3, r4
    1d7a:	437e      	muls	r6, r7
    1d7c:	436f      	muls	r7, r5
    1d7e:	4365      	muls	r5, r4
    1d80:	0c1c      	lsrs	r4, r3, #16
    1d82:	19ad      	adds	r5, r5, r6
    1d84:	1964      	adds	r4, r4, r5
    1d86:	469c      	mov	ip, r3
    1d88:	42a6      	cmp	r6, r4
    1d8a:	d903      	bls.n	1d94 <__aeabi_lmul+0x34>
    1d8c:	2380      	movs	r3, #128	; 0x80
    1d8e:	025b      	lsls	r3, r3, #9
    1d90:	4698      	mov	r8, r3
    1d92:	4447      	add	r7, r8
    1d94:	4663      	mov	r3, ip
    1d96:	0c25      	lsrs	r5, r4, #16
    1d98:	19ef      	adds	r7, r5, r7
    1d9a:	041d      	lsls	r5, r3, #16
    1d9c:	464b      	mov	r3, r9
    1d9e:	434a      	muls	r2, r1
    1da0:	4343      	muls	r3, r0
    1da2:	0c2d      	lsrs	r5, r5, #16
    1da4:	0424      	lsls	r4, r4, #16
    1da6:	1964      	adds	r4, r4, r5
    1da8:	1899      	adds	r1, r3, r2
    1daa:	19c9      	adds	r1, r1, r7
    1dac:	0020      	movs	r0, r4
    1dae:	bc0c      	pop	{r2, r3}
    1db0:	4690      	mov	r8, r2
    1db2:	4699      	mov	r9, r3
    1db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1db6:	46c0      	nop			; (mov r8, r8)

00001db8 <__aeabi_dadd>:
    1db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1dba:	4656      	mov	r6, sl
    1dbc:	465f      	mov	r7, fp
    1dbe:	464d      	mov	r5, r9
    1dc0:	4644      	mov	r4, r8
    1dc2:	b4f0      	push	{r4, r5, r6, r7}
    1dc4:	000f      	movs	r7, r1
    1dc6:	0ffd      	lsrs	r5, r7, #31
    1dc8:	46aa      	mov	sl, r5
    1dca:	0309      	lsls	r1, r1, #12
    1dcc:	007c      	lsls	r4, r7, #1
    1dce:	002e      	movs	r6, r5
    1dd0:	005f      	lsls	r7, r3, #1
    1dd2:	0f45      	lsrs	r5, r0, #29
    1dd4:	0a49      	lsrs	r1, r1, #9
    1dd6:	0d7f      	lsrs	r7, r7, #21
    1dd8:	4329      	orrs	r1, r5
    1dda:	00c5      	lsls	r5, r0, #3
    1ddc:	0318      	lsls	r0, r3, #12
    1dde:	46bc      	mov	ip, r7
    1de0:	0a40      	lsrs	r0, r0, #9
    1de2:	0f57      	lsrs	r7, r2, #29
    1de4:	0d64      	lsrs	r4, r4, #21
    1de6:	0fdb      	lsrs	r3, r3, #31
    1de8:	4338      	orrs	r0, r7
    1dea:	00d2      	lsls	r2, r2, #3
    1dec:	459a      	cmp	sl, r3
    1dee:	d100      	bne.n	1df2 <__aeabi_dadd+0x3a>
    1df0:	e0aa      	b.n	1f48 <__aeabi_dadd+0x190>
    1df2:	4666      	mov	r6, ip
    1df4:	1ba6      	subs	r6, r4, r6
    1df6:	2e00      	cmp	r6, #0
    1df8:	dc00      	bgt.n	1dfc <__aeabi_dadd+0x44>
    1dfa:	e0ff      	b.n	1ffc <__aeabi_dadd+0x244>
    1dfc:	4663      	mov	r3, ip
    1dfe:	2b00      	cmp	r3, #0
    1e00:	d139      	bne.n	1e76 <__aeabi_dadd+0xbe>
    1e02:	0003      	movs	r3, r0
    1e04:	4313      	orrs	r3, r2
    1e06:	d000      	beq.n	1e0a <__aeabi_dadd+0x52>
    1e08:	e0d9      	b.n	1fbe <__aeabi_dadd+0x206>
    1e0a:	076b      	lsls	r3, r5, #29
    1e0c:	d009      	beq.n	1e22 <__aeabi_dadd+0x6a>
    1e0e:	230f      	movs	r3, #15
    1e10:	402b      	ands	r3, r5
    1e12:	2b04      	cmp	r3, #4
    1e14:	d005      	beq.n	1e22 <__aeabi_dadd+0x6a>
    1e16:	1d2b      	adds	r3, r5, #4
    1e18:	42ab      	cmp	r3, r5
    1e1a:	41ad      	sbcs	r5, r5
    1e1c:	426d      	negs	r5, r5
    1e1e:	1949      	adds	r1, r1, r5
    1e20:	001d      	movs	r5, r3
    1e22:	020b      	lsls	r3, r1, #8
    1e24:	d400      	bmi.n	1e28 <__aeabi_dadd+0x70>
    1e26:	e082      	b.n	1f2e <__aeabi_dadd+0x176>
    1e28:	4bca      	ldr	r3, [pc, #808]	; (2154 <STACK_SIZE+0x154>)
    1e2a:	3401      	adds	r4, #1
    1e2c:	429c      	cmp	r4, r3
    1e2e:	d100      	bne.n	1e32 <__aeabi_dadd+0x7a>
    1e30:	e0fe      	b.n	2030 <STACK_SIZE+0x30>
    1e32:	000a      	movs	r2, r1
    1e34:	4656      	mov	r6, sl
    1e36:	4bc8      	ldr	r3, [pc, #800]	; (2158 <STACK_SIZE+0x158>)
    1e38:	08ed      	lsrs	r5, r5, #3
    1e3a:	401a      	ands	r2, r3
    1e3c:	0750      	lsls	r0, r2, #29
    1e3e:	0564      	lsls	r4, r4, #21
    1e40:	0252      	lsls	r2, r2, #9
    1e42:	4305      	orrs	r5, r0
    1e44:	0b12      	lsrs	r2, r2, #12
    1e46:	0d64      	lsrs	r4, r4, #21
    1e48:	2100      	movs	r1, #0
    1e4a:	0312      	lsls	r2, r2, #12
    1e4c:	0d0b      	lsrs	r3, r1, #20
    1e4e:	051b      	lsls	r3, r3, #20
    1e50:	0564      	lsls	r4, r4, #21
    1e52:	0b12      	lsrs	r2, r2, #12
    1e54:	431a      	orrs	r2, r3
    1e56:	0863      	lsrs	r3, r4, #1
    1e58:	4cc0      	ldr	r4, [pc, #768]	; (215c <STACK_SIZE+0x15c>)
    1e5a:	07f6      	lsls	r6, r6, #31
    1e5c:	4014      	ands	r4, r2
    1e5e:	431c      	orrs	r4, r3
    1e60:	0064      	lsls	r4, r4, #1
    1e62:	0864      	lsrs	r4, r4, #1
    1e64:	4334      	orrs	r4, r6
    1e66:	0028      	movs	r0, r5
    1e68:	0021      	movs	r1, r4
    1e6a:	bc3c      	pop	{r2, r3, r4, r5}
    1e6c:	4690      	mov	r8, r2
    1e6e:	4699      	mov	r9, r3
    1e70:	46a2      	mov	sl, r4
    1e72:	46ab      	mov	fp, r5
    1e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e76:	4bb7      	ldr	r3, [pc, #732]	; (2154 <STACK_SIZE+0x154>)
    1e78:	429c      	cmp	r4, r3
    1e7a:	d0c6      	beq.n	1e0a <__aeabi_dadd+0x52>
    1e7c:	2380      	movs	r3, #128	; 0x80
    1e7e:	041b      	lsls	r3, r3, #16
    1e80:	4318      	orrs	r0, r3
    1e82:	2e38      	cmp	r6, #56	; 0x38
    1e84:	dd00      	ble.n	1e88 <__aeabi_dadd+0xd0>
    1e86:	e0eb      	b.n	2060 <STACK_SIZE+0x60>
    1e88:	2e1f      	cmp	r6, #31
    1e8a:	dd00      	ble.n	1e8e <__aeabi_dadd+0xd6>
    1e8c:	e11e      	b.n	20cc <STACK_SIZE+0xcc>
    1e8e:	2320      	movs	r3, #32
    1e90:	1b9b      	subs	r3, r3, r6
    1e92:	469c      	mov	ip, r3
    1e94:	0003      	movs	r3, r0
    1e96:	4667      	mov	r7, ip
    1e98:	40bb      	lsls	r3, r7
    1e9a:	4698      	mov	r8, r3
    1e9c:	0013      	movs	r3, r2
    1e9e:	4647      	mov	r7, r8
    1ea0:	40f3      	lsrs	r3, r6
    1ea2:	433b      	orrs	r3, r7
    1ea4:	4667      	mov	r7, ip
    1ea6:	40ba      	lsls	r2, r7
    1ea8:	1e57      	subs	r7, r2, #1
    1eaa:	41ba      	sbcs	r2, r7
    1eac:	4313      	orrs	r3, r2
    1eae:	0002      	movs	r2, r0
    1eb0:	40f2      	lsrs	r2, r6
    1eb2:	1aeb      	subs	r3, r5, r3
    1eb4:	429d      	cmp	r5, r3
    1eb6:	41b6      	sbcs	r6, r6
    1eb8:	001d      	movs	r5, r3
    1eba:	1a8a      	subs	r2, r1, r2
    1ebc:	4276      	negs	r6, r6
    1ebe:	1b91      	subs	r1, r2, r6
    1ec0:	020b      	lsls	r3, r1, #8
    1ec2:	d531      	bpl.n	1f28 <__aeabi_dadd+0x170>
    1ec4:	024a      	lsls	r2, r1, #9
    1ec6:	0a56      	lsrs	r6, r2, #9
    1ec8:	2e00      	cmp	r6, #0
    1eca:	d100      	bne.n	1ece <__aeabi_dadd+0x116>
    1ecc:	e0b4      	b.n	2038 <STACK_SIZE+0x38>
    1ece:	0030      	movs	r0, r6
    1ed0:	f001 fbf0 	bl	36b4 <__clzsi2>
    1ed4:	0003      	movs	r3, r0
    1ed6:	3b08      	subs	r3, #8
    1ed8:	2b1f      	cmp	r3, #31
    1eda:	dd00      	ble.n	1ede <__aeabi_dadd+0x126>
    1edc:	e0b5      	b.n	204a <STACK_SIZE+0x4a>
    1ede:	2220      	movs	r2, #32
    1ee0:	0029      	movs	r1, r5
    1ee2:	1ad2      	subs	r2, r2, r3
    1ee4:	40d1      	lsrs	r1, r2
    1ee6:	409e      	lsls	r6, r3
    1ee8:	000a      	movs	r2, r1
    1eea:	409d      	lsls	r5, r3
    1eec:	4332      	orrs	r2, r6
    1eee:	429c      	cmp	r4, r3
    1ef0:	dd00      	ble.n	1ef4 <__aeabi_dadd+0x13c>
    1ef2:	e0b1      	b.n	2058 <STACK_SIZE+0x58>
    1ef4:	1b1c      	subs	r4, r3, r4
    1ef6:	1c63      	adds	r3, r4, #1
    1ef8:	2b1f      	cmp	r3, #31
    1efa:	dd00      	ble.n	1efe <__aeabi_dadd+0x146>
    1efc:	e0d5      	b.n	20aa <STACK_SIZE+0xaa>
    1efe:	2120      	movs	r1, #32
    1f00:	0014      	movs	r4, r2
    1f02:	0028      	movs	r0, r5
    1f04:	1ac9      	subs	r1, r1, r3
    1f06:	408c      	lsls	r4, r1
    1f08:	40d8      	lsrs	r0, r3
    1f0a:	408d      	lsls	r5, r1
    1f0c:	4304      	orrs	r4, r0
    1f0e:	40da      	lsrs	r2, r3
    1f10:	1e68      	subs	r0, r5, #1
    1f12:	4185      	sbcs	r5, r0
    1f14:	0011      	movs	r1, r2
    1f16:	4325      	orrs	r5, r4
    1f18:	2400      	movs	r4, #0
    1f1a:	e776      	b.n	1e0a <__aeabi_dadd+0x52>
    1f1c:	4641      	mov	r1, r8
    1f1e:	4331      	orrs	r1, r6
    1f20:	d100      	bne.n	1f24 <__aeabi_dadd+0x16c>
    1f22:	e234      	b.n	238e <STACK_SIZE+0x38e>
    1f24:	0031      	movs	r1, r6
    1f26:	4645      	mov	r5, r8
    1f28:	076b      	lsls	r3, r5, #29
    1f2a:	d000      	beq.n	1f2e <__aeabi_dadd+0x176>
    1f2c:	e76f      	b.n	1e0e <__aeabi_dadd+0x56>
    1f2e:	4656      	mov	r6, sl
    1f30:	0748      	lsls	r0, r1, #29
    1f32:	08ed      	lsrs	r5, r5, #3
    1f34:	08c9      	lsrs	r1, r1, #3
    1f36:	4305      	orrs	r5, r0
    1f38:	4b86      	ldr	r3, [pc, #536]	; (2154 <STACK_SIZE+0x154>)
    1f3a:	429c      	cmp	r4, r3
    1f3c:	d035      	beq.n	1faa <__aeabi_dadd+0x1f2>
    1f3e:	030a      	lsls	r2, r1, #12
    1f40:	0564      	lsls	r4, r4, #21
    1f42:	0b12      	lsrs	r2, r2, #12
    1f44:	0d64      	lsrs	r4, r4, #21
    1f46:	e77f      	b.n	1e48 <__aeabi_dadd+0x90>
    1f48:	4663      	mov	r3, ip
    1f4a:	1ae3      	subs	r3, r4, r3
    1f4c:	469b      	mov	fp, r3
    1f4e:	2b00      	cmp	r3, #0
    1f50:	dc00      	bgt.n	1f54 <__aeabi_dadd+0x19c>
    1f52:	e08b      	b.n	206c <STACK_SIZE+0x6c>
    1f54:	4667      	mov	r7, ip
    1f56:	2f00      	cmp	r7, #0
    1f58:	d03c      	beq.n	1fd4 <__aeabi_dadd+0x21c>
    1f5a:	4f7e      	ldr	r7, [pc, #504]	; (2154 <STACK_SIZE+0x154>)
    1f5c:	42bc      	cmp	r4, r7
    1f5e:	d100      	bne.n	1f62 <__aeabi_dadd+0x1aa>
    1f60:	e753      	b.n	1e0a <__aeabi_dadd+0x52>
    1f62:	2780      	movs	r7, #128	; 0x80
    1f64:	043f      	lsls	r7, r7, #16
    1f66:	4338      	orrs	r0, r7
    1f68:	465b      	mov	r3, fp
    1f6a:	2b38      	cmp	r3, #56	; 0x38
    1f6c:	dc00      	bgt.n	1f70 <__aeabi_dadd+0x1b8>
    1f6e:	e0f7      	b.n	2160 <STACK_SIZE+0x160>
    1f70:	4302      	orrs	r2, r0
    1f72:	1e50      	subs	r0, r2, #1
    1f74:	4182      	sbcs	r2, r0
    1f76:	2000      	movs	r0, #0
    1f78:	b2d2      	uxtb	r2, r2
    1f7a:	1953      	adds	r3, r2, r5
    1f7c:	1842      	adds	r2, r0, r1
    1f7e:	42ab      	cmp	r3, r5
    1f80:	4189      	sbcs	r1, r1
    1f82:	001d      	movs	r5, r3
    1f84:	4249      	negs	r1, r1
    1f86:	1889      	adds	r1, r1, r2
    1f88:	020b      	lsls	r3, r1, #8
    1f8a:	d5cd      	bpl.n	1f28 <__aeabi_dadd+0x170>
    1f8c:	4b71      	ldr	r3, [pc, #452]	; (2154 <STACK_SIZE+0x154>)
    1f8e:	3401      	adds	r4, #1
    1f90:	429c      	cmp	r4, r3
    1f92:	d100      	bne.n	1f96 <__aeabi_dadd+0x1de>
    1f94:	e13d      	b.n	2212 <STACK_SIZE+0x212>
    1f96:	2001      	movs	r0, #1
    1f98:	4a6f      	ldr	r2, [pc, #444]	; (2158 <STACK_SIZE+0x158>)
    1f9a:	086b      	lsrs	r3, r5, #1
    1f9c:	400a      	ands	r2, r1
    1f9e:	4028      	ands	r0, r5
    1fa0:	4318      	orrs	r0, r3
    1fa2:	07d5      	lsls	r5, r2, #31
    1fa4:	4305      	orrs	r5, r0
    1fa6:	0851      	lsrs	r1, r2, #1
    1fa8:	e72f      	b.n	1e0a <__aeabi_dadd+0x52>
    1faa:	002b      	movs	r3, r5
    1fac:	430b      	orrs	r3, r1
    1fae:	d100      	bne.n	1fb2 <__aeabi_dadd+0x1fa>
    1fb0:	e1cb      	b.n	234a <STACK_SIZE+0x34a>
    1fb2:	2380      	movs	r3, #128	; 0x80
    1fb4:	031b      	lsls	r3, r3, #12
    1fb6:	430b      	orrs	r3, r1
    1fb8:	031a      	lsls	r2, r3, #12
    1fba:	0b12      	lsrs	r2, r2, #12
    1fbc:	e744      	b.n	1e48 <__aeabi_dadd+0x90>
    1fbe:	3e01      	subs	r6, #1
    1fc0:	2e00      	cmp	r6, #0
    1fc2:	d16d      	bne.n	20a0 <STACK_SIZE+0xa0>
    1fc4:	1aae      	subs	r6, r5, r2
    1fc6:	42b5      	cmp	r5, r6
    1fc8:	419b      	sbcs	r3, r3
    1fca:	1a09      	subs	r1, r1, r0
    1fcc:	425b      	negs	r3, r3
    1fce:	1ac9      	subs	r1, r1, r3
    1fd0:	0035      	movs	r5, r6
    1fd2:	e775      	b.n	1ec0 <__aeabi_dadd+0x108>
    1fd4:	0007      	movs	r7, r0
    1fd6:	4317      	orrs	r7, r2
    1fd8:	d100      	bne.n	1fdc <__aeabi_dadd+0x224>
    1fda:	e716      	b.n	1e0a <__aeabi_dadd+0x52>
    1fdc:	2301      	movs	r3, #1
    1fde:	425b      	negs	r3, r3
    1fe0:	469c      	mov	ip, r3
    1fe2:	44e3      	add	fp, ip
    1fe4:	465b      	mov	r3, fp
    1fe6:	2b00      	cmp	r3, #0
    1fe8:	d000      	beq.n	1fec <__aeabi_dadd+0x234>
    1fea:	e0e0      	b.n	21ae <STACK_SIZE+0x1ae>
    1fec:	18aa      	adds	r2, r5, r2
    1fee:	42aa      	cmp	r2, r5
    1ff0:	419b      	sbcs	r3, r3
    1ff2:	1809      	adds	r1, r1, r0
    1ff4:	425b      	negs	r3, r3
    1ff6:	1859      	adds	r1, r3, r1
    1ff8:	0015      	movs	r5, r2
    1ffa:	e7c5      	b.n	1f88 <__aeabi_dadd+0x1d0>
    1ffc:	2e00      	cmp	r6, #0
    1ffe:	d175      	bne.n	20ec <STACK_SIZE+0xec>
    2000:	1c66      	adds	r6, r4, #1
    2002:	0576      	lsls	r6, r6, #21
    2004:	0d76      	lsrs	r6, r6, #21
    2006:	2e01      	cmp	r6, #1
    2008:	dc00      	bgt.n	200c <STACK_SIZE+0xc>
    200a:	e0f3      	b.n	21f4 <STACK_SIZE+0x1f4>
    200c:	1aae      	subs	r6, r5, r2
    200e:	46b0      	mov	r8, r6
    2010:	4545      	cmp	r5, r8
    2012:	41bf      	sbcs	r7, r7
    2014:	1a0e      	subs	r6, r1, r0
    2016:	427f      	negs	r7, r7
    2018:	1bf6      	subs	r6, r6, r7
    201a:	0237      	lsls	r7, r6, #8
    201c:	d400      	bmi.n	2020 <STACK_SIZE+0x20>
    201e:	e08f      	b.n	2140 <STACK_SIZE+0x140>
    2020:	1b55      	subs	r5, r2, r5
    2022:	42aa      	cmp	r2, r5
    2024:	41b6      	sbcs	r6, r6
    2026:	1a41      	subs	r1, r0, r1
    2028:	4276      	negs	r6, r6
    202a:	1b8e      	subs	r6, r1, r6
    202c:	469a      	mov	sl, r3
    202e:	e74b      	b.n	1ec8 <__aeabi_dadd+0x110>
    2030:	4656      	mov	r6, sl
    2032:	2200      	movs	r2, #0
    2034:	2500      	movs	r5, #0
    2036:	e707      	b.n	1e48 <__aeabi_dadd+0x90>
    2038:	0028      	movs	r0, r5
    203a:	f001 fb3b 	bl	36b4 <__clzsi2>
    203e:	3020      	adds	r0, #32
    2040:	0003      	movs	r3, r0
    2042:	3b08      	subs	r3, #8
    2044:	2b1f      	cmp	r3, #31
    2046:	dc00      	bgt.n	204a <STACK_SIZE+0x4a>
    2048:	e749      	b.n	1ede <__aeabi_dadd+0x126>
    204a:	002a      	movs	r2, r5
    204c:	3828      	subs	r0, #40	; 0x28
    204e:	4082      	lsls	r2, r0
    2050:	2500      	movs	r5, #0
    2052:	429c      	cmp	r4, r3
    2054:	dc00      	bgt.n	2058 <STACK_SIZE+0x58>
    2056:	e74d      	b.n	1ef4 <__aeabi_dadd+0x13c>
    2058:	493f      	ldr	r1, [pc, #252]	; (2158 <STACK_SIZE+0x158>)
    205a:	1ae4      	subs	r4, r4, r3
    205c:	4011      	ands	r1, r2
    205e:	e6d4      	b.n	1e0a <__aeabi_dadd+0x52>
    2060:	4302      	orrs	r2, r0
    2062:	1e50      	subs	r0, r2, #1
    2064:	4182      	sbcs	r2, r0
    2066:	b2d3      	uxtb	r3, r2
    2068:	2200      	movs	r2, #0
    206a:	e722      	b.n	1eb2 <__aeabi_dadd+0xfa>
    206c:	2b00      	cmp	r3, #0
    206e:	d000      	beq.n	2072 <STACK_SIZE+0x72>
    2070:	e0f3      	b.n	225a <STACK_SIZE+0x25a>
    2072:	1c63      	adds	r3, r4, #1
    2074:	469c      	mov	ip, r3
    2076:	055b      	lsls	r3, r3, #21
    2078:	0d5b      	lsrs	r3, r3, #21
    207a:	2b01      	cmp	r3, #1
    207c:	dc00      	bgt.n	2080 <STACK_SIZE+0x80>
    207e:	e09f      	b.n	21c0 <STACK_SIZE+0x1c0>
    2080:	4b34      	ldr	r3, [pc, #208]	; (2154 <STACK_SIZE+0x154>)
    2082:	459c      	cmp	ip, r3
    2084:	d100      	bne.n	2088 <STACK_SIZE+0x88>
    2086:	e0c3      	b.n	2210 <STACK_SIZE+0x210>
    2088:	18aa      	adds	r2, r5, r2
    208a:	1809      	adds	r1, r1, r0
    208c:	42aa      	cmp	r2, r5
    208e:	4180      	sbcs	r0, r0
    2090:	4240      	negs	r0, r0
    2092:	1841      	adds	r1, r0, r1
    2094:	07cd      	lsls	r5, r1, #31
    2096:	0852      	lsrs	r2, r2, #1
    2098:	4315      	orrs	r5, r2
    209a:	0849      	lsrs	r1, r1, #1
    209c:	4664      	mov	r4, ip
    209e:	e6b4      	b.n	1e0a <__aeabi_dadd+0x52>
    20a0:	4b2c      	ldr	r3, [pc, #176]	; (2154 <STACK_SIZE+0x154>)
    20a2:	429c      	cmp	r4, r3
    20a4:	d000      	beq.n	20a8 <STACK_SIZE+0xa8>
    20a6:	e6ec      	b.n	1e82 <__aeabi_dadd+0xca>
    20a8:	e6af      	b.n	1e0a <__aeabi_dadd+0x52>
    20aa:	0011      	movs	r1, r2
    20ac:	3c1f      	subs	r4, #31
    20ae:	40e1      	lsrs	r1, r4
    20b0:	000c      	movs	r4, r1
    20b2:	2b20      	cmp	r3, #32
    20b4:	d100      	bne.n	20b8 <STACK_SIZE+0xb8>
    20b6:	e07f      	b.n	21b8 <STACK_SIZE+0x1b8>
    20b8:	2140      	movs	r1, #64	; 0x40
    20ba:	1acb      	subs	r3, r1, r3
    20bc:	409a      	lsls	r2, r3
    20be:	4315      	orrs	r5, r2
    20c0:	1e6a      	subs	r2, r5, #1
    20c2:	4195      	sbcs	r5, r2
    20c4:	2100      	movs	r1, #0
    20c6:	4325      	orrs	r5, r4
    20c8:	2400      	movs	r4, #0
    20ca:	e72d      	b.n	1f28 <__aeabi_dadd+0x170>
    20cc:	0033      	movs	r3, r6
    20ce:	0007      	movs	r7, r0
    20d0:	3b20      	subs	r3, #32
    20d2:	40df      	lsrs	r7, r3
    20d4:	003b      	movs	r3, r7
    20d6:	2e20      	cmp	r6, #32
    20d8:	d070      	beq.n	21bc <STACK_SIZE+0x1bc>
    20da:	2740      	movs	r7, #64	; 0x40
    20dc:	1bbe      	subs	r6, r7, r6
    20de:	40b0      	lsls	r0, r6
    20e0:	4302      	orrs	r2, r0
    20e2:	1e50      	subs	r0, r2, #1
    20e4:	4182      	sbcs	r2, r0
    20e6:	4313      	orrs	r3, r2
    20e8:	2200      	movs	r2, #0
    20ea:	e6e2      	b.n	1eb2 <__aeabi_dadd+0xfa>
    20ec:	2c00      	cmp	r4, #0
    20ee:	d04f      	beq.n	2190 <STACK_SIZE+0x190>
    20f0:	4c18      	ldr	r4, [pc, #96]	; (2154 <STACK_SIZE+0x154>)
    20f2:	45a4      	cmp	ip, r4
    20f4:	d100      	bne.n	20f8 <STACK_SIZE+0xf8>
    20f6:	e0ab      	b.n	2250 <STACK_SIZE+0x250>
    20f8:	2480      	movs	r4, #128	; 0x80
    20fa:	0424      	lsls	r4, r4, #16
    20fc:	4276      	negs	r6, r6
    20fe:	4321      	orrs	r1, r4
    2100:	2e38      	cmp	r6, #56	; 0x38
    2102:	dd00      	ble.n	2106 <STACK_SIZE+0x106>
    2104:	e0df      	b.n	22c6 <STACK_SIZE+0x2c6>
    2106:	2e1f      	cmp	r6, #31
    2108:	dd00      	ble.n	210c <STACK_SIZE+0x10c>
    210a:	e143      	b.n	2394 <STACK_SIZE+0x394>
    210c:	2720      	movs	r7, #32
    210e:	1bbc      	subs	r4, r7, r6
    2110:	46a1      	mov	r9, r4
    2112:	000c      	movs	r4, r1
    2114:	464f      	mov	r7, r9
    2116:	40bc      	lsls	r4, r7
    2118:	46a0      	mov	r8, r4
    211a:	002c      	movs	r4, r5
    211c:	4647      	mov	r7, r8
    211e:	40f4      	lsrs	r4, r6
    2120:	433c      	orrs	r4, r7
    2122:	464f      	mov	r7, r9
    2124:	40bd      	lsls	r5, r7
    2126:	1e6f      	subs	r7, r5, #1
    2128:	41bd      	sbcs	r5, r7
    212a:	40f1      	lsrs	r1, r6
    212c:	432c      	orrs	r4, r5
    212e:	1b15      	subs	r5, r2, r4
    2130:	42aa      	cmp	r2, r5
    2132:	4192      	sbcs	r2, r2
    2134:	1a41      	subs	r1, r0, r1
    2136:	4252      	negs	r2, r2
    2138:	1a89      	subs	r1, r1, r2
    213a:	4664      	mov	r4, ip
    213c:	469a      	mov	sl, r3
    213e:	e6bf      	b.n	1ec0 <__aeabi_dadd+0x108>
    2140:	4641      	mov	r1, r8
    2142:	4645      	mov	r5, r8
    2144:	4331      	orrs	r1, r6
    2146:	d000      	beq.n	214a <STACK_SIZE+0x14a>
    2148:	e6be      	b.n	1ec8 <__aeabi_dadd+0x110>
    214a:	2600      	movs	r6, #0
    214c:	2400      	movs	r4, #0
    214e:	2500      	movs	r5, #0
    2150:	e6f2      	b.n	1f38 <__aeabi_dadd+0x180>
    2152:	46c0      	nop			; (mov r8, r8)
    2154:	000007ff 	.word	0x000007ff
    2158:	ff7fffff 	.word	0xff7fffff
    215c:	800fffff 	.word	0x800fffff
    2160:	2b1f      	cmp	r3, #31
    2162:	dc59      	bgt.n	2218 <STACK_SIZE+0x218>
    2164:	2720      	movs	r7, #32
    2166:	1aff      	subs	r7, r7, r3
    2168:	46bc      	mov	ip, r7
    216a:	0007      	movs	r7, r0
    216c:	4663      	mov	r3, ip
    216e:	409f      	lsls	r7, r3
    2170:	465b      	mov	r3, fp
    2172:	46b9      	mov	r9, r7
    2174:	0017      	movs	r7, r2
    2176:	40df      	lsrs	r7, r3
    2178:	46b8      	mov	r8, r7
    217a:	464f      	mov	r7, r9
    217c:	4643      	mov	r3, r8
    217e:	431f      	orrs	r7, r3
    2180:	4663      	mov	r3, ip
    2182:	409a      	lsls	r2, r3
    2184:	1e53      	subs	r3, r2, #1
    2186:	419a      	sbcs	r2, r3
    2188:	465b      	mov	r3, fp
    218a:	433a      	orrs	r2, r7
    218c:	40d8      	lsrs	r0, r3
    218e:	e6f4      	b.n	1f7a <__aeabi_dadd+0x1c2>
    2190:	000c      	movs	r4, r1
    2192:	432c      	orrs	r4, r5
    2194:	d05c      	beq.n	2250 <STACK_SIZE+0x250>
    2196:	43f6      	mvns	r6, r6
    2198:	2e00      	cmp	r6, #0
    219a:	d155      	bne.n	2248 <STACK_SIZE+0x248>
    219c:	1b55      	subs	r5, r2, r5
    219e:	42aa      	cmp	r2, r5
    21a0:	41a4      	sbcs	r4, r4
    21a2:	1a41      	subs	r1, r0, r1
    21a4:	4264      	negs	r4, r4
    21a6:	1b09      	subs	r1, r1, r4
    21a8:	469a      	mov	sl, r3
    21aa:	4664      	mov	r4, ip
    21ac:	e688      	b.n	1ec0 <__aeabi_dadd+0x108>
    21ae:	4f96      	ldr	r7, [pc, #600]	; (2408 <STACK_SIZE+0x408>)
    21b0:	42bc      	cmp	r4, r7
    21b2:	d000      	beq.n	21b6 <STACK_SIZE+0x1b6>
    21b4:	e6d8      	b.n	1f68 <__aeabi_dadd+0x1b0>
    21b6:	e628      	b.n	1e0a <__aeabi_dadd+0x52>
    21b8:	2200      	movs	r2, #0
    21ba:	e780      	b.n	20be <STACK_SIZE+0xbe>
    21bc:	2000      	movs	r0, #0
    21be:	e78f      	b.n	20e0 <STACK_SIZE+0xe0>
    21c0:	000b      	movs	r3, r1
    21c2:	432b      	orrs	r3, r5
    21c4:	2c00      	cmp	r4, #0
    21c6:	d000      	beq.n	21ca <STACK_SIZE+0x1ca>
    21c8:	e0c2      	b.n	2350 <STACK_SIZE+0x350>
    21ca:	2b00      	cmp	r3, #0
    21cc:	d100      	bne.n	21d0 <STACK_SIZE+0x1d0>
    21ce:	e101      	b.n	23d4 <STACK_SIZE+0x3d4>
    21d0:	0003      	movs	r3, r0
    21d2:	4313      	orrs	r3, r2
    21d4:	d100      	bne.n	21d8 <STACK_SIZE+0x1d8>
    21d6:	e618      	b.n	1e0a <__aeabi_dadd+0x52>
    21d8:	18ab      	adds	r3, r5, r2
    21da:	42ab      	cmp	r3, r5
    21dc:	41b6      	sbcs	r6, r6
    21de:	1809      	adds	r1, r1, r0
    21e0:	4276      	negs	r6, r6
    21e2:	1871      	adds	r1, r6, r1
    21e4:	020a      	lsls	r2, r1, #8
    21e6:	d400      	bmi.n	21ea <STACK_SIZE+0x1ea>
    21e8:	e109      	b.n	23fe <STACK_SIZE+0x3fe>
    21ea:	4a88      	ldr	r2, [pc, #544]	; (240c <STACK_SIZE+0x40c>)
    21ec:	001d      	movs	r5, r3
    21ee:	4011      	ands	r1, r2
    21f0:	4664      	mov	r4, ip
    21f2:	e60a      	b.n	1e0a <__aeabi_dadd+0x52>
    21f4:	2c00      	cmp	r4, #0
    21f6:	d15b      	bne.n	22b0 <STACK_SIZE+0x2b0>
    21f8:	000e      	movs	r6, r1
    21fa:	432e      	orrs	r6, r5
    21fc:	d000      	beq.n	2200 <STACK_SIZE+0x200>
    21fe:	e08a      	b.n	2316 <STACK_SIZE+0x316>
    2200:	0001      	movs	r1, r0
    2202:	4311      	orrs	r1, r2
    2204:	d100      	bne.n	2208 <STACK_SIZE+0x208>
    2206:	e0c2      	b.n	238e <STACK_SIZE+0x38e>
    2208:	0001      	movs	r1, r0
    220a:	0015      	movs	r5, r2
    220c:	469a      	mov	sl, r3
    220e:	e5fc      	b.n	1e0a <__aeabi_dadd+0x52>
    2210:	4664      	mov	r4, ip
    2212:	2100      	movs	r1, #0
    2214:	2500      	movs	r5, #0
    2216:	e68f      	b.n	1f38 <__aeabi_dadd+0x180>
    2218:	2320      	movs	r3, #32
    221a:	425b      	negs	r3, r3
    221c:	469c      	mov	ip, r3
    221e:	44dc      	add	ip, fp
    2220:	4663      	mov	r3, ip
    2222:	0007      	movs	r7, r0
    2224:	40df      	lsrs	r7, r3
    2226:	465b      	mov	r3, fp
    2228:	46bc      	mov	ip, r7
    222a:	2b20      	cmp	r3, #32
    222c:	d100      	bne.n	2230 <STACK_SIZE+0x230>
    222e:	e0ac      	b.n	238a <STACK_SIZE+0x38a>
    2230:	2340      	movs	r3, #64	; 0x40
    2232:	465f      	mov	r7, fp
    2234:	1bdb      	subs	r3, r3, r7
    2236:	4098      	lsls	r0, r3
    2238:	4302      	orrs	r2, r0
    223a:	1e50      	subs	r0, r2, #1
    223c:	4182      	sbcs	r2, r0
    223e:	4663      	mov	r3, ip
    2240:	4313      	orrs	r3, r2
    2242:	001a      	movs	r2, r3
    2244:	2000      	movs	r0, #0
    2246:	e698      	b.n	1f7a <__aeabi_dadd+0x1c2>
    2248:	4c6f      	ldr	r4, [pc, #444]	; (2408 <STACK_SIZE+0x408>)
    224a:	45a4      	cmp	ip, r4
    224c:	d000      	beq.n	2250 <STACK_SIZE+0x250>
    224e:	e757      	b.n	2100 <STACK_SIZE+0x100>
    2250:	0001      	movs	r1, r0
    2252:	0015      	movs	r5, r2
    2254:	4664      	mov	r4, ip
    2256:	469a      	mov	sl, r3
    2258:	e5d7      	b.n	1e0a <__aeabi_dadd+0x52>
    225a:	2c00      	cmp	r4, #0
    225c:	d139      	bne.n	22d2 <STACK_SIZE+0x2d2>
    225e:	000c      	movs	r4, r1
    2260:	432c      	orrs	r4, r5
    2262:	d06e      	beq.n	2342 <STACK_SIZE+0x342>
    2264:	43db      	mvns	r3, r3
    2266:	2b00      	cmp	r3, #0
    2268:	d01a      	beq.n	22a0 <STACK_SIZE+0x2a0>
    226a:	4c67      	ldr	r4, [pc, #412]	; (2408 <STACK_SIZE+0x408>)
    226c:	45a4      	cmp	ip, r4
    226e:	d068      	beq.n	2342 <STACK_SIZE+0x342>
    2270:	2b38      	cmp	r3, #56	; 0x38
    2272:	dd00      	ble.n	2276 <STACK_SIZE+0x276>
    2274:	e0a4      	b.n	23c0 <STACK_SIZE+0x3c0>
    2276:	2b1f      	cmp	r3, #31
    2278:	dd00      	ble.n	227c <STACK_SIZE+0x27c>
    227a:	e0ae      	b.n	23da <STACK_SIZE+0x3da>
    227c:	2420      	movs	r4, #32
    227e:	000f      	movs	r7, r1
    2280:	1ae4      	subs	r4, r4, r3
    2282:	40a7      	lsls	r7, r4
    2284:	46b9      	mov	r9, r7
    2286:	002f      	movs	r7, r5
    2288:	40df      	lsrs	r7, r3
    228a:	46b8      	mov	r8, r7
    228c:	46a3      	mov	fp, r4
    228e:	464f      	mov	r7, r9
    2290:	4644      	mov	r4, r8
    2292:	4327      	orrs	r7, r4
    2294:	465c      	mov	r4, fp
    2296:	40a5      	lsls	r5, r4
    2298:	1e6c      	subs	r4, r5, #1
    229a:	41a5      	sbcs	r5, r4
    229c:	40d9      	lsrs	r1, r3
    229e:	433d      	orrs	r5, r7
    22a0:	18ad      	adds	r5, r5, r2
    22a2:	4295      	cmp	r5, r2
    22a4:	419b      	sbcs	r3, r3
    22a6:	1809      	adds	r1, r1, r0
    22a8:	425b      	negs	r3, r3
    22aa:	1859      	adds	r1, r3, r1
    22ac:	4664      	mov	r4, ip
    22ae:	e66b      	b.n	1f88 <__aeabi_dadd+0x1d0>
    22b0:	000c      	movs	r4, r1
    22b2:	432c      	orrs	r4, r5
    22b4:	d115      	bne.n	22e2 <STACK_SIZE+0x2e2>
    22b6:	0001      	movs	r1, r0
    22b8:	4311      	orrs	r1, r2
    22ba:	d07b      	beq.n	23b4 <STACK_SIZE+0x3b4>
    22bc:	0001      	movs	r1, r0
    22be:	0015      	movs	r5, r2
    22c0:	469a      	mov	sl, r3
    22c2:	4c51      	ldr	r4, [pc, #324]	; (2408 <STACK_SIZE+0x408>)
    22c4:	e5a1      	b.n	1e0a <__aeabi_dadd+0x52>
    22c6:	430d      	orrs	r5, r1
    22c8:	1e69      	subs	r1, r5, #1
    22ca:	418d      	sbcs	r5, r1
    22cc:	2100      	movs	r1, #0
    22ce:	b2ec      	uxtb	r4, r5
    22d0:	e72d      	b.n	212e <STACK_SIZE+0x12e>
    22d2:	4c4d      	ldr	r4, [pc, #308]	; (2408 <STACK_SIZE+0x408>)
    22d4:	45a4      	cmp	ip, r4
    22d6:	d034      	beq.n	2342 <STACK_SIZE+0x342>
    22d8:	2480      	movs	r4, #128	; 0x80
    22da:	0424      	lsls	r4, r4, #16
    22dc:	425b      	negs	r3, r3
    22de:	4321      	orrs	r1, r4
    22e0:	e7c6      	b.n	2270 <STACK_SIZE+0x270>
    22e2:	0004      	movs	r4, r0
    22e4:	4314      	orrs	r4, r2
    22e6:	d04e      	beq.n	2386 <STACK_SIZE+0x386>
    22e8:	08ed      	lsrs	r5, r5, #3
    22ea:	074c      	lsls	r4, r1, #29
    22ec:	432c      	orrs	r4, r5
    22ee:	2580      	movs	r5, #128	; 0x80
    22f0:	08c9      	lsrs	r1, r1, #3
    22f2:	032d      	lsls	r5, r5, #12
    22f4:	4229      	tst	r1, r5
    22f6:	d008      	beq.n	230a <STACK_SIZE+0x30a>
    22f8:	08c6      	lsrs	r6, r0, #3
    22fa:	422e      	tst	r6, r5
    22fc:	d105      	bne.n	230a <STACK_SIZE+0x30a>
    22fe:	08d2      	lsrs	r2, r2, #3
    2300:	0741      	lsls	r1, r0, #29
    2302:	4311      	orrs	r1, r2
    2304:	000c      	movs	r4, r1
    2306:	469a      	mov	sl, r3
    2308:	0031      	movs	r1, r6
    230a:	0f62      	lsrs	r2, r4, #29
    230c:	00c9      	lsls	r1, r1, #3
    230e:	00e5      	lsls	r5, r4, #3
    2310:	4311      	orrs	r1, r2
    2312:	4c3d      	ldr	r4, [pc, #244]	; (2408 <STACK_SIZE+0x408>)
    2314:	e579      	b.n	1e0a <__aeabi_dadd+0x52>
    2316:	0006      	movs	r6, r0
    2318:	4316      	orrs	r6, r2
    231a:	d100      	bne.n	231e <STACK_SIZE+0x31e>
    231c:	e575      	b.n	1e0a <__aeabi_dadd+0x52>
    231e:	1aae      	subs	r6, r5, r2
    2320:	46b0      	mov	r8, r6
    2322:	4545      	cmp	r5, r8
    2324:	41bf      	sbcs	r7, r7
    2326:	1a0e      	subs	r6, r1, r0
    2328:	427f      	negs	r7, r7
    232a:	1bf6      	subs	r6, r6, r7
    232c:	0237      	lsls	r7, r6, #8
    232e:	d400      	bmi.n	2332 <STACK_SIZE+0x332>
    2330:	e5f4      	b.n	1f1c <__aeabi_dadd+0x164>
    2332:	1b55      	subs	r5, r2, r5
    2334:	42aa      	cmp	r2, r5
    2336:	41b6      	sbcs	r6, r6
    2338:	1a41      	subs	r1, r0, r1
    233a:	4276      	negs	r6, r6
    233c:	1b89      	subs	r1, r1, r6
    233e:	469a      	mov	sl, r3
    2340:	e563      	b.n	1e0a <__aeabi_dadd+0x52>
    2342:	0001      	movs	r1, r0
    2344:	0015      	movs	r5, r2
    2346:	4664      	mov	r4, ip
    2348:	e55f      	b.n	1e0a <__aeabi_dadd+0x52>
    234a:	2200      	movs	r2, #0
    234c:	2500      	movs	r5, #0
    234e:	e57b      	b.n	1e48 <__aeabi_dadd+0x90>
    2350:	2b00      	cmp	r3, #0
    2352:	d03b      	beq.n	23cc <STACK_SIZE+0x3cc>
    2354:	0003      	movs	r3, r0
    2356:	4313      	orrs	r3, r2
    2358:	d015      	beq.n	2386 <STACK_SIZE+0x386>
    235a:	08ed      	lsrs	r5, r5, #3
    235c:	074b      	lsls	r3, r1, #29
    235e:	432b      	orrs	r3, r5
    2360:	2580      	movs	r5, #128	; 0x80
    2362:	08c9      	lsrs	r1, r1, #3
    2364:	032d      	lsls	r5, r5, #12
    2366:	4229      	tst	r1, r5
    2368:	d007      	beq.n	237a <STACK_SIZE+0x37a>
    236a:	08c4      	lsrs	r4, r0, #3
    236c:	422c      	tst	r4, r5
    236e:	d104      	bne.n	237a <STACK_SIZE+0x37a>
    2370:	0741      	lsls	r1, r0, #29
    2372:	000b      	movs	r3, r1
    2374:	0021      	movs	r1, r4
    2376:	08d2      	lsrs	r2, r2, #3
    2378:	4313      	orrs	r3, r2
    237a:	00c9      	lsls	r1, r1, #3
    237c:	0f5a      	lsrs	r2, r3, #29
    237e:	4311      	orrs	r1, r2
    2380:	00dd      	lsls	r5, r3, #3
    2382:	4c21      	ldr	r4, [pc, #132]	; (2408 <STACK_SIZE+0x408>)
    2384:	e541      	b.n	1e0a <__aeabi_dadd+0x52>
    2386:	4c20      	ldr	r4, [pc, #128]	; (2408 <STACK_SIZE+0x408>)
    2388:	e53f      	b.n	1e0a <__aeabi_dadd+0x52>
    238a:	2000      	movs	r0, #0
    238c:	e754      	b.n	2238 <STACK_SIZE+0x238>
    238e:	2600      	movs	r6, #0
    2390:	2500      	movs	r5, #0
    2392:	e5d1      	b.n	1f38 <__aeabi_dadd+0x180>
    2394:	0034      	movs	r4, r6
    2396:	000f      	movs	r7, r1
    2398:	3c20      	subs	r4, #32
    239a:	40e7      	lsrs	r7, r4
    239c:	003c      	movs	r4, r7
    239e:	2e20      	cmp	r6, #32
    23a0:	d02b      	beq.n	23fa <STACK_SIZE+0x3fa>
    23a2:	2740      	movs	r7, #64	; 0x40
    23a4:	1bbe      	subs	r6, r7, r6
    23a6:	40b1      	lsls	r1, r6
    23a8:	430d      	orrs	r5, r1
    23aa:	1e69      	subs	r1, r5, #1
    23ac:	418d      	sbcs	r5, r1
    23ae:	2100      	movs	r1, #0
    23b0:	432c      	orrs	r4, r5
    23b2:	e6bc      	b.n	212e <STACK_SIZE+0x12e>
    23b4:	2180      	movs	r1, #128	; 0x80
    23b6:	2600      	movs	r6, #0
    23b8:	0309      	lsls	r1, r1, #12
    23ba:	4c13      	ldr	r4, [pc, #76]	; (2408 <STACK_SIZE+0x408>)
    23bc:	2500      	movs	r5, #0
    23be:	e5bb      	b.n	1f38 <__aeabi_dadd+0x180>
    23c0:	430d      	orrs	r5, r1
    23c2:	1e69      	subs	r1, r5, #1
    23c4:	418d      	sbcs	r5, r1
    23c6:	2100      	movs	r1, #0
    23c8:	b2ed      	uxtb	r5, r5
    23ca:	e769      	b.n	22a0 <STACK_SIZE+0x2a0>
    23cc:	0001      	movs	r1, r0
    23ce:	0015      	movs	r5, r2
    23d0:	4c0d      	ldr	r4, [pc, #52]	; (2408 <STACK_SIZE+0x408>)
    23d2:	e51a      	b.n	1e0a <__aeabi_dadd+0x52>
    23d4:	0001      	movs	r1, r0
    23d6:	0015      	movs	r5, r2
    23d8:	e517      	b.n	1e0a <__aeabi_dadd+0x52>
    23da:	001c      	movs	r4, r3
    23dc:	000f      	movs	r7, r1
    23de:	3c20      	subs	r4, #32
    23e0:	40e7      	lsrs	r7, r4
    23e2:	003c      	movs	r4, r7
    23e4:	2b20      	cmp	r3, #32
    23e6:	d00c      	beq.n	2402 <STACK_SIZE+0x402>
    23e8:	2740      	movs	r7, #64	; 0x40
    23ea:	1afb      	subs	r3, r7, r3
    23ec:	4099      	lsls	r1, r3
    23ee:	430d      	orrs	r5, r1
    23f0:	1e69      	subs	r1, r5, #1
    23f2:	418d      	sbcs	r5, r1
    23f4:	2100      	movs	r1, #0
    23f6:	4325      	orrs	r5, r4
    23f8:	e752      	b.n	22a0 <STACK_SIZE+0x2a0>
    23fa:	2100      	movs	r1, #0
    23fc:	e7d4      	b.n	23a8 <STACK_SIZE+0x3a8>
    23fe:	001d      	movs	r5, r3
    2400:	e592      	b.n	1f28 <__aeabi_dadd+0x170>
    2402:	2100      	movs	r1, #0
    2404:	e7f3      	b.n	23ee <STACK_SIZE+0x3ee>
    2406:	46c0      	nop			; (mov r8, r8)
    2408:	000007ff 	.word	0x000007ff
    240c:	ff7fffff 	.word	0xff7fffff

00002410 <__aeabi_ddiv>:
    2410:	b5f0      	push	{r4, r5, r6, r7, lr}
    2412:	4656      	mov	r6, sl
    2414:	464d      	mov	r5, r9
    2416:	4644      	mov	r4, r8
    2418:	465f      	mov	r7, fp
    241a:	b4f0      	push	{r4, r5, r6, r7}
    241c:	001d      	movs	r5, r3
    241e:	030e      	lsls	r6, r1, #12
    2420:	004c      	lsls	r4, r1, #1
    2422:	0fcb      	lsrs	r3, r1, #31
    2424:	b087      	sub	sp, #28
    2426:	0007      	movs	r7, r0
    2428:	4692      	mov	sl, r2
    242a:	4681      	mov	r9, r0
    242c:	0b36      	lsrs	r6, r6, #12
    242e:	0d64      	lsrs	r4, r4, #21
    2430:	4698      	mov	r8, r3
    2432:	d06a      	beq.n	250a <__aeabi_ddiv+0xfa>
    2434:	4b6d      	ldr	r3, [pc, #436]	; (25ec <__aeabi_ddiv+0x1dc>)
    2436:	429c      	cmp	r4, r3
    2438:	d035      	beq.n	24a6 <__aeabi_ddiv+0x96>
    243a:	2280      	movs	r2, #128	; 0x80
    243c:	0f43      	lsrs	r3, r0, #29
    243e:	0412      	lsls	r2, r2, #16
    2440:	4313      	orrs	r3, r2
    2442:	00f6      	lsls	r6, r6, #3
    2444:	431e      	orrs	r6, r3
    2446:	00c3      	lsls	r3, r0, #3
    2448:	4699      	mov	r9, r3
    244a:	4b69      	ldr	r3, [pc, #420]	; (25f0 <__aeabi_ddiv+0x1e0>)
    244c:	2700      	movs	r7, #0
    244e:	469c      	mov	ip, r3
    2450:	2300      	movs	r3, #0
    2452:	4464      	add	r4, ip
    2454:	9302      	str	r3, [sp, #8]
    2456:	032b      	lsls	r3, r5, #12
    2458:	0068      	lsls	r0, r5, #1
    245a:	0b1b      	lsrs	r3, r3, #12
    245c:	0fed      	lsrs	r5, r5, #31
    245e:	4651      	mov	r1, sl
    2460:	469b      	mov	fp, r3
    2462:	0d40      	lsrs	r0, r0, #21
    2464:	9500      	str	r5, [sp, #0]
    2466:	d100      	bne.n	246a <__aeabi_ddiv+0x5a>
    2468:	e078      	b.n	255c <__aeabi_ddiv+0x14c>
    246a:	4b60      	ldr	r3, [pc, #384]	; (25ec <__aeabi_ddiv+0x1dc>)
    246c:	4298      	cmp	r0, r3
    246e:	d06c      	beq.n	254a <__aeabi_ddiv+0x13a>
    2470:	465b      	mov	r3, fp
    2472:	00da      	lsls	r2, r3, #3
    2474:	0f4b      	lsrs	r3, r1, #29
    2476:	2180      	movs	r1, #128	; 0x80
    2478:	0409      	lsls	r1, r1, #16
    247a:	430b      	orrs	r3, r1
    247c:	4313      	orrs	r3, r2
    247e:	469b      	mov	fp, r3
    2480:	4653      	mov	r3, sl
    2482:	00d9      	lsls	r1, r3, #3
    2484:	4b5a      	ldr	r3, [pc, #360]	; (25f0 <__aeabi_ddiv+0x1e0>)
    2486:	469c      	mov	ip, r3
    2488:	2300      	movs	r3, #0
    248a:	4460      	add	r0, ip
    248c:	4642      	mov	r2, r8
    248e:	1a20      	subs	r0, r4, r0
    2490:	406a      	eors	r2, r5
    2492:	4692      	mov	sl, r2
    2494:	9001      	str	r0, [sp, #4]
    2496:	431f      	orrs	r7, r3
    2498:	2f0f      	cmp	r7, #15
    249a:	d900      	bls.n	249e <__aeabi_ddiv+0x8e>
    249c:	e0b0      	b.n	2600 <__aeabi_ddiv+0x1f0>
    249e:	4855      	ldr	r0, [pc, #340]	; (25f4 <__aeabi_ddiv+0x1e4>)
    24a0:	00bf      	lsls	r7, r7, #2
    24a2:	59c0      	ldr	r0, [r0, r7]
    24a4:	4687      	mov	pc, r0
    24a6:	4337      	orrs	r7, r6
    24a8:	d000      	beq.n	24ac <__aeabi_ddiv+0x9c>
    24aa:	e088      	b.n	25be <__aeabi_ddiv+0x1ae>
    24ac:	2300      	movs	r3, #0
    24ae:	4699      	mov	r9, r3
    24b0:	3302      	adds	r3, #2
    24b2:	2708      	movs	r7, #8
    24b4:	2600      	movs	r6, #0
    24b6:	9302      	str	r3, [sp, #8]
    24b8:	e7cd      	b.n	2456 <__aeabi_ddiv+0x46>
    24ba:	4643      	mov	r3, r8
    24bc:	46b3      	mov	fp, r6
    24be:	4649      	mov	r1, r9
    24c0:	9300      	str	r3, [sp, #0]
    24c2:	9b02      	ldr	r3, [sp, #8]
    24c4:	9a00      	ldr	r2, [sp, #0]
    24c6:	4692      	mov	sl, r2
    24c8:	2b02      	cmp	r3, #2
    24ca:	d000      	beq.n	24ce <__aeabi_ddiv+0xbe>
    24cc:	e1bf      	b.n	284e <__aeabi_ddiv+0x43e>
    24ce:	2100      	movs	r1, #0
    24d0:	4653      	mov	r3, sl
    24d2:	2201      	movs	r2, #1
    24d4:	2600      	movs	r6, #0
    24d6:	4689      	mov	r9, r1
    24d8:	401a      	ands	r2, r3
    24da:	4b44      	ldr	r3, [pc, #272]	; (25ec <__aeabi_ddiv+0x1dc>)
    24dc:	2100      	movs	r1, #0
    24de:	0336      	lsls	r6, r6, #12
    24e0:	0d0c      	lsrs	r4, r1, #20
    24e2:	0524      	lsls	r4, r4, #20
    24e4:	0b36      	lsrs	r6, r6, #12
    24e6:	4326      	orrs	r6, r4
    24e8:	4c43      	ldr	r4, [pc, #268]	; (25f8 <__aeabi_ddiv+0x1e8>)
    24ea:	051b      	lsls	r3, r3, #20
    24ec:	4026      	ands	r6, r4
    24ee:	431e      	orrs	r6, r3
    24f0:	0076      	lsls	r6, r6, #1
    24f2:	07d2      	lsls	r2, r2, #31
    24f4:	0876      	lsrs	r6, r6, #1
    24f6:	4316      	orrs	r6, r2
    24f8:	4648      	mov	r0, r9
    24fa:	0031      	movs	r1, r6
    24fc:	b007      	add	sp, #28
    24fe:	bc3c      	pop	{r2, r3, r4, r5}
    2500:	4690      	mov	r8, r2
    2502:	4699      	mov	r9, r3
    2504:	46a2      	mov	sl, r4
    2506:	46ab      	mov	fp, r5
    2508:	bdf0      	pop	{r4, r5, r6, r7, pc}
    250a:	0033      	movs	r3, r6
    250c:	4303      	orrs	r3, r0
    250e:	d04f      	beq.n	25b0 <__aeabi_ddiv+0x1a0>
    2510:	2e00      	cmp	r6, #0
    2512:	d100      	bne.n	2516 <__aeabi_ddiv+0x106>
    2514:	e1bc      	b.n	2890 <__aeabi_ddiv+0x480>
    2516:	0030      	movs	r0, r6
    2518:	f001 f8cc 	bl	36b4 <__clzsi2>
    251c:	0003      	movs	r3, r0
    251e:	3b0b      	subs	r3, #11
    2520:	2b1c      	cmp	r3, #28
    2522:	dd00      	ble.n	2526 <__aeabi_ddiv+0x116>
    2524:	e1ad      	b.n	2882 <__aeabi_ddiv+0x472>
    2526:	221d      	movs	r2, #29
    2528:	0001      	movs	r1, r0
    252a:	1ad3      	subs	r3, r2, r3
    252c:	3908      	subs	r1, #8
    252e:	003a      	movs	r2, r7
    2530:	408f      	lsls	r7, r1
    2532:	408e      	lsls	r6, r1
    2534:	40da      	lsrs	r2, r3
    2536:	46b9      	mov	r9, r7
    2538:	4316      	orrs	r6, r2
    253a:	4b30      	ldr	r3, [pc, #192]	; (25fc <__aeabi_ddiv+0x1ec>)
    253c:	2700      	movs	r7, #0
    253e:	469c      	mov	ip, r3
    2540:	2300      	movs	r3, #0
    2542:	4460      	add	r0, ip
    2544:	4244      	negs	r4, r0
    2546:	9302      	str	r3, [sp, #8]
    2548:	e785      	b.n	2456 <__aeabi_ddiv+0x46>
    254a:	4653      	mov	r3, sl
    254c:	465a      	mov	r2, fp
    254e:	4313      	orrs	r3, r2
    2550:	d12c      	bne.n	25ac <__aeabi_ddiv+0x19c>
    2552:	2300      	movs	r3, #0
    2554:	2100      	movs	r1, #0
    2556:	469b      	mov	fp, r3
    2558:	3302      	adds	r3, #2
    255a:	e797      	b.n	248c <__aeabi_ddiv+0x7c>
    255c:	430b      	orrs	r3, r1
    255e:	d020      	beq.n	25a2 <__aeabi_ddiv+0x192>
    2560:	465b      	mov	r3, fp
    2562:	2b00      	cmp	r3, #0
    2564:	d100      	bne.n	2568 <__aeabi_ddiv+0x158>
    2566:	e19e      	b.n	28a6 <__aeabi_ddiv+0x496>
    2568:	4658      	mov	r0, fp
    256a:	f001 f8a3 	bl	36b4 <__clzsi2>
    256e:	0003      	movs	r3, r0
    2570:	3b0b      	subs	r3, #11
    2572:	2b1c      	cmp	r3, #28
    2574:	dd00      	ble.n	2578 <__aeabi_ddiv+0x168>
    2576:	e18f      	b.n	2898 <__aeabi_ddiv+0x488>
    2578:	0002      	movs	r2, r0
    257a:	4659      	mov	r1, fp
    257c:	3a08      	subs	r2, #8
    257e:	4091      	lsls	r1, r2
    2580:	468b      	mov	fp, r1
    2582:	211d      	movs	r1, #29
    2584:	1acb      	subs	r3, r1, r3
    2586:	4651      	mov	r1, sl
    2588:	40d9      	lsrs	r1, r3
    258a:	000b      	movs	r3, r1
    258c:	4659      	mov	r1, fp
    258e:	430b      	orrs	r3, r1
    2590:	4651      	mov	r1, sl
    2592:	469b      	mov	fp, r3
    2594:	4091      	lsls	r1, r2
    2596:	4b19      	ldr	r3, [pc, #100]	; (25fc <__aeabi_ddiv+0x1ec>)
    2598:	469c      	mov	ip, r3
    259a:	4460      	add	r0, ip
    259c:	4240      	negs	r0, r0
    259e:	2300      	movs	r3, #0
    25a0:	e774      	b.n	248c <__aeabi_ddiv+0x7c>
    25a2:	2300      	movs	r3, #0
    25a4:	2100      	movs	r1, #0
    25a6:	469b      	mov	fp, r3
    25a8:	3301      	adds	r3, #1
    25aa:	e76f      	b.n	248c <__aeabi_ddiv+0x7c>
    25ac:	2303      	movs	r3, #3
    25ae:	e76d      	b.n	248c <__aeabi_ddiv+0x7c>
    25b0:	2300      	movs	r3, #0
    25b2:	4699      	mov	r9, r3
    25b4:	3301      	adds	r3, #1
    25b6:	2704      	movs	r7, #4
    25b8:	2600      	movs	r6, #0
    25ba:	9302      	str	r3, [sp, #8]
    25bc:	e74b      	b.n	2456 <__aeabi_ddiv+0x46>
    25be:	2303      	movs	r3, #3
    25c0:	270c      	movs	r7, #12
    25c2:	9302      	str	r3, [sp, #8]
    25c4:	e747      	b.n	2456 <__aeabi_ddiv+0x46>
    25c6:	2201      	movs	r2, #1
    25c8:	1ad5      	subs	r5, r2, r3
    25ca:	2d38      	cmp	r5, #56	; 0x38
    25cc:	dc00      	bgt.n	25d0 <__aeabi_ddiv+0x1c0>
    25ce:	e1b0      	b.n	2932 <__aeabi_ddiv+0x522>
    25d0:	4653      	mov	r3, sl
    25d2:	401a      	ands	r2, r3
    25d4:	2100      	movs	r1, #0
    25d6:	2300      	movs	r3, #0
    25d8:	2600      	movs	r6, #0
    25da:	4689      	mov	r9, r1
    25dc:	e77e      	b.n	24dc <__aeabi_ddiv+0xcc>
    25de:	2300      	movs	r3, #0
    25e0:	2680      	movs	r6, #128	; 0x80
    25e2:	4699      	mov	r9, r3
    25e4:	2200      	movs	r2, #0
    25e6:	0336      	lsls	r6, r6, #12
    25e8:	4b00      	ldr	r3, [pc, #0]	; (25ec <__aeabi_ddiv+0x1dc>)
    25ea:	e777      	b.n	24dc <__aeabi_ddiv+0xcc>
    25ec:	000007ff 	.word	0x000007ff
    25f0:	fffffc01 	.word	0xfffffc01
    25f4:	000037b8 	.word	0x000037b8
    25f8:	800fffff 	.word	0x800fffff
    25fc:	000003f3 	.word	0x000003f3
    2600:	455e      	cmp	r6, fp
    2602:	d900      	bls.n	2606 <__aeabi_ddiv+0x1f6>
    2604:	e172      	b.n	28ec <__aeabi_ddiv+0x4dc>
    2606:	d100      	bne.n	260a <__aeabi_ddiv+0x1fa>
    2608:	e16d      	b.n	28e6 <__aeabi_ddiv+0x4d6>
    260a:	9b01      	ldr	r3, [sp, #4]
    260c:	464d      	mov	r5, r9
    260e:	3b01      	subs	r3, #1
    2610:	9301      	str	r3, [sp, #4]
    2612:	2300      	movs	r3, #0
    2614:	0034      	movs	r4, r6
    2616:	9302      	str	r3, [sp, #8]
    2618:	465b      	mov	r3, fp
    261a:	021e      	lsls	r6, r3, #8
    261c:	0e0b      	lsrs	r3, r1, #24
    261e:	431e      	orrs	r6, r3
    2620:	020b      	lsls	r3, r1, #8
    2622:	9303      	str	r3, [sp, #12]
    2624:	0c33      	lsrs	r3, r6, #16
    2626:	4699      	mov	r9, r3
    2628:	0433      	lsls	r3, r6, #16
    262a:	0c1b      	lsrs	r3, r3, #16
    262c:	4649      	mov	r1, r9
    262e:	0020      	movs	r0, r4
    2630:	9300      	str	r3, [sp, #0]
    2632:	f7ff fb09 	bl	1c48 <__aeabi_uidiv>
    2636:	9b00      	ldr	r3, [sp, #0]
    2638:	0037      	movs	r7, r6
    263a:	4343      	muls	r3, r0
    263c:	0006      	movs	r6, r0
    263e:	4649      	mov	r1, r9
    2640:	0020      	movs	r0, r4
    2642:	4698      	mov	r8, r3
    2644:	f7ff fb86 	bl	1d54 <__aeabi_uidivmod>
    2648:	0c2c      	lsrs	r4, r5, #16
    264a:	0409      	lsls	r1, r1, #16
    264c:	430c      	orrs	r4, r1
    264e:	45a0      	cmp	r8, r4
    2650:	d909      	bls.n	2666 <__aeabi_ddiv+0x256>
    2652:	19e4      	adds	r4, r4, r7
    2654:	1e73      	subs	r3, r6, #1
    2656:	42a7      	cmp	r7, r4
    2658:	d900      	bls.n	265c <__aeabi_ddiv+0x24c>
    265a:	e15c      	b.n	2916 <__aeabi_ddiv+0x506>
    265c:	45a0      	cmp	r8, r4
    265e:	d800      	bhi.n	2662 <__aeabi_ddiv+0x252>
    2660:	e159      	b.n	2916 <__aeabi_ddiv+0x506>
    2662:	3e02      	subs	r6, #2
    2664:	19e4      	adds	r4, r4, r7
    2666:	4643      	mov	r3, r8
    2668:	1ae4      	subs	r4, r4, r3
    266a:	4649      	mov	r1, r9
    266c:	0020      	movs	r0, r4
    266e:	f7ff faeb 	bl	1c48 <__aeabi_uidiv>
    2672:	0003      	movs	r3, r0
    2674:	9a00      	ldr	r2, [sp, #0]
    2676:	4680      	mov	r8, r0
    2678:	4353      	muls	r3, r2
    267a:	4649      	mov	r1, r9
    267c:	0020      	movs	r0, r4
    267e:	469b      	mov	fp, r3
    2680:	f7ff fb68 	bl	1d54 <__aeabi_uidivmod>
    2684:	042a      	lsls	r2, r5, #16
    2686:	0409      	lsls	r1, r1, #16
    2688:	0c12      	lsrs	r2, r2, #16
    268a:	430a      	orrs	r2, r1
    268c:	4593      	cmp	fp, r2
    268e:	d90d      	bls.n	26ac <__aeabi_ddiv+0x29c>
    2690:	4643      	mov	r3, r8
    2692:	19d2      	adds	r2, r2, r7
    2694:	3b01      	subs	r3, #1
    2696:	4297      	cmp	r7, r2
    2698:	d900      	bls.n	269c <__aeabi_ddiv+0x28c>
    269a:	e13a      	b.n	2912 <__aeabi_ddiv+0x502>
    269c:	4593      	cmp	fp, r2
    269e:	d800      	bhi.n	26a2 <__aeabi_ddiv+0x292>
    26a0:	e137      	b.n	2912 <__aeabi_ddiv+0x502>
    26a2:	2302      	movs	r3, #2
    26a4:	425b      	negs	r3, r3
    26a6:	469c      	mov	ip, r3
    26a8:	19d2      	adds	r2, r2, r7
    26aa:	44e0      	add	r8, ip
    26ac:	465b      	mov	r3, fp
    26ae:	1ad2      	subs	r2, r2, r3
    26b0:	4643      	mov	r3, r8
    26b2:	0436      	lsls	r6, r6, #16
    26b4:	4333      	orrs	r3, r6
    26b6:	469b      	mov	fp, r3
    26b8:	9903      	ldr	r1, [sp, #12]
    26ba:	0c18      	lsrs	r0, r3, #16
    26bc:	0c0b      	lsrs	r3, r1, #16
    26be:	001d      	movs	r5, r3
    26c0:	9305      	str	r3, [sp, #20]
    26c2:	0409      	lsls	r1, r1, #16
    26c4:	465b      	mov	r3, fp
    26c6:	0c09      	lsrs	r1, r1, #16
    26c8:	000c      	movs	r4, r1
    26ca:	041b      	lsls	r3, r3, #16
    26cc:	0c1b      	lsrs	r3, r3, #16
    26ce:	4344      	muls	r4, r0
    26d0:	9104      	str	r1, [sp, #16]
    26d2:	4359      	muls	r1, r3
    26d4:	436b      	muls	r3, r5
    26d6:	4368      	muls	r0, r5
    26d8:	191b      	adds	r3, r3, r4
    26da:	0c0d      	lsrs	r5, r1, #16
    26dc:	18eb      	adds	r3, r5, r3
    26de:	429c      	cmp	r4, r3
    26e0:	d903      	bls.n	26ea <__aeabi_ddiv+0x2da>
    26e2:	2480      	movs	r4, #128	; 0x80
    26e4:	0264      	lsls	r4, r4, #9
    26e6:	46a4      	mov	ip, r4
    26e8:	4460      	add	r0, ip
    26ea:	0c1c      	lsrs	r4, r3, #16
    26ec:	0409      	lsls	r1, r1, #16
    26ee:	041b      	lsls	r3, r3, #16
    26f0:	0c09      	lsrs	r1, r1, #16
    26f2:	1820      	adds	r0, r4, r0
    26f4:	185d      	adds	r5, r3, r1
    26f6:	4282      	cmp	r2, r0
    26f8:	d200      	bcs.n	26fc <__aeabi_ddiv+0x2ec>
    26fa:	e0de      	b.n	28ba <__aeabi_ddiv+0x4aa>
    26fc:	d100      	bne.n	2700 <__aeabi_ddiv+0x2f0>
    26fe:	e0d7      	b.n	28b0 <__aeabi_ddiv+0x4a0>
    2700:	1a16      	subs	r6, r2, r0
    2702:	9b02      	ldr	r3, [sp, #8]
    2704:	469c      	mov	ip, r3
    2706:	1b5d      	subs	r5, r3, r5
    2708:	45ac      	cmp	ip, r5
    270a:	419b      	sbcs	r3, r3
    270c:	425b      	negs	r3, r3
    270e:	1af6      	subs	r6, r6, r3
    2710:	42b7      	cmp	r7, r6
    2712:	d100      	bne.n	2716 <__aeabi_ddiv+0x306>
    2714:	e106      	b.n	2924 <__aeabi_ddiv+0x514>
    2716:	4649      	mov	r1, r9
    2718:	0030      	movs	r0, r6
    271a:	f7ff fa95 	bl	1c48 <__aeabi_uidiv>
    271e:	9b00      	ldr	r3, [sp, #0]
    2720:	0004      	movs	r4, r0
    2722:	4343      	muls	r3, r0
    2724:	4649      	mov	r1, r9
    2726:	0030      	movs	r0, r6
    2728:	4698      	mov	r8, r3
    272a:	f7ff fb13 	bl	1d54 <__aeabi_uidivmod>
    272e:	0c2e      	lsrs	r6, r5, #16
    2730:	0409      	lsls	r1, r1, #16
    2732:	430e      	orrs	r6, r1
    2734:	45b0      	cmp	r8, r6
    2736:	d909      	bls.n	274c <__aeabi_ddiv+0x33c>
    2738:	19f6      	adds	r6, r6, r7
    273a:	1e63      	subs	r3, r4, #1
    273c:	42b7      	cmp	r7, r6
    273e:	d900      	bls.n	2742 <__aeabi_ddiv+0x332>
    2740:	e0f3      	b.n	292a <__aeabi_ddiv+0x51a>
    2742:	45b0      	cmp	r8, r6
    2744:	d800      	bhi.n	2748 <__aeabi_ddiv+0x338>
    2746:	e0f0      	b.n	292a <__aeabi_ddiv+0x51a>
    2748:	3c02      	subs	r4, #2
    274a:	19f6      	adds	r6, r6, r7
    274c:	4643      	mov	r3, r8
    274e:	1af3      	subs	r3, r6, r3
    2750:	4649      	mov	r1, r9
    2752:	0018      	movs	r0, r3
    2754:	9302      	str	r3, [sp, #8]
    2756:	f7ff fa77 	bl	1c48 <__aeabi_uidiv>
    275a:	9b00      	ldr	r3, [sp, #0]
    275c:	0006      	movs	r6, r0
    275e:	4343      	muls	r3, r0
    2760:	4649      	mov	r1, r9
    2762:	9802      	ldr	r0, [sp, #8]
    2764:	4698      	mov	r8, r3
    2766:	f7ff faf5 	bl	1d54 <__aeabi_uidivmod>
    276a:	042d      	lsls	r5, r5, #16
    276c:	0409      	lsls	r1, r1, #16
    276e:	0c2d      	lsrs	r5, r5, #16
    2770:	430d      	orrs	r5, r1
    2772:	45a8      	cmp	r8, r5
    2774:	d909      	bls.n	278a <__aeabi_ddiv+0x37a>
    2776:	19ed      	adds	r5, r5, r7
    2778:	1e73      	subs	r3, r6, #1
    277a:	42af      	cmp	r7, r5
    277c:	d900      	bls.n	2780 <__aeabi_ddiv+0x370>
    277e:	e0d6      	b.n	292e <__aeabi_ddiv+0x51e>
    2780:	45a8      	cmp	r8, r5
    2782:	d800      	bhi.n	2786 <__aeabi_ddiv+0x376>
    2784:	e0d3      	b.n	292e <__aeabi_ddiv+0x51e>
    2786:	3e02      	subs	r6, #2
    2788:	19ed      	adds	r5, r5, r7
    278a:	0424      	lsls	r4, r4, #16
    278c:	0021      	movs	r1, r4
    278e:	4643      	mov	r3, r8
    2790:	4331      	orrs	r1, r6
    2792:	9e04      	ldr	r6, [sp, #16]
    2794:	9a05      	ldr	r2, [sp, #20]
    2796:	0030      	movs	r0, r6
    2798:	1aed      	subs	r5, r5, r3
    279a:	040b      	lsls	r3, r1, #16
    279c:	0c0c      	lsrs	r4, r1, #16
    279e:	0c1b      	lsrs	r3, r3, #16
    27a0:	4358      	muls	r0, r3
    27a2:	4366      	muls	r6, r4
    27a4:	4353      	muls	r3, r2
    27a6:	4354      	muls	r4, r2
    27a8:	199a      	adds	r2, r3, r6
    27aa:	0c03      	lsrs	r3, r0, #16
    27ac:	189b      	adds	r3, r3, r2
    27ae:	429e      	cmp	r6, r3
    27b0:	d903      	bls.n	27ba <__aeabi_ddiv+0x3aa>
    27b2:	2280      	movs	r2, #128	; 0x80
    27b4:	0252      	lsls	r2, r2, #9
    27b6:	4694      	mov	ip, r2
    27b8:	4464      	add	r4, ip
    27ba:	0c1a      	lsrs	r2, r3, #16
    27bc:	0400      	lsls	r0, r0, #16
    27be:	041b      	lsls	r3, r3, #16
    27c0:	0c00      	lsrs	r0, r0, #16
    27c2:	1914      	adds	r4, r2, r4
    27c4:	181b      	adds	r3, r3, r0
    27c6:	42a5      	cmp	r5, r4
    27c8:	d350      	bcc.n	286c <__aeabi_ddiv+0x45c>
    27ca:	d04d      	beq.n	2868 <__aeabi_ddiv+0x458>
    27cc:	2301      	movs	r3, #1
    27ce:	4319      	orrs	r1, r3
    27d0:	4a96      	ldr	r2, [pc, #600]	; (2a2c <__aeabi_ddiv+0x61c>)
    27d2:	9b01      	ldr	r3, [sp, #4]
    27d4:	4694      	mov	ip, r2
    27d6:	4463      	add	r3, ip
    27d8:	2b00      	cmp	r3, #0
    27da:	dc00      	bgt.n	27de <__aeabi_ddiv+0x3ce>
    27dc:	e6f3      	b.n	25c6 <__aeabi_ddiv+0x1b6>
    27de:	074a      	lsls	r2, r1, #29
    27e0:	d009      	beq.n	27f6 <__aeabi_ddiv+0x3e6>
    27e2:	220f      	movs	r2, #15
    27e4:	400a      	ands	r2, r1
    27e6:	2a04      	cmp	r2, #4
    27e8:	d005      	beq.n	27f6 <__aeabi_ddiv+0x3e6>
    27ea:	1d0a      	adds	r2, r1, #4
    27ec:	428a      	cmp	r2, r1
    27ee:	4189      	sbcs	r1, r1
    27f0:	4249      	negs	r1, r1
    27f2:	448b      	add	fp, r1
    27f4:	0011      	movs	r1, r2
    27f6:	465a      	mov	r2, fp
    27f8:	01d2      	lsls	r2, r2, #7
    27fa:	d508      	bpl.n	280e <__aeabi_ddiv+0x3fe>
    27fc:	465a      	mov	r2, fp
    27fe:	4b8c      	ldr	r3, [pc, #560]	; (2a30 <__aeabi_ddiv+0x620>)
    2800:	401a      	ands	r2, r3
    2802:	4693      	mov	fp, r2
    2804:	2280      	movs	r2, #128	; 0x80
    2806:	00d2      	lsls	r2, r2, #3
    2808:	4694      	mov	ip, r2
    280a:	9b01      	ldr	r3, [sp, #4]
    280c:	4463      	add	r3, ip
    280e:	4a89      	ldr	r2, [pc, #548]	; (2a34 <__aeabi_ddiv+0x624>)
    2810:	4293      	cmp	r3, r2
    2812:	dd00      	ble.n	2816 <__aeabi_ddiv+0x406>
    2814:	e65b      	b.n	24ce <__aeabi_ddiv+0xbe>
    2816:	465a      	mov	r2, fp
    2818:	08c9      	lsrs	r1, r1, #3
    281a:	0750      	lsls	r0, r2, #29
    281c:	4308      	orrs	r0, r1
    281e:	0256      	lsls	r6, r2, #9
    2820:	4651      	mov	r1, sl
    2822:	2201      	movs	r2, #1
    2824:	055b      	lsls	r3, r3, #21
    2826:	4681      	mov	r9, r0
    2828:	0b36      	lsrs	r6, r6, #12
    282a:	0d5b      	lsrs	r3, r3, #21
    282c:	400a      	ands	r2, r1
    282e:	e655      	b.n	24dc <__aeabi_ddiv+0xcc>
    2830:	2380      	movs	r3, #128	; 0x80
    2832:	031b      	lsls	r3, r3, #12
    2834:	421e      	tst	r6, r3
    2836:	d011      	beq.n	285c <__aeabi_ddiv+0x44c>
    2838:	465a      	mov	r2, fp
    283a:	421a      	tst	r2, r3
    283c:	d10e      	bne.n	285c <__aeabi_ddiv+0x44c>
    283e:	465e      	mov	r6, fp
    2840:	431e      	orrs	r6, r3
    2842:	0336      	lsls	r6, r6, #12
    2844:	0b36      	lsrs	r6, r6, #12
    2846:	002a      	movs	r2, r5
    2848:	4689      	mov	r9, r1
    284a:	4b7b      	ldr	r3, [pc, #492]	; (2a38 <__aeabi_ddiv+0x628>)
    284c:	e646      	b.n	24dc <__aeabi_ddiv+0xcc>
    284e:	2b03      	cmp	r3, #3
    2850:	d100      	bne.n	2854 <__aeabi_ddiv+0x444>
    2852:	e0e1      	b.n	2a18 <__aeabi_ddiv+0x608>
    2854:	2b01      	cmp	r3, #1
    2856:	d1bb      	bne.n	27d0 <__aeabi_ddiv+0x3c0>
    2858:	401a      	ands	r2, r3
    285a:	e6bb      	b.n	25d4 <__aeabi_ddiv+0x1c4>
    285c:	431e      	orrs	r6, r3
    285e:	0336      	lsls	r6, r6, #12
    2860:	0b36      	lsrs	r6, r6, #12
    2862:	4642      	mov	r2, r8
    2864:	4b74      	ldr	r3, [pc, #464]	; (2a38 <__aeabi_ddiv+0x628>)
    2866:	e639      	b.n	24dc <__aeabi_ddiv+0xcc>
    2868:	2b00      	cmp	r3, #0
    286a:	d0b1      	beq.n	27d0 <__aeabi_ddiv+0x3c0>
    286c:	197d      	adds	r5, r7, r5
    286e:	1e4a      	subs	r2, r1, #1
    2870:	42af      	cmp	r7, r5
    2872:	d952      	bls.n	291a <__aeabi_ddiv+0x50a>
    2874:	0011      	movs	r1, r2
    2876:	42a5      	cmp	r5, r4
    2878:	d1a8      	bne.n	27cc <__aeabi_ddiv+0x3bc>
    287a:	9a03      	ldr	r2, [sp, #12]
    287c:	429a      	cmp	r2, r3
    287e:	d1a5      	bne.n	27cc <__aeabi_ddiv+0x3bc>
    2880:	e7a6      	b.n	27d0 <__aeabi_ddiv+0x3c0>
    2882:	0003      	movs	r3, r0
    2884:	003e      	movs	r6, r7
    2886:	3b28      	subs	r3, #40	; 0x28
    2888:	409e      	lsls	r6, r3
    288a:	2300      	movs	r3, #0
    288c:	4699      	mov	r9, r3
    288e:	e654      	b.n	253a <__aeabi_ddiv+0x12a>
    2890:	f000 ff10 	bl	36b4 <__clzsi2>
    2894:	3020      	adds	r0, #32
    2896:	e641      	b.n	251c <__aeabi_ddiv+0x10c>
    2898:	0003      	movs	r3, r0
    289a:	4652      	mov	r2, sl
    289c:	3b28      	subs	r3, #40	; 0x28
    289e:	409a      	lsls	r2, r3
    28a0:	2100      	movs	r1, #0
    28a2:	4693      	mov	fp, r2
    28a4:	e677      	b.n	2596 <__aeabi_ddiv+0x186>
    28a6:	4650      	mov	r0, sl
    28a8:	f000 ff04 	bl	36b4 <__clzsi2>
    28ac:	3020      	adds	r0, #32
    28ae:	e65e      	b.n	256e <__aeabi_ddiv+0x15e>
    28b0:	9b02      	ldr	r3, [sp, #8]
    28b2:	2600      	movs	r6, #0
    28b4:	42ab      	cmp	r3, r5
    28b6:	d300      	bcc.n	28ba <__aeabi_ddiv+0x4aa>
    28b8:	e723      	b.n	2702 <__aeabi_ddiv+0x2f2>
    28ba:	9e03      	ldr	r6, [sp, #12]
    28bc:	9902      	ldr	r1, [sp, #8]
    28be:	46b4      	mov	ip, r6
    28c0:	4461      	add	r1, ip
    28c2:	4688      	mov	r8, r1
    28c4:	45b0      	cmp	r8, r6
    28c6:	41b6      	sbcs	r6, r6
    28c8:	465b      	mov	r3, fp
    28ca:	4276      	negs	r6, r6
    28cc:	19f6      	adds	r6, r6, r7
    28ce:	18b2      	adds	r2, r6, r2
    28d0:	3b01      	subs	r3, #1
    28d2:	9102      	str	r1, [sp, #8]
    28d4:	4297      	cmp	r7, r2
    28d6:	d213      	bcs.n	2900 <__aeabi_ddiv+0x4f0>
    28d8:	4290      	cmp	r0, r2
    28da:	d84f      	bhi.n	297c <__aeabi_ddiv+0x56c>
    28dc:	d100      	bne.n	28e0 <__aeabi_ddiv+0x4d0>
    28de:	e08e      	b.n	29fe <__aeabi_ddiv+0x5ee>
    28e0:	1a16      	subs	r6, r2, r0
    28e2:	469b      	mov	fp, r3
    28e4:	e70d      	b.n	2702 <__aeabi_ddiv+0x2f2>
    28e6:	4589      	cmp	r9, r1
    28e8:	d200      	bcs.n	28ec <__aeabi_ddiv+0x4dc>
    28ea:	e68e      	b.n	260a <__aeabi_ddiv+0x1fa>
    28ec:	0874      	lsrs	r4, r6, #1
    28ee:	464b      	mov	r3, r9
    28f0:	07f6      	lsls	r6, r6, #31
    28f2:	0035      	movs	r5, r6
    28f4:	085b      	lsrs	r3, r3, #1
    28f6:	431d      	orrs	r5, r3
    28f8:	464b      	mov	r3, r9
    28fa:	07db      	lsls	r3, r3, #31
    28fc:	9302      	str	r3, [sp, #8]
    28fe:	e68b      	b.n	2618 <__aeabi_ddiv+0x208>
    2900:	4297      	cmp	r7, r2
    2902:	d1ed      	bne.n	28e0 <__aeabi_ddiv+0x4d0>
    2904:	9903      	ldr	r1, [sp, #12]
    2906:	9c02      	ldr	r4, [sp, #8]
    2908:	42a1      	cmp	r1, r4
    290a:	d9e5      	bls.n	28d8 <__aeabi_ddiv+0x4c8>
    290c:	1a3e      	subs	r6, r7, r0
    290e:	469b      	mov	fp, r3
    2910:	e6f7      	b.n	2702 <__aeabi_ddiv+0x2f2>
    2912:	4698      	mov	r8, r3
    2914:	e6ca      	b.n	26ac <__aeabi_ddiv+0x29c>
    2916:	001e      	movs	r6, r3
    2918:	e6a5      	b.n	2666 <__aeabi_ddiv+0x256>
    291a:	42ac      	cmp	r4, r5
    291c:	d83e      	bhi.n	299c <__aeabi_ddiv+0x58c>
    291e:	d074      	beq.n	2a0a <__aeabi_ddiv+0x5fa>
    2920:	0011      	movs	r1, r2
    2922:	e753      	b.n	27cc <__aeabi_ddiv+0x3bc>
    2924:	2101      	movs	r1, #1
    2926:	4249      	negs	r1, r1
    2928:	e752      	b.n	27d0 <__aeabi_ddiv+0x3c0>
    292a:	001c      	movs	r4, r3
    292c:	e70e      	b.n	274c <__aeabi_ddiv+0x33c>
    292e:	001e      	movs	r6, r3
    2930:	e72b      	b.n	278a <__aeabi_ddiv+0x37a>
    2932:	2d1f      	cmp	r5, #31
    2934:	dc3c      	bgt.n	29b0 <__aeabi_ddiv+0x5a0>
    2936:	2320      	movs	r3, #32
    2938:	000a      	movs	r2, r1
    293a:	4658      	mov	r0, fp
    293c:	1b5b      	subs	r3, r3, r5
    293e:	4098      	lsls	r0, r3
    2940:	40ea      	lsrs	r2, r5
    2942:	4099      	lsls	r1, r3
    2944:	4302      	orrs	r2, r0
    2946:	1e48      	subs	r0, r1, #1
    2948:	4181      	sbcs	r1, r0
    294a:	465e      	mov	r6, fp
    294c:	4311      	orrs	r1, r2
    294e:	40ee      	lsrs	r6, r5
    2950:	074b      	lsls	r3, r1, #29
    2952:	d009      	beq.n	2968 <__aeabi_ddiv+0x558>
    2954:	230f      	movs	r3, #15
    2956:	400b      	ands	r3, r1
    2958:	2b04      	cmp	r3, #4
    295a:	d005      	beq.n	2968 <__aeabi_ddiv+0x558>
    295c:	000b      	movs	r3, r1
    295e:	1d19      	adds	r1, r3, #4
    2960:	4299      	cmp	r1, r3
    2962:	419b      	sbcs	r3, r3
    2964:	425b      	negs	r3, r3
    2966:	18f6      	adds	r6, r6, r3
    2968:	0233      	lsls	r3, r6, #8
    296a:	d53c      	bpl.n	29e6 <__aeabi_ddiv+0x5d6>
    296c:	4653      	mov	r3, sl
    296e:	2201      	movs	r2, #1
    2970:	2100      	movs	r1, #0
    2972:	401a      	ands	r2, r3
    2974:	2600      	movs	r6, #0
    2976:	2301      	movs	r3, #1
    2978:	4689      	mov	r9, r1
    297a:	e5af      	b.n	24dc <__aeabi_ddiv+0xcc>
    297c:	2302      	movs	r3, #2
    297e:	425b      	negs	r3, r3
    2980:	469c      	mov	ip, r3
    2982:	9c03      	ldr	r4, [sp, #12]
    2984:	44e3      	add	fp, ip
    2986:	46a4      	mov	ip, r4
    2988:	9b02      	ldr	r3, [sp, #8]
    298a:	4463      	add	r3, ip
    298c:	4698      	mov	r8, r3
    298e:	45a0      	cmp	r8, r4
    2990:	41b6      	sbcs	r6, r6
    2992:	4276      	negs	r6, r6
    2994:	19f6      	adds	r6, r6, r7
    2996:	9302      	str	r3, [sp, #8]
    2998:	18b2      	adds	r2, r6, r2
    299a:	e6b1      	b.n	2700 <__aeabi_ddiv+0x2f0>
    299c:	9803      	ldr	r0, [sp, #12]
    299e:	1e8a      	subs	r2, r1, #2
    29a0:	0041      	lsls	r1, r0, #1
    29a2:	4281      	cmp	r1, r0
    29a4:	41b6      	sbcs	r6, r6
    29a6:	4276      	negs	r6, r6
    29a8:	19f6      	adds	r6, r6, r7
    29aa:	19ad      	adds	r5, r5, r6
    29ac:	9103      	str	r1, [sp, #12]
    29ae:	e761      	b.n	2874 <__aeabi_ddiv+0x464>
    29b0:	221f      	movs	r2, #31
    29b2:	4252      	negs	r2, r2
    29b4:	1ad3      	subs	r3, r2, r3
    29b6:	465a      	mov	r2, fp
    29b8:	40da      	lsrs	r2, r3
    29ba:	0013      	movs	r3, r2
    29bc:	2d20      	cmp	r5, #32
    29be:	d029      	beq.n	2a14 <__aeabi_ddiv+0x604>
    29c0:	2240      	movs	r2, #64	; 0x40
    29c2:	4658      	mov	r0, fp
    29c4:	1b55      	subs	r5, r2, r5
    29c6:	40a8      	lsls	r0, r5
    29c8:	4301      	orrs	r1, r0
    29ca:	1e48      	subs	r0, r1, #1
    29cc:	4181      	sbcs	r1, r0
    29ce:	2007      	movs	r0, #7
    29d0:	430b      	orrs	r3, r1
    29d2:	4018      	ands	r0, r3
    29d4:	2600      	movs	r6, #0
    29d6:	2800      	cmp	r0, #0
    29d8:	d009      	beq.n	29ee <__aeabi_ddiv+0x5de>
    29da:	220f      	movs	r2, #15
    29dc:	2600      	movs	r6, #0
    29de:	401a      	ands	r2, r3
    29e0:	0019      	movs	r1, r3
    29e2:	2a04      	cmp	r2, #4
    29e4:	d1bb      	bne.n	295e <__aeabi_ddiv+0x54e>
    29e6:	000b      	movs	r3, r1
    29e8:	0770      	lsls	r0, r6, #29
    29ea:	0276      	lsls	r6, r6, #9
    29ec:	0b36      	lsrs	r6, r6, #12
    29ee:	08db      	lsrs	r3, r3, #3
    29f0:	4303      	orrs	r3, r0
    29f2:	4699      	mov	r9, r3
    29f4:	2201      	movs	r2, #1
    29f6:	4653      	mov	r3, sl
    29f8:	401a      	ands	r2, r3
    29fa:	2300      	movs	r3, #0
    29fc:	e56e      	b.n	24dc <__aeabi_ddiv+0xcc>
    29fe:	9902      	ldr	r1, [sp, #8]
    2a00:	428d      	cmp	r5, r1
    2a02:	d8bb      	bhi.n	297c <__aeabi_ddiv+0x56c>
    2a04:	469b      	mov	fp, r3
    2a06:	2600      	movs	r6, #0
    2a08:	e67b      	b.n	2702 <__aeabi_ddiv+0x2f2>
    2a0a:	9803      	ldr	r0, [sp, #12]
    2a0c:	4298      	cmp	r0, r3
    2a0e:	d3c5      	bcc.n	299c <__aeabi_ddiv+0x58c>
    2a10:	0011      	movs	r1, r2
    2a12:	e732      	b.n	287a <__aeabi_ddiv+0x46a>
    2a14:	2000      	movs	r0, #0
    2a16:	e7d7      	b.n	29c8 <__aeabi_ddiv+0x5b8>
    2a18:	2680      	movs	r6, #128	; 0x80
    2a1a:	465b      	mov	r3, fp
    2a1c:	0336      	lsls	r6, r6, #12
    2a1e:	431e      	orrs	r6, r3
    2a20:	0336      	lsls	r6, r6, #12
    2a22:	0b36      	lsrs	r6, r6, #12
    2a24:	9a00      	ldr	r2, [sp, #0]
    2a26:	4689      	mov	r9, r1
    2a28:	4b03      	ldr	r3, [pc, #12]	; (2a38 <__aeabi_ddiv+0x628>)
    2a2a:	e557      	b.n	24dc <__aeabi_ddiv+0xcc>
    2a2c:	000003ff 	.word	0x000003ff
    2a30:	feffffff 	.word	0xfeffffff
    2a34:	000007fe 	.word	0x000007fe
    2a38:	000007ff 	.word	0x000007ff

00002a3c <__aeabi_dmul>:
    2a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a3e:	465f      	mov	r7, fp
    2a40:	4656      	mov	r6, sl
    2a42:	464d      	mov	r5, r9
    2a44:	4644      	mov	r4, r8
    2a46:	b4f0      	push	{r4, r5, r6, r7}
    2a48:	030d      	lsls	r5, r1, #12
    2a4a:	4699      	mov	r9, r3
    2a4c:	004e      	lsls	r6, r1, #1
    2a4e:	0b2b      	lsrs	r3, r5, #12
    2a50:	b087      	sub	sp, #28
    2a52:	0007      	movs	r7, r0
    2a54:	4692      	mov	sl, r2
    2a56:	4680      	mov	r8, r0
    2a58:	469b      	mov	fp, r3
    2a5a:	0d76      	lsrs	r6, r6, #21
    2a5c:	0fcc      	lsrs	r4, r1, #31
    2a5e:	2e00      	cmp	r6, #0
    2a60:	d069      	beq.n	2b36 <__aeabi_dmul+0xfa>
    2a62:	4b6d      	ldr	r3, [pc, #436]	; (2c18 <__aeabi_dmul+0x1dc>)
    2a64:	429e      	cmp	r6, r3
    2a66:	d035      	beq.n	2ad4 <__aeabi_dmul+0x98>
    2a68:	465b      	mov	r3, fp
    2a6a:	2280      	movs	r2, #128	; 0x80
    2a6c:	00dd      	lsls	r5, r3, #3
    2a6e:	0412      	lsls	r2, r2, #16
    2a70:	0f43      	lsrs	r3, r0, #29
    2a72:	4313      	orrs	r3, r2
    2a74:	432b      	orrs	r3, r5
    2a76:	469b      	mov	fp, r3
    2a78:	00c3      	lsls	r3, r0, #3
    2a7a:	4698      	mov	r8, r3
    2a7c:	4b67      	ldr	r3, [pc, #412]	; (2c1c <__aeabi_dmul+0x1e0>)
    2a7e:	2700      	movs	r7, #0
    2a80:	469c      	mov	ip, r3
    2a82:	2300      	movs	r3, #0
    2a84:	4466      	add	r6, ip
    2a86:	9301      	str	r3, [sp, #4]
    2a88:	464a      	mov	r2, r9
    2a8a:	0315      	lsls	r5, r2, #12
    2a8c:	0050      	lsls	r0, r2, #1
    2a8e:	0fd2      	lsrs	r2, r2, #31
    2a90:	4653      	mov	r3, sl
    2a92:	0b2d      	lsrs	r5, r5, #12
    2a94:	0d40      	lsrs	r0, r0, #21
    2a96:	4691      	mov	r9, r2
    2a98:	d100      	bne.n	2a9c <__aeabi_dmul+0x60>
    2a9a:	e076      	b.n	2b8a <__aeabi_dmul+0x14e>
    2a9c:	4a5e      	ldr	r2, [pc, #376]	; (2c18 <__aeabi_dmul+0x1dc>)
    2a9e:	4290      	cmp	r0, r2
    2aa0:	d06c      	beq.n	2b7c <__aeabi_dmul+0x140>
    2aa2:	2280      	movs	r2, #128	; 0x80
    2aa4:	0f5b      	lsrs	r3, r3, #29
    2aa6:	0412      	lsls	r2, r2, #16
    2aa8:	4313      	orrs	r3, r2
    2aaa:	4a5c      	ldr	r2, [pc, #368]	; (2c1c <__aeabi_dmul+0x1e0>)
    2aac:	00ed      	lsls	r5, r5, #3
    2aae:	4694      	mov	ip, r2
    2ab0:	431d      	orrs	r5, r3
    2ab2:	4653      	mov	r3, sl
    2ab4:	2200      	movs	r2, #0
    2ab6:	00db      	lsls	r3, r3, #3
    2ab8:	4460      	add	r0, ip
    2aba:	4649      	mov	r1, r9
    2abc:	1836      	adds	r6, r6, r0
    2abe:	1c70      	adds	r0, r6, #1
    2ac0:	4061      	eors	r1, r4
    2ac2:	9002      	str	r0, [sp, #8]
    2ac4:	4317      	orrs	r7, r2
    2ac6:	2f0f      	cmp	r7, #15
    2ac8:	d900      	bls.n	2acc <__aeabi_dmul+0x90>
    2aca:	e0af      	b.n	2c2c <__aeabi_dmul+0x1f0>
    2acc:	4854      	ldr	r0, [pc, #336]	; (2c20 <__aeabi_dmul+0x1e4>)
    2ace:	00bf      	lsls	r7, r7, #2
    2ad0:	59c7      	ldr	r7, [r0, r7]
    2ad2:	46bf      	mov	pc, r7
    2ad4:	465b      	mov	r3, fp
    2ad6:	431f      	orrs	r7, r3
    2ad8:	d000      	beq.n	2adc <__aeabi_dmul+0xa0>
    2ada:	e088      	b.n	2bee <__aeabi_dmul+0x1b2>
    2adc:	2300      	movs	r3, #0
    2ade:	469b      	mov	fp, r3
    2ae0:	4698      	mov	r8, r3
    2ae2:	3302      	adds	r3, #2
    2ae4:	2708      	movs	r7, #8
    2ae6:	9301      	str	r3, [sp, #4]
    2ae8:	e7ce      	b.n	2a88 <__aeabi_dmul+0x4c>
    2aea:	4649      	mov	r1, r9
    2aec:	2a02      	cmp	r2, #2
    2aee:	d06a      	beq.n	2bc6 <__aeabi_dmul+0x18a>
    2af0:	2a03      	cmp	r2, #3
    2af2:	d100      	bne.n	2af6 <__aeabi_dmul+0xba>
    2af4:	e209      	b.n	2f0a <__aeabi_dmul+0x4ce>
    2af6:	2a01      	cmp	r2, #1
    2af8:	d000      	beq.n	2afc <__aeabi_dmul+0xc0>
    2afa:	e1bb      	b.n	2e74 <__aeabi_dmul+0x438>
    2afc:	4011      	ands	r1, r2
    2afe:	2200      	movs	r2, #0
    2b00:	2300      	movs	r3, #0
    2b02:	2500      	movs	r5, #0
    2b04:	4690      	mov	r8, r2
    2b06:	b2cc      	uxtb	r4, r1
    2b08:	2100      	movs	r1, #0
    2b0a:	032d      	lsls	r5, r5, #12
    2b0c:	0d0a      	lsrs	r2, r1, #20
    2b0e:	0512      	lsls	r2, r2, #20
    2b10:	0b2d      	lsrs	r5, r5, #12
    2b12:	4315      	orrs	r5, r2
    2b14:	4a43      	ldr	r2, [pc, #268]	; (2c24 <__aeabi_dmul+0x1e8>)
    2b16:	051b      	lsls	r3, r3, #20
    2b18:	4015      	ands	r5, r2
    2b1a:	431d      	orrs	r5, r3
    2b1c:	006d      	lsls	r5, r5, #1
    2b1e:	07e4      	lsls	r4, r4, #31
    2b20:	086d      	lsrs	r5, r5, #1
    2b22:	4325      	orrs	r5, r4
    2b24:	4640      	mov	r0, r8
    2b26:	0029      	movs	r1, r5
    2b28:	b007      	add	sp, #28
    2b2a:	bc3c      	pop	{r2, r3, r4, r5}
    2b2c:	4690      	mov	r8, r2
    2b2e:	4699      	mov	r9, r3
    2b30:	46a2      	mov	sl, r4
    2b32:	46ab      	mov	fp, r5
    2b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b36:	4303      	orrs	r3, r0
    2b38:	d052      	beq.n	2be0 <__aeabi_dmul+0x1a4>
    2b3a:	465b      	mov	r3, fp
    2b3c:	2b00      	cmp	r3, #0
    2b3e:	d100      	bne.n	2b42 <__aeabi_dmul+0x106>
    2b40:	e18a      	b.n	2e58 <__aeabi_dmul+0x41c>
    2b42:	4658      	mov	r0, fp
    2b44:	f000 fdb6 	bl	36b4 <__clzsi2>
    2b48:	0003      	movs	r3, r0
    2b4a:	3b0b      	subs	r3, #11
    2b4c:	2b1c      	cmp	r3, #28
    2b4e:	dd00      	ble.n	2b52 <__aeabi_dmul+0x116>
    2b50:	e17b      	b.n	2e4a <__aeabi_dmul+0x40e>
    2b52:	221d      	movs	r2, #29
    2b54:	1ad3      	subs	r3, r2, r3
    2b56:	003a      	movs	r2, r7
    2b58:	0001      	movs	r1, r0
    2b5a:	465d      	mov	r5, fp
    2b5c:	40da      	lsrs	r2, r3
    2b5e:	3908      	subs	r1, #8
    2b60:	408d      	lsls	r5, r1
    2b62:	0013      	movs	r3, r2
    2b64:	408f      	lsls	r7, r1
    2b66:	432b      	orrs	r3, r5
    2b68:	469b      	mov	fp, r3
    2b6a:	46b8      	mov	r8, r7
    2b6c:	4b2e      	ldr	r3, [pc, #184]	; (2c28 <__aeabi_dmul+0x1ec>)
    2b6e:	2700      	movs	r7, #0
    2b70:	469c      	mov	ip, r3
    2b72:	2300      	movs	r3, #0
    2b74:	4460      	add	r0, ip
    2b76:	4246      	negs	r6, r0
    2b78:	9301      	str	r3, [sp, #4]
    2b7a:	e785      	b.n	2a88 <__aeabi_dmul+0x4c>
    2b7c:	4652      	mov	r2, sl
    2b7e:	432a      	orrs	r2, r5
    2b80:	d12c      	bne.n	2bdc <__aeabi_dmul+0x1a0>
    2b82:	2500      	movs	r5, #0
    2b84:	2300      	movs	r3, #0
    2b86:	2202      	movs	r2, #2
    2b88:	e797      	b.n	2aba <__aeabi_dmul+0x7e>
    2b8a:	4652      	mov	r2, sl
    2b8c:	432a      	orrs	r2, r5
    2b8e:	d021      	beq.n	2bd4 <__aeabi_dmul+0x198>
    2b90:	2d00      	cmp	r5, #0
    2b92:	d100      	bne.n	2b96 <__aeabi_dmul+0x15a>
    2b94:	e154      	b.n	2e40 <__aeabi_dmul+0x404>
    2b96:	0028      	movs	r0, r5
    2b98:	f000 fd8c 	bl	36b4 <__clzsi2>
    2b9c:	0003      	movs	r3, r0
    2b9e:	3b0b      	subs	r3, #11
    2ba0:	2b1c      	cmp	r3, #28
    2ba2:	dd00      	ble.n	2ba6 <__aeabi_dmul+0x16a>
    2ba4:	e146      	b.n	2e34 <__aeabi_dmul+0x3f8>
    2ba6:	211d      	movs	r1, #29
    2ba8:	1acb      	subs	r3, r1, r3
    2baa:	4651      	mov	r1, sl
    2bac:	0002      	movs	r2, r0
    2bae:	40d9      	lsrs	r1, r3
    2bb0:	4653      	mov	r3, sl
    2bb2:	3a08      	subs	r2, #8
    2bb4:	4095      	lsls	r5, r2
    2bb6:	4093      	lsls	r3, r2
    2bb8:	430d      	orrs	r5, r1
    2bba:	4a1b      	ldr	r2, [pc, #108]	; (2c28 <__aeabi_dmul+0x1ec>)
    2bbc:	4694      	mov	ip, r2
    2bbe:	4460      	add	r0, ip
    2bc0:	4240      	negs	r0, r0
    2bc2:	2200      	movs	r2, #0
    2bc4:	e779      	b.n	2aba <__aeabi_dmul+0x7e>
    2bc6:	2401      	movs	r4, #1
    2bc8:	2200      	movs	r2, #0
    2bca:	400c      	ands	r4, r1
    2bcc:	4b12      	ldr	r3, [pc, #72]	; (2c18 <__aeabi_dmul+0x1dc>)
    2bce:	2500      	movs	r5, #0
    2bd0:	4690      	mov	r8, r2
    2bd2:	e799      	b.n	2b08 <__aeabi_dmul+0xcc>
    2bd4:	2500      	movs	r5, #0
    2bd6:	2300      	movs	r3, #0
    2bd8:	2201      	movs	r2, #1
    2bda:	e76e      	b.n	2aba <__aeabi_dmul+0x7e>
    2bdc:	2203      	movs	r2, #3
    2bde:	e76c      	b.n	2aba <__aeabi_dmul+0x7e>
    2be0:	2300      	movs	r3, #0
    2be2:	469b      	mov	fp, r3
    2be4:	4698      	mov	r8, r3
    2be6:	3301      	adds	r3, #1
    2be8:	2704      	movs	r7, #4
    2bea:	9301      	str	r3, [sp, #4]
    2bec:	e74c      	b.n	2a88 <__aeabi_dmul+0x4c>
    2bee:	2303      	movs	r3, #3
    2bf0:	270c      	movs	r7, #12
    2bf2:	9301      	str	r3, [sp, #4]
    2bf4:	e748      	b.n	2a88 <__aeabi_dmul+0x4c>
    2bf6:	2300      	movs	r3, #0
    2bf8:	2580      	movs	r5, #128	; 0x80
    2bfa:	4698      	mov	r8, r3
    2bfc:	2400      	movs	r4, #0
    2bfe:	032d      	lsls	r5, r5, #12
    2c00:	4b05      	ldr	r3, [pc, #20]	; (2c18 <__aeabi_dmul+0x1dc>)
    2c02:	e781      	b.n	2b08 <__aeabi_dmul+0xcc>
    2c04:	465d      	mov	r5, fp
    2c06:	4643      	mov	r3, r8
    2c08:	9a01      	ldr	r2, [sp, #4]
    2c0a:	e76f      	b.n	2aec <__aeabi_dmul+0xb0>
    2c0c:	465d      	mov	r5, fp
    2c0e:	4643      	mov	r3, r8
    2c10:	0021      	movs	r1, r4
    2c12:	9a01      	ldr	r2, [sp, #4]
    2c14:	e76a      	b.n	2aec <__aeabi_dmul+0xb0>
    2c16:	46c0      	nop			; (mov r8, r8)
    2c18:	000007ff 	.word	0x000007ff
    2c1c:	fffffc01 	.word	0xfffffc01
    2c20:	000037f8 	.word	0x000037f8
    2c24:	800fffff 	.word	0x800fffff
    2c28:	000003f3 	.word	0x000003f3
    2c2c:	4642      	mov	r2, r8
    2c2e:	0c12      	lsrs	r2, r2, #16
    2c30:	4691      	mov	r9, r2
    2c32:	0c1a      	lsrs	r2, r3, #16
    2c34:	4694      	mov	ip, r2
    2c36:	4642      	mov	r2, r8
    2c38:	0417      	lsls	r7, r2, #16
    2c3a:	464a      	mov	r2, r9
    2c3c:	041b      	lsls	r3, r3, #16
    2c3e:	0c1b      	lsrs	r3, r3, #16
    2c40:	435a      	muls	r2, r3
    2c42:	4660      	mov	r0, ip
    2c44:	4690      	mov	r8, r2
    2c46:	464a      	mov	r2, r9
    2c48:	4342      	muls	r2, r0
    2c4a:	0010      	movs	r0, r2
    2c4c:	9203      	str	r2, [sp, #12]
    2c4e:	4662      	mov	r2, ip
    2c50:	001c      	movs	r4, r3
    2c52:	0c3f      	lsrs	r7, r7, #16
    2c54:	437a      	muls	r2, r7
    2c56:	437c      	muls	r4, r7
    2c58:	4442      	add	r2, r8
    2c5a:	9201      	str	r2, [sp, #4]
    2c5c:	0c22      	lsrs	r2, r4, #16
    2c5e:	4692      	mov	sl, r2
    2c60:	9a01      	ldr	r2, [sp, #4]
    2c62:	4452      	add	r2, sl
    2c64:	4590      	cmp	r8, r2
    2c66:	d906      	bls.n	2c76 <__aeabi_dmul+0x23a>
    2c68:	4682      	mov	sl, r0
    2c6a:	2080      	movs	r0, #128	; 0x80
    2c6c:	0240      	lsls	r0, r0, #9
    2c6e:	4680      	mov	r8, r0
    2c70:	44c2      	add	sl, r8
    2c72:	4650      	mov	r0, sl
    2c74:	9003      	str	r0, [sp, #12]
    2c76:	0c10      	lsrs	r0, r2, #16
    2c78:	9004      	str	r0, [sp, #16]
    2c7a:	4648      	mov	r0, r9
    2c7c:	0424      	lsls	r4, r4, #16
    2c7e:	0c24      	lsrs	r4, r4, #16
    2c80:	0412      	lsls	r2, r2, #16
    2c82:	1912      	adds	r2, r2, r4
    2c84:	9205      	str	r2, [sp, #20]
    2c86:	0c2a      	lsrs	r2, r5, #16
    2c88:	042d      	lsls	r5, r5, #16
    2c8a:	0c2d      	lsrs	r5, r5, #16
    2c8c:	4368      	muls	r0, r5
    2c8e:	002c      	movs	r4, r5
    2c90:	4682      	mov	sl, r0
    2c92:	4648      	mov	r0, r9
    2c94:	437c      	muls	r4, r7
    2c96:	4350      	muls	r0, r2
    2c98:	4681      	mov	r9, r0
    2c9a:	0c20      	lsrs	r0, r4, #16
    2c9c:	4680      	mov	r8, r0
    2c9e:	4357      	muls	r7, r2
    2ca0:	4457      	add	r7, sl
    2ca2:	4447      	add	r7, r8
    2ca4:	45ba      	cmp	sl, r7
    2ca6:	d903      	bls.n	2cb0 <__aeabi_dmul+0x274>
    2ca8:	2080      	movs	r0, #128	; 0x80
    2caa:	0240      	lsls	r0, r0, #9
    2cac:	4680      	mov	r8, r0
    2cae:	44c1      	add	r9, r8
    2cb0:	0c38      	lsrs	r0, r7, #16
    2cb2:	043f      	lsls	r7, r7, #16
    2cb4:	46b8      	mov	r8, r7
    2cb6:	4448      	add	r0, r9
    2cb8:	0424      	lsls	r4, r4, #16
    2cba:	0c24      	lsrs	r4, r4, #16
    2cbc:	9001      	str	r0, [sp, #4]
    2cbe:	9804      	ldr	r0, [sp, #16]
    2cc0:	44a0      	add	r8, r4
    2cc2:	4440      	add	r0, r8
    2cc4:	9004      	str	r0, [sp, #16]
    2cc6:	4658      	mov	r0, fp
    2cc8:	0c00      	lsrs	r0, r0, #16
    2cca:	4681      	mov	r9, r0
    2ccc:	4658      	mov	r0, fp
    2cce:	0404      	lsls	r4, r0, #16
    2cd0:	0c20      	lsrs	r0, r4, #16
    2cd2:	4682      	mov	sl, r0
    2cd4:	0007      	movs	r7, r0
    2cd6:	4648      	mov	r0, r9
    2cd8:	435f      	muls	r7, r3
    2cda:	464c      	mov	r4, r9
    2cdc:	4343      	muls	r3, r0
    2cde:	4660      	mov	r0, ip
    2ce0:	4360      	muls	r0, r4
    2ce2:	4664      	mov	r4, ip
    2ce4:	4683      	mov	fp, r0
    2ce6:	4650      	mov	r0, sl
    2ce8:	4344      	muls	r4, r0
    2cea:	0c38      	lsrs	r0, r7, #16
    2cec:	4684      	mov	ip, r0
    2cee:	18e4      	adds	r4, r4, r3
    2cf0:	4464      	add	r4, ip
    2cf2:	42a3      	cmp	r3, r4
    2cf4:	d903      	bls.n	2cfe <__aeabi_dmul+0x2c2>
    2cf6:	2380      	movs	r3, #128	; 0x80
    2cf8:	025b      	lsls	r3, r3, #9
    2cfa:	469c      	mov	ip, r3
    2cfc:	44e3      	add	fp, ip
    2cfe:	4648      	mov	r0, r9
    2d00:	043f      	lsls	r7, r7, #16
    2d02:	0c23      	lsrs	r3, r4, #16
    2d04:	0c3f      	lsrs	r7, r7, #16
    2d06:	0424      	lsls	r4, r4, #16
    2d08:	19e4      	adds	r4, r4, r7
    2d0a:	4657      	mov	r7, sl
    2d0c:	4368      	muls	r0, r5
    2d0e:	436f      	muls	r7, r5
    2d10:	4684      	mov	ip, r0
    2d12:	464d      	mov	r5, r9
    2d14:	4650      	mov	r0, sl
    2d16:	4355      	muls	r5, r2
    2d18:	4342      	muls	r2, r0
    2d1a:	0c38      	lsrs	r0, r7, #16
    2d1c:	4681      	mov	r9, r0
    2d1e:	4462      	add	r2, ip
    2d20:	444a      	add	r2, r9
    2d22:	445b      	add	r3, fp
    2d24:	4594      	cmp	ip, r2
    2d26:	d903      	bls.n	2d30 <__aeabi_dmul+0x2f4>
    2d28:	2080      	movs	r0, #128	; 0x80
    2d2a:	0240      	lsls	r0, r0, #9
    2d2c:	4684      	mov	ip, r0
    2d2e:	4465      	add	r5, ip
    2d30:	9803      	ldr	r0, [sp, #12]
    2d32:	043f      	lsls	r7, r7, #16
    2d34:	4683      	mov	fp, r0
    2d36:	9804      	ldr	r0, [sp, #16]
    2d38:	0c3f      	lsrs	r7, r7, #16
    2d3a:	4684      	mov	ip, r0
    2d3c:	44e3      	add	fp, ip
    2d3e:	45c3      	cmp	fp, r8
    2d40:	4180      	sbcs	r0, r0
    2d42:	4240      	negs	r0, r0
    2d44:	4682      	mov	sl, r0
    2d46:	0410      	lsls	r0, r2, #16
    2d48:	4684      	mov	ip, r0
    2d4a:	9801      	ldr	r0, [sp, #4]
    2d4c:	4467      	add	r7, ip
    2d4e:	4684      	mov	ip, r0
    2d50:	4467      	add	r7, ip
    2d52:	44a3      	add	fp, r4
    2d54:	46bc      	mov	ip, r7
    2d56:	45a3      	cmp	fp, r4
    2d58:	41a4      	sbcs	r4, r4
    2d5a:	4699      	mov	r9, r3
    2d5c:	44d4      	add	ip, sl
    2d5e:	4264      	negs	r4, r4
    2d60:	4287      	cmp	r7, r0
    2d62:	41bf      	sbcs	r7, r7
    2d64:	45d4      	cmp	ip, sl
    2d66:	4180      	sbcs	r0, r0
    2d68:	44e1      	add	r9, ip
    2d6a:	46a0      	mov	r8, r4
    2d6c:	4599      	cmp	r9, r3
    2d6e:	419b      	sbcs	r3, r3
    2d70:	427f      	negs	r7, r7
    2d72:	4240      	negs	r0, r0
    2d74:	44c8      	add	r8, r9
    2d76:	4307      	orrs	r7, r0
    2d78:	0c12      	lsrs	r2, r2, #16
    2d7a:	18ba      	adds	r2, r7, r2
    2d7c:	45a0      	cmp	r8, r4
    2d7e:	41a4      	sbcs	r4, r4
    2d80:	425f      	negs	r7, r3
    2d82:	003b      	movs	r3, r7
    2d84:	4264      	negs	r4, r4
    2d86:	4323      	orrs	r3, r4
    2d88:	18d7      	adds	r7, r2, r3
    2d8a:	4643      	mov	r3, r8
    2d8c:	197d      	adds	r5, r7, r5
    2d8e:	0ddb      	lsrs	r3, r3, #23
    2d90:	026d      	lsls	r5, r5, #9
    2d92:	431d      	orrs	r5, r3
    2d94:	465b      	mov	r3, fp
    2d96:	025a      	lsls	r2, r3, #9
    2d98:	9b05      	ldr	r3, [sp, #20]
    2d9a:	431a      	orrs	r2, r3
    2d9c:	1e53      	subs	r3, r2, #1
    2d9e:	419a      	sbcs	r2, r3
    2da0:	465b      	mov	r3, fp
    2da2:	0ddb      	lsrs	r3, r3, #23
    2da4:	431a      	orrs	r2, r3
    2da6:	4643      	mov	r3, r8
    2da8:	025b      	lsls	r3, r3, #9
    2daa:	4313      	orrs	r3, r2
    2dac:	01ea      	lsls	r2, r5, #7
    2dae:	d507      	bpl.n	2dc0 <__aeabi_dmul+0x384>
    2db0:	2201      	movs	r2, #1
    2db2:	085c      	lsrs	r4, r3, #1
    2db4:	4013      	ands	r3, r2
    2db6:	4323      	orrs	r3, r4
    2db8:	07ea      	lsls	r2, r5, #31
    2dba:	9e02      	ldr	r6, [sp, #8]
    2dbc:	4313      	orrs	r3, r2
    2dbe:	086d      	lsrs	r5, r5, #1
    2dc0:	4a57      	ldr	r2, [pc, #348]	; (2f20 <__aeabi_dmul+0x4e4>)
    2dc2:	18b2      	adds	r2, r6, r2
    2dc4:	2a00      	cmp	r2, #0
    2dc6:	dd4b      	ble.n	2e60 <__aeabi_dmul+0x424>
    2dc8:	0758      	lsls	r0, r3, #29
    2dca:	d009      	beq.n	2de0 <__aeabi_dmul+0x3a4>
    2dcc:	200f      	movs	r0, #15
    2dce:	4018      	ands	r0, r3
    2dd0:	2804      	cmp	r0, #4
    2dd2:	d005      	beq.n	2de0 <__aeabi_dmul+0x3a4>
    2dd4:	1d18      	adds	r0, r3, #4
    2dd6:	4298      	cmp	r0, r3
    2dd8:	419b      	sbcs	r3, r3
    2dda:	425b      	negs	r3, r3
    2ddc:	18ed      	adds	r5, r5, r3
    2dde:	0003      	movs	r3, r0
    2de0:	01e8      	lsls	r0, r5, #7
    2de2:	d504      	bpl.n	2dee <__aeabi_dmul+0x3b2>
    2de4:	4a4f      	ldr	r2, [pc, #316]	; (2f24 <__aeabi_dmul+0x4e8>)
    2de6:	4015      	ands	r5, r2
    2de8:	2280      	movs	r2, #128	; 0x80
    2dea:	00d2      	lsls	r2, r2, #3
    2dec:	18b2      	adds	r2, r6, r2
    2dee:	484e      	ldr	r0, [pc, #312]	; (2f28 <__aeabi_dmul+0x4ec>)
    2df0:	4282      	cmp	r2, r0
    2df2:	dd00      	ble.n	2df6 <__aeabi_dmul+0x3ba>
    2df4:	e6e7      	b.n	2bc6 <__aeabi_dmul+0x18a>
    2df6:	2401      	movs	r4, #1
    2df8:	08db      	lsrs	r3, r3, #3
    2dfa:	0768      	lsls	r0, r5, #29
    2dfc:	4318      	orrs	r0, r3
    2dfe:	026d      	lsls	r5, r5, #9
    2e00:	0553      	lsls	r3, r2, #21
    2e02:	4680      	mov	r8, r0
    2e04:	0b2d      	lsrs	r5, r5, #12
    2e06:	0d5b      	lsrs	r3, r3, #21
    2e08:	400c      	ands	r4, r1
    2e0a:	e67d      	b.n	2b08 <__aeabi_dmul+0xcc>
    2e0c:	2280      	movs	r2, #128	; 0x80
    2e0e:	4659      	mov	r1, fp
    2e10:	0312      	lsls	r2, r2, #12
    2e12:	4211      	tst	r1, r2
    2e14:	d008      	beq.n	2e28 <__aeabi_dmul+0x3ec>
    2e16:	4215      	tst	r5, r2
    2e18:	d106      	bne.n	2e28 <__aeabi_dmul+0x3ec>
    2e1a:	4315      	orrs	r5, r2
    2e1c:	032d      	lsls	r5, r5, #12
    2e1e:	4698      	mov	r8, r3
    2e20:	0b2d      	lsrs	r5, r5, #12
    2e22:	464c      	mov	r4, r9
    2e24:	4b41      	ldr	r3, [pc, #260]	; (2f2c <__aeabi_dmul+0x4f0>)
    2e26:	e66f      	b.n	2b08 <__aeabi_dmul+0xcc>
    2e28:	465d      	mov	r5, fp
    2e2a:	4315      	orrs	r5, r2
    2e2c:	032d      	lsls	r5, r5, #12
    2e2e:	0b2d      	lsrs	r5, r5, #12
    2e30:	4b3e      	ldr	r3, [pc, #248]	; (2f2c <__aeabi_dmul+0x4f0>)
    2e32:	e669      	b.n	2b08 <__aeabi_dmul+0xcc>
    2e34:	0003      	movs	r3, r0
    2e36:	4655      	mov	r5, sl
    2e38:	3b28      	subs	r3, #40	; 0x28
    2e3a:	409d      	lsls	r5, r3
    2e3c:	2300      	movs	r3, #0
    2e3e:	e6bc      	b.n	2bba <__aeabi_dmul+0x17e>
    2e40:	4650      	mov	r0, sl
    2e42:	f000 fc37 	bl	36b4 <__clzsi2>
    2e46:	3020      	adds	r0, #32
    2e48:	e6a8      	b.n	2b9c <__aeabi_dmul+0x160>
    2e4a:	0003      	movs	r3, r0
    2e4c:	3b28      	subs	r3, #40	; 0x28
    2e4e:	409f      	lsls	r7, r3
    2e50:	2300      	movs	r3, #0
    2e52:	46bb      	mov	fp, r7
    2e54:	4698      	mov	r8, r3
    2e56:	e689      	b.n	2b6c <__aeabi_dmul+0x130>
    2e58:	f000 fc2c 	bl	36b4 <__clzsi2>
    2e5c:	3020      	adds	r0, #32
    2e5e:	e673      	b.n	2b48 <__aeabi_dmul+0x10c>
    2e60:	2401      	movs	r4, #1
    2e62:	1aa6      	subs	r6, r4, r2
    2e64:	2e38      	cmp	r6, #56	; 0x38
    2e66:	dd07      	ble.n	2e78 <__aeabi_dmul+0x43c>
    2e68:	2200      	movs	r2, #0
    2e6a:	400c      	ands	r4, r1
    2e6c:	2300      	movs	r3, #0
    2e6e:	2500      	movs	r5, #0
    2e70:	4690      	mov	r8, r2
    2e72:	e649      	b.n	2b08 <__aeabi_dmul+0xcc>
    2e74:	9e02      	ldr	r6, [sp, #8]
    2e76:	e7a3      	b.n	2dc0 <__aeabi_dmul+0x384>
    2e78:	2e1f      	cmp	r6, #31
    2e7a:	dc20      	bgt.n	2ebe <__aeabi_dmul+0x482>
    2e7c:	2220      	movs	r2, #32
    2e7e:	002c      	movs	r4, r5
    2e80:	0018      	movs	r0, r3
    2e82:	1b92      	subs	r2, r2, r6
    2e84:	40f0      	lsrs	r0, r6
    2e86:	4094      	lsls	r4, r2
    2e88:	4093      	lsls	r3, r2
    2e8a:	4304      	orrs	r4, r0
    2e8c:	1e58      	subs	r0, r3, #1
    2e8e:	4183      	sbcs	r3, r0
    2e90:	431c      	orrs	r4, r3
    2e92:	40f5      	lsrs	r5, r6
    2e94:	0763      	lsls	r3, r4, #29
    2e96:	d009      	beq.n	2eac <__aeabi_dmul+0x470>
    2e98:	230f      	movs	r3, #15
    2e9a:	4023      	ands	r3, r4
    2e9c:	2b04      	cmp	r3, #4
    2e9e:	d005      	beq.n	2eac <__aeabi_dmul+0x470>
    2ea0:	0023      	movs	r3, r4
    2ea2:	1d1c      	adds	r4, r3, #4
    2ea4:	429c      	cmp	r4, r3
    2ea6:	4192      	sbcs	r2, r2
    2ea8:	4252      	negs	r2, r2
    2eaa:	18ad      	adds	r5, r5, r2
    2eac:	022b      	lsls	r3, r5, #8
    2eae:	d51f      	bpl.n	2ef0 <__aeabi_dmul+0x4b4>
    2eb0:	2401      	movs	r4, #1
    2eb2:	2200      	movs	r2, #0
    2eb4:	400c      	ands	r4, r1
    2eb6:	2301      	movs	r3, #1
    2eb8:	2500      	movs	r5, #0
    2eba:	4690      	mov	r8, r2
    2ebc:	e624      	b.n	2b08 <__aeabi_dmul+0xcc>
    2ebe:	201f      	movs	r0, #31
    2ec0:	002c      	movs	r4, r5
    2ec2:	4240      	negs	r0, r0
    2ec4:	1a82      	subs	r2, r0, r2
    2ec6:	40d4      	lsrs	r4, r2
    2ec8:	2e20      	cmp	r6, #32
    2eca:	d01c      	beq.n	2f06 <__aeabi_dmul+0x4ca>
    2ecc:	2240      	movs	r2, #64	; 0x40
    2ece:	1b96      	subs	r6, r2, r6
    2ed0:	40b5      	lsls	r5, r6
    2ed2:	432b      	orrs	r3, r5
    2ed4:	1e58      	subs	r0, r3, #1
    2ed6:	4183      	sbcs	r3, r0
    2ed8:	2007      	movs	r0, #7
    2eda:	4323      	orrs	r3, r4
    2edc:	4018      	ands	r0, r3
    2ede:	2500      	movs	r5, #0
    2ee0:	2800      	cmp	r0, #0
    2ee2:	d009      	beq.n	2ef8 <__aeabi_dmul+0x4bc>
    2ee4:	220f      	movs	r2, #15
    2ee6:	2500      	movs	r5, #0
    2ee8:	401a      	ands	r2, r3
    2eea:	001c      	movs	r4, r3
    2eec:	2a04      	cmp	r2, #4
    2eee:	d1d8      	bne.n	2ea2 <__aeabi_dmul+0x466>
    2ef0:	0023      	movs	r3, r4
    2ef2:	0768      	lsls	r0, r5, #29
    2ef4:	026d      	lsls	r5, r5, #9
    2ef6:	0b2d      	lsrs	r5, r5, #12
    2ef8:	2401      	movs	r4, #1
    2efa:	08db      	lsrs	r3, r3, #3
    2efc:	4303      	orrs	r3, r0
    2efe:	4698      	mov	r8, r3
    2f00:	400c      	ands	r4, r1
    2f02:	2300      	movs	r3, #0
    2f04:	e600      	b.n	2b08 <__aeabi_dmul+0xcc>
    2f06:	2500      	movs	r5, #0
    2f08:	e7e3      	b.n	2ed2 <__aeabi_dmul+0x496>
    2f0a:	2280      	movs	r2, #128	; 0x80
    2f0c:	2401      	movs	r4, #1
    2f0e:	0312      	lsls	r2, r2, #12
    2f10:	4315      	orrs	r5, r2
    2f12:	032d      	lsls	r5, r5, #12
    2f14:	4698      	mov	r8, r3
    2f16:	0b2d      	lsrs	r5, r5, #12
    2f18:	400c      	ands	r4, r1
    2f1a:	4b04      	ldr	r3, [pc, #16]	; (2f2c <__aeabi_dmul+0x4f0>)
    2f1c:	e5f4      	b.n	2b08 <__aeabi_dmul+0xcc>
    2f1e:	46c0      	nop			; (mov r8, r8)
    2f20:	000003ff 	.word	0x000003ff
    2f24:	feffffff 	.word	0xfeffffff
    2f28:	000007fe 	.word	0x000007fe
    2f2c:	000007ff 	.word	0x000007ff

00002f30 <__aeabi_dsub>:
    2f30:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f32:	4657      	mov	r7, sl
    2f34:	464e      	mov	r6, r9
    2f36:	4645      	mov	r5, r8
    2f38:	b4e0      	push	{r5, r6, r7}
    2f3a:	000e      	movs	r6, r1
    2f3c:	0011      	movs	r1, r2
    2f3e:	0ff2      	lsrs	r2, r6, #31
    2f40:	4692      	mov	sl, r2
    2f42:	00c5      	lsls	r5, r0, #3
    2f44:	0f42      	lsrs	r2, r0, #29
    2f46:	0318      	lsls	r0, r3, #12
    2f48:	0337      	lsls	r7, r6, #12
    2f4a:	0074      	lsls	r4, r6, #1
    2f4c:	0a40      	lsrs	r0, r0, #9
    2f4e:	0f4e      	lsrs	r6, r1, #29
    2f50:	0a7f      	lsrs	r7, r7, #9
    2f52:	4330      	orrs	r0, r6
    2f54:	4ecf      	ldr	r6, [pc, #828]	; (3294 <__aeabi_dsub+0x364>)
    2f56:	4317      	orrs	r7, r2
    2f58:	005a      	lsls	r2, r3, #1
    2f5a:	0d64      	lsrs	r4, r4, #21
    2f5c:	0d52      	lsrs	r2, r2, #21
    2f5e:	0fdb      	lsrs	r3, r3, #31
    2f60:	00c9      	lsls	r1, r1, #3
    2f62:	42b2      	cmp	r2, r6
    2f64:	d100      	bne.n	2f68 <__aeabi_dsub+0x38>
    2f66:	e0e5      	b.n	3134 <__aeabi_dsub+0x204>
    2f68:	2601      	movs	r6, #1
    2f6a:	4073      	eors	r3, r6
    2f6c:	1aa6      	subs	r6, r4, r2
    2f6e:	46b4      	mov	ip, r6
    2f70:	4553      	cmp	r3, sl
    2f72:	d100      	bne.n	2f76 <__aeabi_dsub+0x46>
    2f74:	e0af      	b.n	30d6 <__aeabi_dsub+0x1a6>
    2f76:	2e00      	cmp	r6, #0
    2f78:	dc00      	bgt.n	2f7c <__aeabi_dsub+0x4c>
    2f7a:	e10d      	b.n	3198 <__aeabi_dsub+0x268>
    2f7c:	2a00      	cmp	r2, #0
    2f7e:	d13a      	bne.n	2ff6 <__aeabi_dsub+0xc6>
    2f80:	0003      	movs	r3, r0
    2f82:	430b      	orrs	r3, r1
    2f84:	d000      	beq.n	2f88 <__aeabi_dsub+0x58>
    2f86:	e0e4      	b.n	3152 <__aeabi_dsub+0x222>
    2f88:	076b      	lsls	r3, r5, #29
    2f8a:	d009      	beq.n	2fa0 <__aeabi_dsub+0x70>
    2f8c:	230f      	movs	r3, #15
    2f8e:	402b      	ands	r3, r5
    2f90:	2b04      	cmp	r3, #4
    2f92:	d005      	beq.n	2fa0 <__aeabi_dsub+0x70>
    2f94:	1d2b      	adds	r3, r5, #4
    2f96:	42ab      	cmp	r3, r5
    2f98:	41ad      	sbcs	r5, r5
    2f9a:	426d      	negs	r5, r5
    2f9c:	197f      	adds	r7, r7, r5
    2f9e:	001d      	movs	r5, r3
    2fa0:	023b      	lsls	r3, r7, #8
    2fa2:	d400      	bmi.n	2fa6 <__aeabi_dsub+0x76>
    2fa4:	e088      	b.n	30b8 <__aeabi_dsub+0x188>
    2fa6:	4bbb      	ldr	r3, [pc, #748]	; (3294 <__aeabi_dsub+0x364>)
    2fa8:	3401      	adds	r4, #1
    2faa:	429c      	cmp	r4, r3
    2fac:	d100      	bne.n	2fb0 <__aeabi_dsub+0x80>
    2fae:	e110      	b.n	31d2 <__aeabi_dsub+0x2a2>
    2fb0:	003a      	movs	r2, r7
    2fb2:	4bb9      	ldr	r3, [pc, #740]	; (3298 <__aeabi_dsub+0x368>)
    2fb4:	4651      	mov	r1, sl
    2fb6:	401a      	ands	r2, r3
    2fb8:	2301      	movs	r3, #1
    2fba:	0750      	lsls	r0, r2, #29
    2fbc:	08ed      	lsrs	r5, r5, #3
    2fbe:	0252      	lsls	r2, r2, #9
    2fc0:	0564      	lsls	r4, r4, #21
    2fc2:	4305      	orrs	r5, r0
    2fc4:	0b12      	lsrs	r2, r2, #12
    2fc6:	0d64      	lsrs	r4, r4, #21
    2fc8:	400b      	ands	r3, r1
    2fca:	2100      	movs	r1, #0
    2fcc:	0028      	movs	r0, r5
    2fce:	0312      	lsls	r2, r2, #12
    2fd0:	0d0d      	lsrs	r5, r1, #20
    2fd2:	0b12      	lsrs	r2, r2, #12
    2fd4:	0564      	lsls	r4, r4, #21
    2fd6:	052d      	lsls	r5, r5, #20
    2fd8:	4315      	orrs	r5, r2
    2fda:	0862      	lsrs	r2, r4, #1
    2fdc:	4caf      	ldr	r4, [pc, #700]	; (329c <__aeabi_dsub+0x36c>)
    2fde:	07db      	lsls	r3, r3, #31
    2fe0:	402c      	ands	r4, r5
    2fe2:	4314      	orrs	r4, r2
    2fe4:	0064      	lsls	r4, r4, #1
    2fe6:	0864      	lsrs	r4, r4, #1
    2fe8:	431c      	orrs	r4, r3
    2fea:	0021      	movs	r1, r4
    2fec:	bc1c      	pop	{r2, r3, r4}
    2fee:	4690      	mov	r8, r2
    2ff0:	4699      	mov	r9, r3
    2ff2:	46a2      	mov	sl, r4
    2ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ff6:	4ba7      	ldr	r3, [pc, #668]	; (3294 <__aeabi_dsub+0x364>)
    2ff8:	429c      	cmp	r4, r3
    2ffa:	d0c5      	beq.n	2f88 <__aeabi_dsub+0x58>
    2ffc:	2380      	movs	r3, #128	; 0x80
    2ffe:	041b      	lsls	r3, r3, #16
    3000:	4318      	orrs	r0, r3
    3002:	4663      	mov	r3, ip
    3004:	2b38      	cmp	r3, #56	; 0x38
    3006:	dd00      	ble.n	300a <__aeabi_dsub+0xda>
    3008:	e0fd      	b.n	3206 <__aeabi_dsub+0x2d6>
    300a:	2b1f      	cmp	r3, #31
    300c:	dd00      	ble.n	3010 <__aeabi_dsub+0xe0>
    300e:	e130      	b.n	3272 <__aeabi_dsub+0x342>
    3010:	4662      	mov	r2, ip
    3012:	2320      	movs	r3, #32
    3014:	1a9b      	subs	r3, r3, r2
    3016:	0002      	movs	r2, r0
    3018:	409a      	lsls	r2, r3
    301a:	4666      	mov	r6, ip
    301c:	4690      	mov	r8, r2
    301e:	000a      	movs	r2, r1
    3020:	4099      	lsls	r1, r3
    3022:	40f2      	lsrs	r2, r6
    3024:	4646      	mov	r6, r8
    3026:	1e4b      	subs	r3, r1, #1
    3028:	4199      	sbcs	r1, r3
    302a:	4332      	orrs	r2, r6
    302c:	4311      	orrs	r1, r2
    302e:	4663      	mov	r3, ip
    3030:	0002      	movs	r2, r0
    3032:	40da      	lsrs	r2, r3
    3034:	1a69      	subs	r1, r5, r1
    3036:	428d      	cmp	r5, r1
    3038:	419b      	sbcs	r3, r3
    303a:	000d      	movs	r5, r1
    303c:	1aba      	subs	r2, r7, r2
    303e:	425b      	negs	r3, r3
    3040:	1ad7      	subs	r7, r2, r3
    3042:	023b      	lsls	r3, r7, #8
    3044:	d535      	bpl.n	30b2 <__aeabi_dsub+0x182>
    3046:	027a      	lsls	r2, r7, #9
    3048:	0a53      	lsrs	r3, r2, #9
    304a:	4698      	mov	r8, r3
    304c:	4643      	mov	r3, r8
    304e:	2b00      	cmp	r3, #0
    3050:	d100      	bne.n	3054 <__aeabi_dsub+0x124>
    3052:	e0c4      	b.n	31de <__aeabi_dsub+0x2ae>
    3054:	4640      	mov	r0, r8
    3056:	f000 fb2d 	bl	36b4 <__clzsi2>
    305a:	0003      	movs	r3, r0
    305c:	3b08      	subs	r3, #8
    305e:	2b1f      	cmp	r3, #31
    3060:	dd00      	ble.n	3064 <__aeabi_dsub+0x134>
    3062:	e0c5      	b.n	31f0 <__aeabi_dsub+0x2c0>
    3064:	2220      	movs	r2, #32
    3066:	0029      	movs	r1, r5
    3068:	1ad2      	subs	r2, r2, r3
    306a:	4647      	mov	r7, r8
    306c:	40d1      	lsrs	r1, r2
    306e:	409f      	lsls	r7, r3
    3070:	000a      	movs	r2, r1
    3072:	409d      	lsls	r5, r3
    3074:	433a      	orrs	r2, r7
    3076:	429c      	cmp	r4, r3
    3078:	dd00      	ble.n	307c <__aeabi_dsub+0x14c>
    307a:	e0c0      	b.n	31fe <__aeabi_dsub+0x2ce>
    307c:	1b1c      	subs	r4, r3, r4
    307e:	1c63      	adds	r3, r4, #1
    3080:	2b1f      	cmp	r3, #31
    3082:	dd00      	ble.n	3086 <__aeabi_dsub+0x156>
    3084:	e0e4      	b.n	3250 <__aeabi_dsub+0x320>
    3086:	2120      	movs	r1, #32
    3088:	0014      	movs	r4, r2
    308a:	0028      	movs	r0, r5
    308c:	1ac9      	subs	r1, r1, r3
    308e:	40d8      	lsrs	r0, r3
    3090:	408c      	lsls	r4, r1
    3092:	408d      	lsls	r5, r1
    3094:	4304      	orrs	r4, r0
    3096:	40da      	lsrs	r2, r3
    3098:	1e68      	subs	r0, r5, #1
    309a:	4185      	sbcs	r5, r0
    309c:	0017      	movs	r7, r2
    309e:	4325      	orrs	r5, r4
    30a0:	2400      	movs	r4, #0
    30a2:	e771      	b.n	2f88 <__aeabi_dsub+0x58>
    30a4:	4642      	mov	r2, r8
    30a6:	4663      	mov	r3, ip
    30a8:	431a      	orrs	r2, r3
    30aa:	d100      	bne.n	30ae <__aeabi_dsub+0x17e>
    30ac:	e24c      	b.n	3548 <__aeabi_dsub+0x618>
    30ae:	4667      	mov	r7, ip
    30b0:	4645      	mov	r5, r8
    30b2:	076b      	lsls	r3, r5, #29
    30b4:	d000      	beq.n	30b8 <__aeabi_dsub+0x188>
    30b6:	e769      	b.n	2f8c <__aeabi_dsub+0x5c>
    30b8:	2301      	movs	r3, #1
    30ba:	4651      	mov	r1, sl
    30bc:	0778      	lsls	r0, r7, #29
    30be:	08ed      	lsrs	r5, r5, #3
    30c0:	08fa      	lsrs	r2, r7, #3
    30c2:	400b      	ands	r3, r1
    30c4:	4305      	orrs	r5, r0
    30c6:	4973      	ldr	r1, [pc, #460]	; (3294 <__aeabi_dsub+0x364>)
    30c8:	428c      	cmp	r4, r1
    30ca:	d038      	beq.n	313e <__aeabi_dsub+0x20e>
    30cc:	0312      	lsls	r2, r2, #12
    30ce:	0564      	lsls	r4, r4, #21
    30d0:	0b12      	lsrs	r2, r2, #12
    30d2:	0d64      	lsrs	r4, r4, #21
    30d4:	e779      	b.n	2fca <__aeabi_dsub+0x9a>
    30d6:	2e00      	cmp	r6, #0
    30d8:	dc00      	bgt.n	30dc <__aeabi_dsub+0x1ac>
    30da:	e09a      	b.n	3212 <__aeabi_dsub+0x2e2>
    30dc:	2a00      	cmp	r2, #0
    30de:	d047      	beq.n	3170 <__aeabi_dsub+0x240>
    30e0:	4a6c      	ldr	r2, [pc, #432]	; (3294 <__aeabi_dsub+0x364>)
    30e2:	4294      	cmp	r4, r2
    30e4:	d100      	bne.n	30e8 <__aeabi_dsub+0x1b8>
    30e6:	e74f      	b.n	2f88 <__aeabi_dsub+0x58>
    30e8:	2280      	movs	r2, #128	; 0x80
    30ea:	0412      	lsls	r2, r2, #16
    30ec:	4310      	orrs	r0, r2
    30ee:	4662      	mov	r2, ip
    30f0:	2a38      	cmp	r2, #56	; 0x38
    30f2:	dc00      	bgt.n	30f6 <__aeabi_dsub+0x1c6>
    30f4:	e108      	b.n	3308 <__aeabi_dsub+0x3d8>
    30f6:	4301      	orrs	r1, r0
    30f8:	1e48      	subs	r0, r1, #1
    30fa:	4181      	sbcs	r1, r0
    30fc:	2200      	movs	r2, #0
    30fe:	b2c9      	uxtb	r1, r1
    3100:	1949      	adds	r1, r1, r5
    3102:	19d2      	adds	r2, r2, r7
    3104:	42a9      	cmp	r1, r5
    3106:	41bf      	sbcs	r7, r7
    3108:	000d      	movs	r5, r1
    310a:	427f      	negs	r7, r7
    310c:	18bf      	adds	r7, r7, r2
    310e:	023a      	lsls	r2, r7, #8
    3110:	d400      	bmi.n	3114 <__aeabi_dsub+0x1e4>
    3112:	e142      	b.n	339a <__aeabi_dsub+0x46a>
    3114:	4a5f      	ldr	r2, [pc, #380]	; (3294 <__aeabi_dsub+0x364>)
    3116:	3401      	adds	r4, #1
    3118:	4294      	cmp	r4, r2
    311a:	d100      	bne.n	311e <__aeabi_dsub+0x1ee>
    311c:	e14e      	b.n	33bc <__aeabi_dsub+0x48c>
    311e:	2001      	movs	r0, #1
    3120:	4a5d      	ldr	r2, [pc, #372]	; (3298 <__aeabi_dsub+0x368>)
    3122:	0869      	lsrs	r1, r5, #1
    3124:	403a      	ands	r2, r7
    3126:	4028      	ands	r0, r5
    3128:	4308      	orrs	r0, r1
    312a:	07d5      	lsls	r5, r2, #31
    312c:	4305      	orrs	r5, r0
    312e:	0857      	lsrs	r7, r2, #1
    3130:	469a      	mov	sl, r3
    3132:	e729      	b.n	2f88 <__aeabi_dsub+0x58>
    3134:	0006      	movs	r6, r0
    3136:	430e      	orrs	r6, r1
    3138:	d000      	beq.n	313c <__aeabi_dsub+0x20c>
    313a:	e717      	b.n	2f6c <__aeabi_dsub+0x3c>
    313c:	e714      	b.n	2f68 <__aeabi_dsub+0x38>
    313e:	0029      	movs	r1, r5
    3140:	4311      	orrs	r1, r2
    3142:	d100      	bne.n	3146 <__aeabi_dsub+0x216>
    3144:	e1f9      	b.n	353a <__aeabi_dsub+0x60a>
    3146:	2180      	movs	r1, #128	; 0x80
    3148:	0309      	lsls	r1, r1, #12
    314a:	430a      	orrs	r2, r1
    314c:	0312      	lsls	r2, r2, #12
    314e:	0b12      	lsrs	r2, r2, #12
    3150:	e73b      	b.n	2fca <__aeabi_dsub+0x9a>
    3152:	2301      	movs	r3, #1
    3154:	425b      	negs	r3, r3
    3156:	4698      	mov	r8, r3
    3158:	44c4      	add	ip, r8
    315a:	4663      	mov	r3, ip
    315c:	2b00      	cmp	r3, #0
    315e:	d172      	bne.n	3246 <__aeabi_dsub+0x316>
    3160:	1a69      	subs	r1, r5, r1
    3162:	428d      	cmp	r5, r1
    3164:	419b      	sbcs	r3, r3
    3166:	1a3f      	subs	r7, r7, r0
    3168:	425b      	negs	r3, r3
    316a:	1aff      	subs	r7, r7, r3
    316c:	000d      	movs	r5, r1
    316e:	e768      	b.n	3042 <__aeabi_dsub+0x112>
    3170:	0002      	movs	r2, r0
    3172:	430a      	orrs	r2, r1
    3174:	d100      	bne.n	3178 <__aeabi_dsub+0x248>
    3176:	e707      	b.n	2f88 <__aeabi_dsub+0x58>
    3178:	2201      	movs	r2, #1
    317a:	4252      	negs	r2, r2
    317c:	4690      	mov	r8, r2
    317e:	44c4      	add	ip, r8
    3180:	4662      	mov	r2, ip
    3182:	2a00      	cmp	r2, #0
    3184:	d000      	beq.n	3188 <__aeabi_dsub+0x258>
    3186:	e0e6      	b.n	3356 <__aeabi_dsub+0x426>
    3188:	1869      	adds	r1, r5, r1
    318a:	42a9      	cmp	r1, r5
    318c:	41b6      	sbcs	r6, r6
    318e:	183f      	adds	r7, r7, r0
    3190:	4276      	negs	r6, r6
    3192:	19f7      	adds	r7, r6, r7
    3194:	000d      	movs	r5, r1
    3196:	e7ba      	b.n	310e <__aeabi_dsub+0x1de>
    3198:	2e00      	cmp	r6, #0
    319a:	d000      	beq.n	319e <__aeabi_dsub+0x26e>
    319c:	e080      	b.n	32a0 <__aeabi_dsub+0x370>
    319e:	1c62      	adds	r2, r4, #1
    31a0:	0552      	lsls	r2, r2, #21
    31a2:	0d52      	lsrs	r2, r2, #21
    31a4:	2a01      	cmp	r2, #1
    31a6:	dc00      	bgt.n	31aa <__aeabi_dsub+0x27a>
    31a8:	e0f9      	b.n	339e <__aeabi_dsub+0x46e>
    31aa:	1a6a      	subs	r2, r5, r1
    31ac:	4691      	mov	r9, r2
    31ae:	454d      	cmp	r5, r9
    31b0:	41b6      	sbcs	r6, r6
    31b2:	1a3a      	subs	r2, r7, r0
    31b4:	4276      	negs	r6, r6
    31b6:	1b92      	subs	r2, r2, r6
    31b8:	4690      	mov	r8, r2
    31ba:	0212      	lsls	r2, r2, #8
    31bc:	d400      	bmi.n	31c0 <__aeabi_dsub+0x290>
    31be:	e099      	b.n	32f4 <__aeabi_dsub+0x3c4>
    31c0:	1b4d      	subs	r5, r1, r5
    31c2:	42a9      	cmp	r1, r5
    31c4:	4189      	sbcs	r1, r1
    31c6:	1bc7      	subs	r7, r0, r7
    31c8:	4249      	negs	r1, r1
    31ca:	1a7a      	subs	r2, r7, r1
    31cc:	4690      	mov	r8, r2
    31ce:	469a      	mov	sl, r3
    31d0:	e73c      	b.n	304c <__aeabi_dsub+0x11c>
    31d2:	4652      	mov	r2, sl
    31d4:	2301      	movs	r3, #1
    31d6:	2500      	movs	r5, #0
    31d8:	4013      	ands	r3, r2
    31da:	2200      	movs	r2, #0
    31dc:	e6f5      	b.n	2fca <__aeabi_dsub+0x9a>
    31de:	0028      	movs	r0, r5
    31e0:	f000 fa68 	bl	36b4 <__clzsi2>
    31e4:	3020      	adds	r0, #32
    31e6:	0003      	movs	r3, r0
    31e8:	3b08      	subs	r3, #8
    31ea:	2b1f      	cmp	r3, #31
    31ec:	dc00      	bgt.n	31f0 <__aeabi_dsub+0x2c0>
    31ee:	e739      	b.n	3064 <__aeabi_dsub+0x134>
    31f0:	002a      	movs	r2, r5
    31f2:	3828      	subs	r0, #40	; 0x28
    31f4:	4082      	lsls	r2, r0
    31f6:	2500      	movs	r5, #0
    31f8:	429c      	cmp	r4, r3
    31fa:	dc00      	bgt.n	31fe <__aeabi_dsub+0x2ce>
    31fc:	e73e      	b.n	307c <__aeabi_dsub+0x14c>
    31fe:	4f26      	ldr	r7, [pc, #152]	; (3298 <__aeabi_dsub+0x368>)
    3200:	1ae4      	subs	r4, r4, r3
    3202:	4017      	ands	r7, r2
    3204:	e6c0      	b.n	2f88 <__aeabi_dsub+0x58>
    3206:	4301      	orrs	r1, r0
    3208:	1e48      	subs	r0, r1, #1
    320a:	4181      	sbcs	r1, r0
    320c:	2200      	movs	r2, #0
    320e:	b2c9      	uxtb	r1, r1
    3210:	e710      	b.n	3034 <__aeabi_dsub+0x104>
    3212:	2e00      	cmp	r6, #0
    3214:	d000      	beq.n	3218 <__aeabi_dsub+0x2e8>
    3216:	e0f1      	b.n	33fc <__aeabi_dsub+0x4cc>
    3218:	1c62      	adds	r2, r4, #1
    321a:	4694      	mov	ip, r2
    321c:	0552      	lsls	r2, r2, #21
    321e:	0d52      	lsrs	r2, r2, #21
    3220:	2a01      	cmp	r2, #1
    3222:	dc00      	bgt.n	3226 <__aeabi_dsub+0x2f6>
    3224:	e0a0      	b.n	3368 <__aeabi_dsub+0x438>
    3226:	4a1b      	ldr	r2, [pc, #108]	; (3294 <__aeabi_dsub+0x364>)
    3228:	4594      	cmp	ip, r2
    322a:	d100      	bne.n	322e <__aeabi_dsub+0x2fe>
    322c:	e0c5      	b.n	33ba <__aeabi_dsub+0x48a>
    322e:	1869      	adds	r1, r5, r1
    3230:	42a9      	cmp	r1, r5
    3232:	4192      	sbcs	r2, r2
    3234:	183f      	adds	r7, r7, r0
    3236:	4252      	negs	r2, r2
    3238:	19d2      	adds	r2, r2, r7
    323a:	0849      	lsrs	r1, r1, #1
    323c:	07d5      	lsls	r5, r2, #31
    323e:	430d      	orrs	r5, r1
    3240:	0857      	lsrs	r7, r2, #1
    3242:	4664      	mov	r4, ip
    3244:	e6a0      	b.n	2f88 <__aeabi_dsub+0x58>
    3246:	4b13      	ldr	r3, [pc, #76]	; (3294 <__aeabi_dsub+0x364>)
    3248:	429c      	cmp	r4, r3
    324a:	d000      	beq.n	324e <__aeabi_dsub+0x31e>
    324c:	e6d9      	b.n	3002 <__aeabi_dsub+0xd2>
    324e:	e69b      	b.n	2f88 <__aeabi_dsub+0x58>
    3250:	0011      	movs	r1, r2
    3252:	3c1f      	subs	r4, #31
    3254:	40e1      	lsrs	r1, r4
    3256:	000c      	movs	r4, r1
    3258:	2b20      	cmp	r3, #32
    325a:	d100      	bne.n	325e <__aeabi_dsub+0x32e>
    325c:	e080      	b.n	3360 <__aeabi_dsub+0x430>
    325e:	2140      	movs	r1, #64	; 0x40
    3260:	1acb      	subs	r3, r1, r3
    3262:	409a      	lsls	r2, r3
    3264:	4315      	orrs	r5, r2
    3266:	1e6a      	subs	r2, r5, #1
    3268:	4195      	sbcs	r5, r2
    326a:	2700      	movs	r7, #0
    326c:	4325      	orrs	r5, r4
    326e:	2400      	movs	r4, #0
    3270:	e71f      	b.n	30b2 <__aeabi_dsub+0x182>
    3272:	4663      	mov	r3, ip
    3274:	0002      	movs	r2, r0
    3276:	3b20      	subs	r3, #32
    3278:	40da      	lsrs	r2, r3
    327a:	4663      	mov	r3, ip
    327c:	2b20      	cmp	r3, #32
    327e:	d071      	beq.n	3364 <__aeabi_dsub+0x434>
    3280:	2340      	movs	r3, #64	; 0x40
    3282:	4666      	mov	r6, ip
    3284:	1b9b      	subs	r3, r3, r6
    3286:	4098      	lsls	r0, r3
    3288:	4301      	orrs	r1, r0
    328a:	1e48      	subs	r0, r1, #1
    328c:	4181      	sbcs	r1, r0
    328e:	4311      	orrs	r1, r2
    3290:	2200      	movs	r2, #0
    3292:	e6cf      	b.n	3034 <__aeabi_dsub+0x104>
    3294:	000007ff 	.word	0x000007ff
    3298:	ff7fffff 	.word	0xff7fffff
    329c:	800fffff 	.word	0x800fffff
    32a0:	2c00      	cmp	r4, #0
    32a2:	d048      	beq.n	3336 <__aeabi_dsub+0x406>
    32a4:	4cca      	ldr	r4, [pc, #808]	; (35d0 <__aeabi_dsub+0x6a0>)
    32a6:	42a2      	cmp	r2, r4
    32a8:	d100      	bne.n	32ac <__aeabi_dsub+0x37c>
    32aa:	e0a2      	b.n	33f2 <__aeabi_dsub+0x4c2>
    32ac:	4274      	negs	r4, r6
    32ae:	46a1      	mov	r9, r4
    32b0:	2480      	movs	r4, #128	; 0x80
    32b2:	0424      	lsls	r4, r4, #16
    32b4:	4327      	orrs	r7, r4
    32b6:	464c      	mov	r4, r9
    32b8:	2c38      	cmp	r4, #56	; 0x38
    32ba:	dd00      	ble.n	32be <__aeabi_dsub+0x38e>
    32bc:	e0db      	b.n	3476 <__aeabi_dsub+0x546>
    32be:	2c1f      	cmp	r4, #31
    32c0:	dd00      	ble.n	32c4 <__aeabi_dsub+0x394>
    32c2:	e144      	b.n	354e <__aeabi_dsub+0x61e>
    32c4:	464e      	mov	r6, r9
    32c6:	2420      	movs	r4, #32
    32c8:	1ba4      	subs	r4, r4, r6
    32ca:	003e      	movs	r6, r7
    32cc:	40a6      	lsls	r6, r4
    32ce:	46a2      	mov	sl, r4
    32d0:	46b0      	mov	r8, r6
    32d2:	464c      	mov	r4, r9
    32d4:	002e      	movs	r6, r5
    32d6:	40e6      	lsrs	r6, r4
    32d8:	46b4      	mov	ip, r6
    32da:	4646      	mov	r6, r8
    32dc:	4664      	mov	r4, ip
    32de:	4326      	orrs	r6, r4
    32e0:	4654      	mov	r4, sl
    32e2:	40a5      	lsls	r5, r4
    32e4:	1e6c      	subs	r4, r5, #1
    32e6:	41a5      	sbcs	r5, r4
    32e8:	0034      	movs	r4, r6
    32ea:	432c      	orrs	r4, r5
    32ec:	464d      	mov	r5, r9
    32ee:	40ef      	lsrs	r7, r5
    32f0:	1b0d      	subs	r5, r1, r4
    32f2:	e028      	b.n	3346 <__aeabi_dsub+0x416>
    32f4:	464a      	mov	r2, r9
    32f6:	4643      	mov	r3, r8
    32f8:	464d      	mov	r5, r9
    32fa:	431a      	orrs	r2, r3
    32fc:	d000      	beq.n	3300 <__aeabi_dsub+0x3d0>
    32fe:	e6a5      	b.n	304c <__aeabi_dsub+0x11c>
    3300:	2300      	movs	r3, #0
    3302:	2400      	movs	r4, #0
    3304:	2500      	movs	r5, #0
    3306:	e6de      	b.n	30c6 <__aeabi_dsub+0x196>
    3308:	2a1f      	cmp	r2, #31
    330a:	dc5a      	bgt.n	33c2 <__aeabi_dsub+0x492>
    330c:	4666      	mov	r6, ip
    330e:	2220      	movs	r2, #32
    3310:	1b92      	subs	r2, r2, r6
    3312:	0006      	movs	r6, r0
    3314:	4096      	lsls	r6, r2
    3316:	4691      	mov	r9, r2
    3318:	46b0      	mov	r8, r6
    331a:	4662      	mov	r2, ip
    331c:	000e      	movs	r6, r1
    331e:	40d6      	lsrs	r6, r2
    3320:	4642      	mov	r2, r8
    3322:	4316      	orrs	r6, r2
    3324:	464a      	mov	r2, r9
    3326:	4091      	lsls	r1, r2
    3328:	1e4a      	subs	r2, r1, #1
    332a:	4191      	sbcs	r1, r2
    332c:	0002      	movs	r2, r0
    332e:	4660      	mov	r0, ip
    3330:	4331      	orrs	r1, r6
    3332:	40c2      	lsrs	r2, r0
    3334:	e6e4      	b.n	3100 <__aeabi_dsub+0x1d0>
    3336:	003c      	movs	r4, r7
    3338:	432c      	orrs	r4, r5
    333a:	d05a      	beq.n	33f2 <__aeabi_dsub+0x4c2>
    333c:	43f4      	mvns	r4, r6
    333e:	46a1      	mov	r9, r4
    3340:	2c00      	cmp	r4, #0
    3342:	d152      	bne.n	33ea <__aeabi_dsub+0x4ba>
    3344:	1b4d      	subs	r5, r1, r5
    3346:	42a9      	cmp	r1, r5
    3348:	4189      	sbcs	r1, r1
    334a:	1bc7      	subs	r7, r0, r7
    334c:	4249      	negs	r1, r1
    334e:	1a7f      	subs	r7, r7, r1
    3350:	0014      	movs	r4, r2
    3352:	469a      	mov	sl, r3
    3354:	e675      	b.n	3042 <__aeabi_dsub+0x112>
    3356:	4a9e      	ldr	r2, [pc, #632]	; (35d0 <__aeabi_dsub+0x6a0>)
    3358:	4294      	cmp	r4, r2
    335a:	d000      	beq.n	335e <__aeabi_dsub+0x42e>
    335c:	e6c7      	b.n	30ee <__aeabi_dsub+0x1be>
    335e:	e613      	b.n	2f88 <__aeabi_dsub+0x58>
    3360:	2200      	movs	r2, #0
    3362:	e77f      	b.n	3264 <__aeabi_dsub+0x334>
    3364:	2000      	movs	r0, #0
    3366:	e78f      	b.n	3288 <__aeabi_dsub+0x358>
    3368:	2c00      	cmp	r4, #0
    336a:	d000      	beq.n	336e <__aeabi_dsub+0x43e>
    336c:	e0c8      	b.n	3500 <__aeabi_dsub+0x5d0>
    336e:	003b      	movs	r3, r7
    3370:	432b      	orrs	r3, r5
    3372:	d100      	bne.n	3376 <__aeabi_dsub+0x446>
    3374:	e10f      	b.n	3596 <__aeabi_dsub+0x666>
    3376:	0003      	movs	r3, r0
    3378:	430b      	orrs	r3, r1
    337a:	d100      	bne.n	337e <__aeabi_dsub+0x44e>
    337c:	e604      	b.n	2f88 <__aeabi_dsub+0x58>
    337e:	1869      	adds	r1, r5, r1
    3380:	42a9      	cmp	r1, r5
    3382:	419b      	sbcs	r3, r3
    3384:	183f      	adds	r7, r7, r0
    3386:	425b      	negs	r3, r3
    3388:	19df      	adds	r7, r3, r7
    338a:	023b      	lsls	r3, r7, #8
    338c:	d400      	bmi.n	3390 <__aeabi_dsub+0x460>
    338e:	e11a      	b.n	35c6 <__aeabi_dsub+0x696>
    3390:	4b90      	ldr	r3, [pc, #576]	; (35d4 <__aeabi_dsub+0x6a4>)
    3392:	000d      	movs	r5, r1
    3394:	401f      	ands	r7, r3
    3396:	4664      	mov	r4, ip
    3398:	e5f6      	b.n	2f88 <__aeabi_dsub+0x58>
    339a:	469a      	mov	sl, r3
    339c:	e689      	b.n	30b2 <__aeabi_dsub+0x182>
    339e:	003a      	movs	r2, r7
    33a0:	432a      	orrs	r2, r5
    33a2:	2c00      	cmp	r4, #0
    33a4:	d15c      	bne.n	3460 <__aeabi_dsub+0x530>
    33a6:	2a00      	cmp	r2, #0
    33a8:	d175      	bne.n	3496 <__aeabi_dsub+0x566>
    33aa:	0002      	movs	r2, r0
    33ac:	430a      	orrs	r2, r1
    33ae:	d100      	bne.n	33b2 <__aeabi_dsub+0x482>
    33b0:	e0ca      	b.n	3548 <__aeabi_dsub+0x618>
    33b2:	0007      	movs	r7, r0
    33b4:	000d      	movs	r5, r1
    33b6:	469a      	mov	sl, r3
    33b8:	e5e6      	b.n	2f88 <__aeabi_dsub+0x58>
    33ba:	4664      	mov	r4, ip
    33bc:	2200      	movs	r2, #0
    33be:	2500      	movs	r5, #0
    33c0:	e681      	b.n	30c6 <__aeabi_dsub+0x196>
    33c2:	4662      	mov	r2, ip
    33c4:	0006      	movs	r6, r0
    33c6:	3a20      	subs	r2, #32
    33c8:	40d6      	lsrs	r6, r2
    33ca:	4662      	mov	r2, ip
    33cc:	46b0      	mov	r8, r6
    33ce:	2a20      	cmp	r2, #32
    33d0:	d100      	bne.n	33d4 <__aeabi_dsub+0x4a4>
    33d2:	e0b7      	b.n	3544 <__aeabi_dsub+0x614>
    33d4:	2240      	movs	r2, #64	; 0x40
    33d6:	4666      	mov	r6, ip
    33d8:	1b92      	subs	r2, r2, r6
    33da:	4090      	lsls	r0, r2
    33dc:	4301      	orrs	r1, r0
    33de:	4642      	mov	r2, r8
    33e0:	1e48      	subs	r0, r1, #1
    33e2:	4181      	sbcs	r1, r0
    33e4:	4311      	orrs	r1, r2
    33e6:	2200      	movs	r2, #0
    33e8:	e68a      	b.n	3100 <__aeabi_dsub+0x1d0>
    33ea:	4c79      	ldr	r4, [pc, #484]	; (35d0 <__aeabi_dsub+0x6a0>)
    33ec:	42a2      	cmp	r2, r4
    33ee:	d000      	beq.n	33f2 <__aeabi_dsub+0x4c2>
    33f0:	e761      	b.n	32b6 <__aeabi_dsub+0x386>
    33f2:	0007      	movs	r7, r0
    33f4:	000d      	movs	r5, r1
    33f6:	0014      	movs	r4, r2
    33f8:	469a      	mov	sl, r3
    33fa:	e5c5      	b.n	2f88 <__aeabi_dsub+0x58>
    33fc:	2c00      	cmp	r4, #0
    33fe:	d141      	bne.n	3484 <__aeabi_dsub+0x554>
    3400:	003c      	movs	r4, r7
    3402:	432c      	orrs	r4, r5
    3404:	d078      	beq.n	34f8 <__aeabi_dsub+0x5c8>
    3406:	43f4      	mvns	r4, r6
    3408:	46a1      	mov	r9, r4
    340a:	2c00      	cmp	r4, #0
    340c:	d020      	beq.n	3450 <__aeabi_dsub+0x520>
    340e:	4c70      	ldr	r4, [pc, #448]	; (35d0 <__aeabi_dsub+0x6a0>)
    3410:	42a2      	cmp	r2, r4
    3412:	d071      	beq.n	34f8 <__aeabi_dsub+0x5c8>
    3414:	464c      	mov	r4, r9
    3416:	2c38      	cmp	r4, #56	; 0x38
    3418:	dd00      	ble.n	341c <__aeabi_dsub+0x4ec>
    341a:	e0b2      	b.n	3582 <__aeabi_dsub+0x652>
    341c:	2c1f      	cmp	r4, #31
    341e:	dd00      	ble.n	3422 <__aeabi_dsub+0x4f2>
    3420:	e0bc      	b.n	359c <__aeabi_dsub+0x66c>
    3422:	2620      	movs	r6, #32
    3424:	1b34      	subs	r4, r6, r4
    3426:	46a2      	mov	sl, r4
    3428:	003c      	movs	r4, r7
    342a:	4656      	mov	r6, sl
    342c:	40b4      	lsls	r4, r6
    342e:	464e      	mov	r6, r9
    3430:	46a0      	mov	r8, r4
    3432:	002c      	movs	r4, r5
    3434:	40f4      	lsrs	r4, r6
    3436:	46a4      	mov	ip, r4
    3438:	4644      	mov	r4, r8
    343a:	4666      	mov	r6, ip
    343c:	4334      	orrs	r4, r6
    343e:	46a4      	mov	ip, r4
    3440:	4654      	mov	r4, sl
    3442:	40a5      	lsls	r5, r4
    3444:	4664      	mov	r4, ip
    3446:	1e6e      	subs	r6, r5, #1
    3448:	41b5      	sbcs	r5, r6
    344a:	4325      	orrs	r5, r4
    344c:	464c      	mov	r4, r9
    344e:	40e7      	lsrs	r7, r4
    3450:	186d      	adds	r5, r5, r1
    3452:	428d      	cmp	r5, r1
    3454:	4189      	sbcs	r1, r1
    3456:	183f      	adds	r7, r7, r0
    3458:	4249      	negs	r1, r1
    345a:	19cf      	adds	r7, r1, r7
    345c:	0014      	movs	r4, r2
    345e:	e656      	b.n	310e <__aeabi_dsub+0x1de>
    3460:	2a00      	cmp	r2, #0
    3462:	d12f      	bne.n	34c4 <__aeabi_dsub+0x594>
    3464:	0002      	movs	r2, r0
    3466:	430a      	orrs	r2, r1
    3468:	d100      	bne.n	346c <__aeabi_dsub+0x53c>
    346a:	e084      	b.n	3576 <__aeabi_dsub+0x646>
    346c:	0007      	movs	r7, r0
    346e:	000d      	movs	r5, r1
    3470:	469a      	mov	sl, r3
    3472:	4c57      	ldr	r4, [pc, #348]	; (35d0 <__aeabi_dsub+0x6a0>)
    3474:	e588      	b.n	2f88 <__aeabi_dsub+0x58>
    3476:	433d      	orrs	r5, r7
    3478:	1e6f      	subs	r7, r5, #1
    347a:	41bd      	sbcs	r5, r7
    347c:	b2ec      	uxtb	r4, r5
    347e:	2700      	movs	r7, #0
    3480:	1b0d      	subs	r5, r1, r4
    3482:	e760      	b.n	3346 <__aeabi_dsub+0x416>
    3484:	4c52      	ldr	r4, [pc, #328]	; (35d0 <__aeabi_dsub+0x6a0>)
    3486:	42a2      	cmp	r2, r4
    3488:	d036      	beq.n	34f8 <__aeabi_dsub+0x5c8>
    348a:	4274      	negs	r4, r6
    348c:	2680      	movs	r6, #128	; 0x80
    348e:	0436      	lsls	r6, r6, #16
    3490:	46a1      	mov	r9, r4
    3492:	4337      	orrs	r7, r6
    3494:	e7be      	b.n	3414 <__aeabi_dsub+0x4e4>
    3496:	0002      	movs	r2, r0
    3498:	430a      	orrs	r2, r1
    349a:	d100      	bne.n	349e <__aeabi_dsub+0x56e>
    349c:	e574      	b.n	2f88 <__aeabi_dsub+0x58>
    349e:	1a6a      	subs	r2, r5, r1
    34a0:	4690      	mov	r8, r2
    34a2:	4545      	cmp	r5, r8
    34a4:	41b6      	sbcs	r6, r6
    34a6:	1a3a      	subs	r2, r7, r0
    34a8:	4276      	negs	r6, r6
    34aa:	1b92      	subs	r2, r2, r6
    34ac:	4694      	mov	ip, r2
    34ae:	0212      	lsls	r2, r2, #8
    34b0:	d400      	bmi.n	34b4 <__aeabi_dsub+0x584>
    34b2:	e5f7      	b.n	30a4 <__aeabi_dsub+0x174>
    34b4:	1b4d      	subs	r5, r1, r5
    34b6:	42a9      	cmp	r1, r5
    34b8:	4189      	sbcs	r1, r1
    34ba:	1bc7      	subs	r7, r0, r7
    34bc:	4249      	negs	r1, r1
    34be:	1a7f      	subs	r7, r7, r1
    34c0:	469a      	mov	sl, r3
    34c2:	e561      	b.n	2f88 <__aeabi_dsub+0x58>
    34c4:	0002      	movs	r2, r0
    34c6:	430a      	orrs	r2, r1
    34c8:	d03a      	beq.n	3540 <__aeabi_dsub+0x610>
    34ca:	08ed      	lsrs	r5, r5, #3
    34cc:	077c      	lsls	r4, r7, #29
    34ce:	432c      	orrs	r4, r5
    34d0:	2580      	movs	r5, #128	; 0x80
    34d2:	08fa      	lsrs	r2, r7, #3
    34d4:	032d      	lsls	r5, r5, #12
    34d6:	422a      	tst	r2, r5
    34d8:	d008      	beq.n	34ec <__aeabi_dsub+0x5bc>
    34da:	08c7      	lsrs	r7, r0, #3
    34dc:	422f      	tst	r7, r5
    34de:	d105      	bne.n	34ec <__aeabi_dsub+0x5bc>
    34e0:	0745      	lsls	r5, r0, #29
    34e2:	002c      	movs	r4, r5
    34e4:	003a      	movs	r2, r7
    34e6:	469a      	mov	sl, r3
    34e8:	08c9      	lsrs	r1, r1, #3
    34ea:	430c      	orrs	r4, r1
    34ec:	0f67      	lsrs	r7, r4, #29
    34ee:	00d2      	lsls	r2, r2, #3
    34f0:	00e5      	lsls	r5, r4, #3
    34f2:	4317      	orrs	r7, r2
    34f4:	4c36      	ldr	r4, [pc, #216]	; (35d0 <__aeabi_dsub+0x6a0>)
    34f6:	e547      	b.n	2f88 <__aeabi_dsub+0x58>
    34f8:	0007      	movs	r7, r0
    34fa:	000d      	movs	r5, r1
    34fc:	0014      	movs	r4, r2
    34fe:	e543      	b.n	2f88 <__aeabi_dsub+0x58>
    3500:	003a      	movs	r2, r7
    3502:	432a      	orrs	r2, r5
    3504:	d043      	beq.n	358e <__aeabi_dsub+0x65e>
    3506:	0002      	movs	r2, r0
    3508:	430a      	orrs	r2, r1
    350a:	d019      	beq.n	3540 <__aeabi_dsub+0x610>
    350c:	08ed      	lsrs	r5, r5, #3
    350e:	077c      	lsls	r4, r7, #29
    3510:	432c      	orrs	r4, r5
    3512:	2580      	movs	r5, #128	; 0x80
    3514:	08fa      	lsrs	r2, r7, #3
    3516:	032d      	lsls	r5, r5, #12
    3518:	422a      	tst	r2, r5
    351a:	d007      	beq.n	352c <__aeabi_dsub+0x5fc>
    351c:	08c6      	lsrs	r6, r0, #3
    351e:	422e      	tst	r6, r5
    3520:	d104      	bne.n	352c <__aeabi_dsub+0x5fc>
    3522:	0747      	lsls	r7, r0, #29
    3524:	003c      	movs	r4, r7
    3526:	0032      	movs	r2, r6
    3528:	08c9      	lsrs	r1, r1, #3
    352a:	430c      	orrs	r4, r1
    352c:	00d7      	lsls	r7, r2, #3
    352e:	0f62      	lsrs	r2, r4, #29
    3530:	00e5      	lsls	r5, r4, #3
    3532:	4317      	orrs	r7, r2
    3534:	469a      	mov	sl, r3
    3536:	4c26      	ldr	r4, [pc, #152]	; (35d0 <__aeabi_dsub+0x6a0>)
    3538:	e526      	b.n	2f88 <__aeabi_dsub+0x58>
    353a:	2200      	movs	r2, #0
    353c:	2500      	movs	r5, #0
    353e:	e544      	b.n	2fca <__aeabi_dsub+0x9a>
    3540:	4c23      	ldr	r4, [pc, #140]	; (35d0 <__aeabi_dsub+0x6a0>)
    3542:	e521      	b.n	2f88 <__aeabi_dsub+0x58>
    3544:	2000      	movs	r0, #0
    3546:	e749      	b.n	33dc <__aeabi_dsub+0x4ac>
    3548:	2300      	movs	r3, #0
    354a:	2500      	movs	r5, #0
    354c:	e5bb      	b.n	30c6 <__aeabi_dsub+0x196>
    354e:	464c      	mov	r4, r9
    3550:	003e      	movs	r6, r7
    3552:	3c20      	subs	r4, #32
    3554:	40e6      	lsrs	r6, r4
    3556:	464c      	mov	r4, r9
    3558:	46b4      	mov	ip, r6
    355a:	2c20      	cmp	r4, #32
    355c:	d031      	beq.n	35c2 <__aeabi_dsub+0x692>
    355e:	2440      	movs	r4, #64	; 0x40
    3560:	464e      	mov	r6, r9
    3562:	1ba6      	subs	r6, r4, r6
    3564:	40b7      	lsls	r7, r6
    3566:	433d      	orrs	r5, r7
    3568:	1e6c      	subs	r4, r5, #1
    356a:	41a5      	sbcs	r5, r4
    356c:	4664      	mov	r4, ip
    356e:	432c      	orrs	r4, r5
    3570:	2700      	movs	r7, #0
    3572:	1b0d      	subs	r5, r1, r4
    3574:	e6e7      	b.n	3346 <__aeabi_dsub+0x416>
    3576:	2280      	movs	r2, #128	; 0x80
    3578:	2300      	movs	r3, #0
    357a:	0312      	lsls	r2, r2, #12
    357c:	4c14      	ldr	r4, [pc, #80]	; (35d0 <__aeabi_dsub+0x6a0>)
    357e:	2500      	movs	r5, #0
    3580:	e5a1      	b.n	30c6 <__aeabi_dsub+0x196>
    3582:	433d      	orrs	r5, r7
    3584:	1e6f      	subs	r7, r5, #1
    3586:	41bd      	sbcs	r5, r7
    3588:	2700      	movs	r7, #0
    358a:	b2ed      	uxtb	r5, r5
    358c:	e760      	b.n	3450 <__aeabi_dsub+0x520>
    358e:	0007      	movs	r7, r0
    3590:	000d      	movs	r5, r1
    3592:	4c0f      	ldr	r4, [pc, #60]	; (35d0 <__aeabi_dsub+0x6a0>)
    3594:	e4f8      	b.n	2f88 <__aeabi_dsub+0x58>
    3596:	0007      	movs	r7, r0
    3598:	000d      	movs	r5, r1
    359a:	e4f5      	b.n	2f88 <__aeabi_dsub+0x58>
    359c:	464e      	mov	r6, r9
    359e:	003c      	movs	r4, r7
    35a0:	3e20      	subs	r6, #32
    35a2:	40f4      	lsrs	r4, r6
    35a4:	46a0      	mov	r8, r4
    35a6:	464c      	mov	r4, r9
    35a8:	2c20      	cmp	r4, #32
    35aa:	d00e      	beq.n	35ca <__aeabi_dsub+0x69a>
    35ac:	2440      	movs	r4, #64	; 0x40
    35ae:	464e      	mov	r6, r9
    35b0:	1ba4      	subs	r4, r4, r6
    35b2:	40a7      	lsls	r7, r4
    35b4:	433d      	orrs	r5, r7
    35b6:	1e6f      	subs	r7, r5, #1
    35b8:	41bd      	sbcs	r5, r7
    35ba:	4644      	mov	r4, r8
    35bc:	2700      	movs	r7, #0
    35be:	4325      	orrs	r5, r4
    35c0:	e746      	b.n	3450 <__aeabi_dsub+0x520>
    35c2:	2700      	movs	r7, #0
    35c4:	e7cf      	b.n	3566 <__aeabi_dsub+0x636>
    35c6:	000d      	movs	r5, r1
    35c8:	e573      	b.n	30b2 <__aeabi_dsub+0x182>
    35ca:	2700      	movs	r7, #0
    35cc:	e7f2      	b.n	35b4 <__aeabi_dsub+0x684>
    35ce:	46c0      	nop			; (mov r8, r8)
    35d0:	000007ff 	.word	0x000007ff
    35d4:	ff7fffff 	.word	0xff7fffff

000035d8 <__aeabi_d2iz>:
    35d8:	030b      	lsls	r3, r1, #12
    35da:	b530      	push	{r4, r5, lr}
    35dc:	4d13      	ldr	r5, [pc, #76]	; (362c <__aeabi_d2iz+0x54>)
    35de:	0b1a      	lsrs	r2, r3, #12
    35e0:	004b      	lsls	r3, r1, #1
    35e2:	0d5b      	lsrs	r3, r3, #21
    35e4:	0fc9      	lsrs	r1, r1, #31
    35e6:	2400      	movs	r4, #0
    35e8:	42ab      	cmp	r3, r5
    35ea:	dd11      	ble.n	3610 <__aeabi_d2iz+0x38>
    35ec:	4c10      	ldr	r4, [pc, #64]	; (3630 <__aeabi_d2iz+0x58>)
    35ee:	42a3      	cmp	r3, r4
    35f0:	dc10      	bgt.n	3614 <__aeabi_d2iz+0x3c>
    35f2:	2480      	movs	r4, #128	; 0x80
    35f4:	0364      	lsls	r4, r4, #13
    35f6:	4322      	orrs	r2, r4
    35f8:	4c0e      	ldr	r4, [pc, #56]	; (3634 <__aeabi_d2iz+0x5c>)
    35fa:	1ae4      	subs	r4, r4, r3
    35fc:	2c1f      	cmp	r4, #31
    35fe:	dd0c      	ble.n	361a <__aeabi_d2iz+0x42>
    3600:	480d      	ldr	r0, [pc, #52]	; (3638 <__aeabi_d2iz+0x60>)
    3602:	1ac3      	subs	r3, r0, r3
    3604:	40da      	lsrs	r2, r3
    3606:	0013      	movs	r3, r2
    3608:	425c      	negs	r4, r3
    360a:	2900      	cmp	r1, #0
    360c:	d100      	bne.n	3610 <__aeabi_d2iz+0x38>
    360e:	001c      	movs	r4, r3
    3610:	0020      	movs	r0, r4
    3612:	bd30      	pop	{r4, r5, pc}
    3614:	4b09      	ldr	r3, [pc, #36]	; (363c <__aeabi_d2iz+0x64>)
    3616:	18cc      	adds	r4, r1, r3
    3618:	e7fa      	b.n	3610 <__aeabi_d2iz+0x38>
    361a:	40e0      	lsrs	r0, r4
    361c:	4c08      	ldr	r4, [pc, #32]	; (3640 <__aeabi_d2iz+0x68>)
    361e:	46a4      	mov	ip, r4
    3620:	4463      	add	r3, ip
    3622:	409a      	lsls	r2, r3
    3624:	0013      	movs	r3, r2
    3626:	4303      	orrs	r3, r0
    3628:	e7ee      	b.n	3608 <__aeabi_d2iz+0x30>
    362a:	46c0      	nop			; (mov r8, r8)
    362c:	000003fe 	.word	0x000003fe
    3630:	0000041d 	.word	0x0000041d
    3634:	00000433 	.word	0x00000433
    3638:	00000413 	.word	0x00000413
    363c:	7fffffff 	.word	0x7fffffff
    3640:	fffffbed 	.word	0xfffffbed

00003644 <__aeabi_ui2d>:
    3644:	b570      	push	{r4, r5, r6, lr}
    3646:	1e05      	subs	r5, r0, #0
    3648:	d028      	beq.n	369c <__aeabi_ui2d+0x58>
    364a:	f000 f833 	bl	36b4 <__clzsi2>
    364e:	4b15      	ldr	r3, [pc, #84]	; (36a4 <__aeabi_ui2d+0x60>)
    3650:	4a15      	ldr	r2, [pc, #84]	; (36a8 <__aeabi_ui2d+0x64>)
    3652:	1a1b      	subs	r3, r3, r0
    3654:	1ad2      	subs	r2, r2, r3
    3656:	2a1f      	cmp	r2, #31
    3658:	dd16      	ble.n	3688 <__aeabi_ui2d+0x44>
    365a:	002c      	movs	r4, r5
    365c:	4a13      	ldr	r2, [pc, #76]	; (36ac <__aeabi_ui2d+0x68>)
    365e:	2500      	movs	r5, #0
    3660:	1ad2      	subs	r2, r2, r3
    3662:	4094      	lsls	r4, r2
    3664:	055a      	lsls	r2, r3, #21
    3666:	0324      	lsls	r4, r4, #12
    3668:	0b24      	lsrs	r4, r4, #12
    366a:	0d52      	lsrs	r2, r2, #21
    366c:	2100      	movs	r1, #0
    366e:	0324      	lsls	r4, r4, #12
    3670:	0d0b      	lsrs	r3, r1, #20
    3672:	0b24      	lsrs	r4, r4, #12
    3674:	051b      	lsls	r3, r3, #20
    3676:	4323      	orrs	r3, r4
    3678:	4c0d      	ldr	r4, [pc, #52]	; (36b0 <__aeabi_ui2d+0x6c>)
    367a:	0512      	lsls	r2, r2, #20
    367c:	4023      	ands	r3, r4
    367e:	4313      	orrs	r3, r2
    3680:	005b      	lsls	r3, r3, #1
    3682:	0028      	movs	r0, r5
    3684:	0859      	lsrs	r1, r3, #1
    3686:	bd70      	pop	{r4, r5, r6, pc}
    3688:	210b      	movs	r1, #11
    368a:	002c      	movs	r4, r5
    368c:	1a08      	subs	r0, r1, r0
    368e:	40c4      	lsrs	r4, r0
    3690:	4095      	lsls	r5, r2
    3692:	0324      	lsls	r4, r4, #12
    3694:	055a      	lsls	r2, r3, #21
    3696:	0b24      	lsrs	r4, r4, #12
    3698:	0d52      	lsrs	r2, r2, #21
    369a:	e7e7      	b.n	366c <__aeabi_ui2d+0x28>
    369c:	2200      	movs	r2, #0
    369e:	2400      	movs	r4, #0
    36a0:	e7e4      	b.n	366c <__aeabi_ui2d+0x28>
    36a2:	46c0      	nop			; (mov r8, r8)
    36a4:	0000041e 	.word	0x0000041e
    36a8:	00000433 	.word	0x00000433
    36ac:	00000413 	.word	0x00000413
    36b0:	800fffff 	.word	0x800fffff

000036b4 <__clzsi2>:
    36b4:	211c      	movs	r1, #28
    36b6:	2301      	movs	r3, #1
    36b8:	041b      	lsls	r3, r3, #16
    36ba:	4298      	cmp	r0, r3
    36bc:	d301      	bcc.n	36c2 <__clzsi2+0xe>
    36be:	0c00      	lsrs	r0, r0, #16
    36c0:	3910      	subs	r1, #16
    36c2:	0a1b      	lsrs	r3, r3, #8
    36c4:	4298      	cmp	r0, r3
    36c6:	d301      	bcc.n	36cc <__clzsi2+0x18>
    36c8:	0a00      	lsrs	r0, r0, #8
    36ca:	3908      	subs	r1, #8
    36cc:	091b      	lsrs	r3, r3, #4
    36ce:	4298      	cmp	r0, r3
    36d0:	d301      	bcc.n	36d6 <__clzsi2+0x22>
    36d2:	0900      	lsrs	r0, r0, #4
    36d4:	3904      	subs	r1, #4
    36d6:	a202      	add	r2, pc, #8	; (adr r2, 36e0 <__clzsi2+0x2c>)
    36d8:	5c10      	ldrb	r0, [r2, r0]
    36da:	1840      	adds	r0, r0, r1
    36dc:	4770      	bx	lr
    36de:	46c0      	nop			; (mov r8, r8)
    36e0:	02020304 	.word	0x02020304
    36e4:	01010101 	.word	0x01010101
	...

000036f0 <__libc_init_array>:
    36f0:	4b0e      	ldr	r3, [pc, #56]	; (372c <__libc_init_array+0x3c>)
    36f2:	b570      	push	{r4, r5, r6, lr}
    36f4:	2500      	movs	r5, #0
    36f6:	001e      	movs	r6, r3
    36f8:	4c0d      	ldr	r4, [pc, #52]	; (3730 <__libc_init_array+0x40>)
    36fa:	1ae4      	subs	r4, r4, r3
    36fc:	10a4      	asrs	r4, r4, #2
    36fe:	42a5      	cmp	r5, r4
    3700:	d004      	beq.n	370c <__libc_init_array+0x1c>
    3702:	00ab      	lsls	r3, r5, #2
    3704:	58f3      	ldr	r3, [r6, r3]
    3706:	4798      	blx	r3
    3708:	3501      	adds	r5, #1
    370a:	e7f8      	b.n	36fe <__libc_init_array+0xe>
    370c:	f000 f894 	bl	3838 <_init>
    3710:	4b08      	ldr	r3, [pc, #32]	; (3734 <__libc_init_array+0x44>)
    3712:	2500      	movs	r5, #0
    3714:	001e      	movs	r6, r3
    3716:	4c08      	ldr	r4, [pc, #32]	; (3738 <__libc_init_array+0x48>)
    3718:	1ae4      	subs	r4, r4, r3
    371a:	10a4      	asrs	r4, r4, #2
    371c:	42a5      	cmp	r5, r4
    371e:	d004      	beq.n	372a <__libc_init_array+0x3a>
    3720:	00ab      	lsls	r3, r5, #2
    3722:	58f3      	ldr	r3, [r6, r3]
    3724:	4798      	blx	r3
    3726:	3501      	adds	r5, #1
    3728:	e7f8      	b.n	371c <__libc_init_array+0x2c>
    372a:	bd70      	pop	{r4, r5, r6, pc}
    372c:	00003844 	.word	0x00003844
    3730:	00003844 	.word	0x00003844
    3734:	00003844 	.word	0x00003844
    3738:	00003848 	.word	0x00003848

0000373c <memcpy>:
    373c:	2300      	movs	r3, #0
    373e:	b510      	push	{r4, lr}
    3740:	429a      	cmp	r2, r3
    3742:	d003      	beq.n	374c <memcpy+0x10>
    3744:	5ccc      	ldrb	r4, [r1, r3]
    3746:	54c4      	strb	r4, [r0, r3]
    3748:	3301      	adds	r3, #1
    374a:	e7f9      	b.n	3740 <memcpy+0x4>
    374c:	bd10      	pop	{r4, pc}
    374e:	0000      	movs	r0, r0
    3750:	65636552 	.word	0x65636552
    3754:	64657669 	.word	0x64657669
    3758:	0000203a 	.word	0x0000203a
    375c:	42000800 	.word	0x42000800
    3760:	42000c00 	.word	0x42000c00
    3764:	42001000 	.word	0x42001000
    3768:	42001400 	.word	0x42001400
    376c:	0c0b0a09 	.word	0x0c0b0a09
    3770:	0000158e 	.word	0x0000158e
    3774:	0000158a 	.word	0x0000158a
    3778:	0000158a 	.word	0x0000158a
    377c:	000015e8 	.word	0x000015e8
    3780:	000015e8 	.word	0x000015e8
    3784:	000015a2 	.word	0x000015a2
    3788:	00001594 	.word	0x00001594
    378c:	000015a8 	.word	0x000015a8
    3790:	000015d6 	.word	0x000015d6
    3794:	00001674 	.word	0x00001674
    3798:	00001654 	.word	0x00001654
    379c:	00001654 	.word	0x00001654
    37a0:	000016e0 	.word	0x000016e0
    37a4:	00001666 	.word	0x00001666
    37a8:	00001682 	.word	0x00001682
    37ac:	00001658 	.word	0x00001658
    37b0:	00001690 	.word	0x00001690
    37b4:	000016d0 	.word	0x000016d0
    37b8:	00002600 	.word	0x00002600
    37bc:	000024ce 	.word	0x000024ce
    37c0:	000025d4 	.word	0x000025d4
    37c4:	000024c4 	.word	0x000024c4
    37c8:	000025d4 	.word	0x000025d4
    37cc:	000025de 	.word	0x000025de
    37d0:	000025d4 	.word	0x000025d4
    37d4:	000024c4 	.word	0x000024c4
    37d8:	000024ce 	.word	0x000024ce
    37dc:	000024ce 	.word	0x000024ce
    37e0:	000025de 	.word	0x000025de
    37e4:	000024c4 	.word	0x000024c4
    37e8:	000024ba 	.word	0x000024ba
    37ec:	000024ba 	.word	0x000024ba
    37f0:	000024ba 	.word	0x000024ba
    37f4:	00002830 	.word	0x00002830
    37f8:	00002c2c 	.word	0x00002c2c
    37fc:	00002aec 	.word	0x00002aec
    3800:	00002aec 	.word	0x00002aec
    3804:	00002aea 	.word	0x00002aea
    3808:	00002c04 	.word	0x00002c04
    380c:	00002c04 	.word	0x00002c04
    3810:	00002bf6 	.word	0x00002bf6
    3814:	00002aea 	.word	0x00002aea
    3818:	00002c04 	.word	0x00002c04
    381c:	00002bf6 	.word	0x00002bf6
    3820:	00002c04 	.word	0x00002c04
    3824:	00002aea 	.word	0x00002aea
    3828:	00002c0c 	.word	0x00002c0c
    382c:	00002c0c 	.word	0x00002c0c
    3830:	00002c0c 	.word	0x00002c0c
    3834:	00002e0c 	.word	0x00002e0c

00003838 <_init>:
    3838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    383a:	46c0      	nop			; (mov r8, r8)
    383c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    383e:	bc08      	pop	{r3}
    3840:	469e      	mov	lr, r3
    3842:	4770      	bx	lr

00003844 <__init_array_start>:
    3844:	000000dd 	.word	0x000000dd

00003848 <_fini>:
    3848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    384a:	46c0      	nop			; (mov r8, r8)
    384c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    384e:	bc08      	pop	{r3}
    3850:	469e      	mov	lr, r3
    3852:	4770      	bx	lr

00003854 <__fini_array_start>:
    3854:	000000b5 	.word	0x000000b5
