
OCTO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005c18  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000007c  20000000  00005c18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000228  2000007c  00005c94  0002007c  2**2
                  ALLOC
  3 .stack        00002004  200002a4  00005ebc  0002007c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
  6 .debug_info   00051423  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006c8c  00000000  00000000  00071520  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00009426  00000000  00000000  000781ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000009c0  00000000  00000000  000815d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b60  00000000  00000000  00081f92  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001e14f  00000000  00000000  00082af2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00016a21  00000000  00000000  000a0c41  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00088afa  00000000  00000000  000b7662  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001cc8  00000000  00000000  0014015c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a8 22 00 20 7d 2d 00 00 79 2d 00 00 79 2d 00 00     .". }-..y-..y-..
	...
      2c:	79 2d 00 00 00 00 00 00 00 00 00 00 79 2d 00 00     y-..........y-..
      3c:	79 2d 00 00 79 2d 00 00 79 2d 00 00 79 2d 00 00     y-..y-..y-..y-..
      4c:	ed 07 00 00 15 01 00 00 79 2d 00 00 79 2d 00 00     ........y-..y-..
      5c:	79 2d 00 00 79 2d 00 00 f9 25 00 00 09 26 00 00     y-..y-...%...&..
      6c:	19 26 00 00 29 26 00 00 00 00 00 00 00 00 00 00     .&..)&..........
      7c:	79 2d 00 00 79 2d 00 00 79 2d 00 00 79 2d 00 00     y-..y-..y-..y-..
      8c:	79 2d 00 00 79 2d 00 00 00 00 00 00 00 00 00 00     y-..y-..........
      9c:	6d 10 00 00 79 2d 00 00 7d 12 00 00 79 2d 00 00     m...y-..}...y-..
      ac:	79 2d 00 00 00 00 00 00                             y-......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000007c 	.word	0x2000007c
      d4:	00000000 	.word	0x00000000
      d8:	00005c18 	.word	0x00005c18

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000080 	.word	0x20000080
     108:	00005c18 	.word	0x00005c18
     10c:	00005c18 	.word	0x00005c18
     110:	00000000 	.word	0x00000000

00000114 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     116:	2200      	movs	r2, #0
     118:	4b10      	ldr	r3, [pc, #64]	; (15c <EIC_Handler+0x48>)
     11a:	701a      	strb	r2, [r3, #0]
     11c:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     11e:	4910      	ldr	r1, [pc, #64]	; (160 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     120:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     122:	4e10      	ldr	r6, [pc, #64]	; (164 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     124:	4c0d      	ldr	r4, [pc, #52]	; (15c <EIC_Handler+0x48>)
     126:	e00a      	b.n	13e <EIC_Handler+0x2a>
		return eics[eic_index];
     128:	490d      	ldr	r1, [pc, #52]	; (160 <EIC_Handler+0x4c>)
     12a:	e008      	b.n	13e <EIC_Handler+0x2a>
     12c:	7823      	ldrb	r3, [r4, #0]
     12e:	3301      	adds	r3, #1
     130:	b2db      	uxtb	r3, r3
     132:	7023      	strb	r3, [r4, #0]
     134:	2b0f      	cmp	r3, #15
     136:	d810      	bhi.n	15a <EIC_Handler+0x46>
		return NULL;
     138:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     13a:	2b1f      	cmp	r3, #31
     13c:	d9f4      	bls.n	128 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     13e:	0028      	movs	r0, r5
     140:	4018      	ands	r0, r3
     142:	2201      	movs	r2, #1
     144:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     146:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     148:	4210      	tst	r0, r2
     14a:	d0ef      	beq.n	12c <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     14c:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     14e:	009b      	lsls	r3, r3, #2
     150:	599b      	ldr	r3, [r3, r6]
     152:	2b00      	cmp	r3, #0
     154:	d0ea      	beq.n	12c <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     156:	4798      	blx	r3
     158:	e7e8      	b.n	12c <EIC_Handler+0x18>
			}
		}
	}
}
     15a:	bd70      	pop	{r4, r5, r6, pc}
     15c:	200000e4 	.word	0x200000e4
     160:	40001800 	.word	0x40001800
     164:	200000e8 	.word	0x200000e8

00000168 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     168:	4a04      	ldr	r2, [pc, #16]	; (17c <_extint_enable+0x14>)
     16a:	7813      	ldrb	r3, [r2, #0]
     16c:	2102      	movs	r1, #2
     16e:	430b      	orrs	r3, r1
     170:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     172:	7853      	ldrb	r3, [r2, #1]
     174:	b25b      	sxtb	r3, r3
     176:	2b00      	cmp	r3, #0
     178:	dbfb      	blt.n	172 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     17a:	4770      	bx	lr
     17c:	40001800 	.word	0x40001800

00000180 <_system_extint_init>:
{
     180:	b500      	push	{lr}
     182:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     184:	4a12      	ldr	r2, [pc, #72]	; (1d0 <_system_extint_init+0x50>)
     186:	6993      	ldr	r3, [r2, #24]
     188:	2140      	movs	r1, #64	; 0x40
     18a:	430b      	orrs	r3, r1
     18c:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     18e:	a901      	add	r1, sp, #4
     190:	2300      	movs	r3, #0
     192:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     194:	2005      	movs	r0, #5
     196:	4b0f      	ldr	r3, [pc, #60]	; (1d4 <_system_extint_init+0x54>)
     198:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     19a:	2005      	movs	r0, #5
     19c:	4b0e      	ldr	r3, [pc, #56]	; (1d8 <_system_extint_init+0x58>)
     19e:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     1a0:	4a0e      	ldr	r2, [pc, #56]	; (1dc <_system_extint_init+0x5c>)
     1a2:	7813      	ldrb	r3, [r2, #0]
     1a4:	2101      	movs	r1, #1
     1a6:	430b      	orrs	r3, r1
     1a8:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     1aa:	7853      	ldrb	r3, [r2, #1]
     1ac:	b25b      	sxtb	r3, r3
     1ae:	2b00      	cmp	r3, #0
     1b0:	dbfb      	blt.n	1aa <_system_extint_init+0x2a>
     1b2:	4b0b      	ldr	r3, [pc, #44]	; (1e0 <_system_extint_init+0x60>)
     1b4:	0019      	movs	r1, r3
     1b6:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     1b8:	2200      	movs	r2, #0
     1ba:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     1bc:	4299      	cmp	r1, r3
     1be:	d1fc      	bne.n	1ba <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     1c0:	2210      	movs	r2, #16
     1c2:	4b08      	ldr	r3, [pc, #32]	; (1e4 <_system_extint_init+0x64>)
     1c4:	601a      	str	r2, [r3, #0]
	_extint_enable();
     1c6:	4b08      	ldr	r3, [pc, #32]	; (1e8 <_system_extint_init+0x68>)
     1c8:	4798      	blx	r3
}
     1ca:	b003      	add	sp, #12
     1cc:	bd00      	pop	{pc}
     1ce:	46c0      	nop			; (mov r8, r8)
     1d0:	40000400 	.word	0x40000400
     1d4:	00002c21 	.word	0x00002c21
     1d8:	00002b95 	.word	0x00002b95
     1dc:	40001800 	.word	0x40001800
     1e0:	200000e8 	.word	0x200000e8
     1e4:	e000e100 	.word	0xe000e100
     1e8:	00000169 	.word	0x00000169

000001ec <clean_array>:
//=============================================================================
//! \brief Clean the "received array" of the BT USART.
//=============================================================================
void clean_array(int length)
{
    for (int i = 0; i < length; i++)
     1ec:	2800      	cmp	r0, #0
     1ee:	dd06      	ble.n	1fe <clean_array+0x12>
     1f0:	4b03      	ldr	r3, [pc, #12]	; (200 <clean_array+0x14>)
     1f2:	18c0      	adds	r0, r0, r3
    {
        bt_message[i] = 0x00;
     1f4:	2200      	movs	r2, #0
     1f6:	701a      	strb	r2, [r3, #0]
     1f8:	3301      	adds	r3, #1
    for (int i = 0; i < length; i++)
     1fa:	4283      	cmp	r3, r0
     1fc:	d1fb      	bne.n	1f6 <clean_array+0xa>
    }
}
     1fe:	4770      	bx	lr
     200:	200001d0 	.word	0x200001d0

00000204 <usart_write_callback>:
{
     204:	b510      	push	{r4, lr}
    clean_array(bt_counting);
     206:	4c04      	ldr	r4, [pc, #16]	; (218 <usart_write_callback+0x14>)
     208:	7820      	ldrb	r0, [r4, #0]
     20a:	4b04      	ldr	r3, [pc, #16]	; (21c <usart_write_callback+0x18>)
     20c:	4798      	blx	r3
    bt_counting = 0;
     20e:	2300      	movs	r3, #0
     210:	7023      	strb	r3, [r4, #0]
    bt_start_received = false;
     212:	4a03      	ldr	r2, [pc, #12]	; (220 <usart_write_callback+0x1c>)
     214:	7013      	strb	r3, [r2, #0]
}
     216:	bd10      	pop	{r4, pc}
     218:	20000098 	.word	0x20000098
     21c:	000001ed 	.word	0x000001ed
     220:	20000099 	.word	0x20000099

00000224 <configure_usart>:

//=============================================================================
//! \brief Setup Function for USART (Debug and BT).
//=============================================================================
void configure_usart(void)
{
     224:	b530      	push	{r4, r5, lr}
     226:	b091      	sub	sp, #68	; 0x44
// General
    bt_timer = 0;
     228:	2300      	movs	r3, #0
     22a:	4a29      	ldr	r2, [pc, #164]	; (2d0 <configure_usart+0xac>)
     22c:	6013      	str	r3, [r2, #0]
    bt_connected = false;
     22e:	2200      	movs	r2, #0
     230:	4928      	ldr	r1, [pc, #160]	; (2d4 <configure_usart+0xb0>)
     232:	700b      	strb	r3, [r1, #0]
    poll_requested = false;
     234:	4928      	ldr	r1, [pc, #160]	; (2d8 <configure_usart+0xb4>)
     236:	700b      	strb	r3, [r1, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     238:	2180      	movs	r1, #128	; 0x80
     23a:	05c9      	lsls	r1, r1, #23
     23c:	9100      	str	r1, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     23e:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     240:	21ff      	movs	r1, #255	; 0xff
     242:	4668      	mov	r0, sp
     244:	8101      	strh	r1, [r0, #8]
	config->stopbits         = USART_STOPBITS_1;
     246:	7283      	strb	r3, [r0, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     248:	72c3      	strb	r3, [r0, #11]
	config->baudrate         = 9600;
     24a:	2196      	movs	r1, #150	; 0x96
     24c:	0189      	lsls	r1, r1, #6
     24e:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
     250:	2101      	movs	r1, #1
     252:	2024      	movs	r0, #36	; 0x24
     254:	466c      	mov	r4, sp
     256:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
     258:	3001      	adds	r0, #1
     25a:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
     25c:	3125      	adds	r1, #37	; 0x25
     25e:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
     260:	3101      	adds	r1, #1
     262:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
     264:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     266:	3105      	adds	r1, #5
     268:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
     26a:	3101      	adds	r1, #1
     26c:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     26e:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     270:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     272:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     274:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     276:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     278:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
     27a:	2313      	movs	r3, #19
     27c:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     27e:	7762      	strb	r2, [r4, #29]
    stdio_serial_init(&dbg_usart_instance, EDBG_CDC_MODULE, &config_usart);
#endif

//BT USART
    config_usart.baudrate    = 9600;
    config_usart.mux_setting = BT_UART_SERCOM_MUX_SETTING;
     280:	2380      	movs	r3, #128	; 0x80
     282:	035b      	lsls	r3, r3, #13
     284:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = BT_UART_SERCOM_PINMUX_PAD0;
     286:	4b15      	ldr	r3, [pc, #84]	; (2dc <configure_usart+0xb8>)
     288:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = BT_UART_SERCOM_PINMUX_PAD1;
     28a:	4b15      	ldr	r3, [pc, #84]	; (2e0 <configure_usart+0xbc>)
     28c:	930d      	str	r3, [sp, #52]	; 0x34
    config_usart.pinmux_pad2 = BT_UART_SERCOM_PINMUX_PAD2;
     28e:	2301      	movs	r3, #1
     290:	425b      	negs	r3, r3
     292:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad3 = BT_UART_SERCOM_PINMUX_PAD3;
     294:	930f      	str	r3, [sp, #60]	; 0x3c

    while (usart_init(&bt_usart_instance, BT_UART_MODULE, &config_usart) != STATUS_OK) {}
     296:	4d13      	ldr	r5, [pc, #76]	; (2e4 <configure_usart+0xc0>)
     298:	4c13      	ldr	r4, [pc, #76]	; (2e8 <configure_usart+0xc4>)
     29a:	466a      	mov	r2, sp
     29c:	4913      	ldr	r1, [pc, #76]	; (2ec <configure_usart+0xc8>)
     29e:	0028      	movs	r0, r5
     2a0:	47a0      	blx	r4
     2a2:	2800      	cmp	r0, #0
     2a4:	d1f9      	bne.n	29a <configure_usart+0x76>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     2a6:	4d0f      	ldr	r5, [pc, #60]	; (2e4 <configure_usart+0xc0>)
     2a8:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     2aa:	0020      	movs	r0, r4
     2ac:	4b10      	ldr	r3, [pc, #64]	; (2f0 <configure_usart+0xcc>)
     2ae:	4798      	blx	r3
     2b0:	231f      	movs	r3, #31
     2b2:	4018      	ands	r0, r3
     2b4:	3b1e      	subs	r3, #30
     2b6:	4083      	lsls	r3, r0
     2b8:	4a0e      	ldr	r2, [pc, #56]	; (2f4 <configure_usart+0xd0>)
     2ba:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     2bc:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     2be:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     2c0:	2b00      	cmp	r3, #0
     2c2:	d1fc      	bne.n	2be <configure_usart+0x9a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     2c4:	6823      	ldr	r3, [r4, #0]
     2c6:	2202      	movs	r2, #2
     2c8:	4313      	orrs	r3, r2
     2ca:	6023      	str	r3, [r4, #0]
   
    usart_enable(&bt_usart_instance);
}
     2cc:	b011      	add	sp, #68	; 0x44
     2ce:	bd30      	pop	{r4, r5, pc}
     2d0:	200001f0 	.word	0x200001f0
     2d4:	200001f7 	.word	0x200001f7
     2d8:	200001cc 	.word	0x200001cc
     2dc:	00100002 	.word	0x00100002
     2e0:	00110002 	.word	0x00110002
     2e4:	20000130 	.word	0x20000130
     2e8:	00001fd9 	.word	0x00001fd9
     2ec:	42000c00 	.word	0x42000c00
     2f0:	000025d5 	.word	0x000025d5
     2f4:	e000e100 	.word	0xe000e100

000002f8 <configure_usart_callbacks>:

//=============================================================================
//! \brief Configure callback Function for USART (BT).
//=============================================================================
void configure_usart_callbacks(void)
{
     2f8:	b570      	push	{r4, r5, r6, lr}
    //! [setup_register_callbacks]
    usart_register_callback(&bt_usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
     2fa:	4c08      	ldr	r4, [pc, #32]	; (31c <configure_usart_callbacks+0x24>)
     2fc:	2200      	movs	r2, #0
     2fe:	4908      	ldr	r1, [pc, #32]	; (320 <configure_usart_callbacks+0x28>)
     300:	0020      	movs	r0, r4
     302:	4d08      	ldr	r5, [pc, #32]	; (324 <configure_usart_callbacks+0x2c>)
     304:	47a8      	blx	r5
    usart_register_callback(&bt_usart_instance, usart_read_callback,  USART_CALLBACK_BUFFER_RECEIVED);
     306:	2201      	movs	r2, #1
     308:	4907      	ldr	r1, [pc, #28]	; (328 <configure_usart_callbacks+0x30>)
     30a:	0020      	movs	r0, r4
     30c:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     30e:	2231      	movs	r2, #49	; 0x31
     310:	5ca3      	ldrb	r3, [r4, r2]
     312:	2103      	movs	r1, #3
     314:	430b      	orrs	r3, r1
     316:	54a3      	strb	r3, [r4, r2]

    //! [setup_enable_callbacks]
    usart_enable_callback(&bt_usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
    usart_enable_callback(&bt_usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
    //! [setup_enable_callbacks]
}
     318:	bd70      	pop	{r4, r5, r6, pc}
     31a:	46c0      	nop			; (mov r8, r8)
     31c:	20000130 	.word	0x20000130
     320:	00000205 	.word	0x00000205
     324:	000023a5 	.word	0x000023a5
     328:	000004d9 	.word	0x000004d9

0000032c <bt_usart_write_job>:

//=============================================================================
//! \brief Write at the BT USART.
//=============================================================================
void bt_usart_write_job(uint8_t *string, uint16_t length)
{
     32c:	b510      	push	{r4, lr}
     32e:	000a      	movs	r2, r1
    usart_write_buffer_job(&bt_usart_instance, string, length);
     330:	0001      	movs	r1, r0
     332:	4802      	ldr	r0, [pc, #8]	; (33c <bt_usart_write_job+0x10>)
     334:	4b02      	ldr	r3, [pc, #8]	; (340 <bt_usart_write_job+0x14>)
     336:	4798      	blx	r3
}
     338:	bd10      	pop	{r4, pc}
     33a:	46c0      	nop			; (mov r8, r8)
     33c:	20000130 	.word	0x20000130
     340:	000023bd 	.word	0x000023bd

00000344 <bt_usart_receive_job>:

//=============================================================================
//! \brief Check for received messages at the BT USART.
//=============================================================================
void bt_usart_receive_job(void)
{
     344:	b510      	push	{r4, lr}
    usart_read_buffer_job(&bt_usart_instance, (uint8_t *)rx_buffer, MIN_RX_BUFFER_LENGTH);
     346:	2201      	movs	r2, #1
     348:	4902      	ldr	r1, [pc, #8]	; (354 <bt_usart_receive_job+0x10>)
     34a:	4803      	ldr	r0, [pc, #12]	; (358 <bt_usart_receive_job+0x14>)
     34c:	4b03      	ldr	r3, [pc, #12]	; (35c <bt_usart_receive_job+0x18>)
     34e:	4798      	blx	r3
}
     350:	bd10      	pop	{r4, pc}
     352:	46c0      	nop			; (mov r8, r8)
     354:	200001c0 	.word	0x200001c0
     358:	20000130 	.word	0x20000130
     35c:	000023dd 	.word	0x000023dd

00000360 <bt_start_setup>:

//=============================================================================
//! \brief Send the handshake to BT USART.
//=============================================================================
void bt_start_setup()
{
     360:	b510      	push	{r4, lr}
    uint8_t* init_resp = "<BOARD>";
    usart_write_buffer_job(&bt_usart_instance, init_resp, 7);
     362:	2207      	movs	r2, #7
     364:	4906      	ldr	r1, [pc, #24]	; (380 <bt_start_setup+0x20>)
     366:	4807      	ldr	r0, [pc, #28]	; (384 <bt_start_setup+0x24>)
     368:	4b07      	ldr	r3, [pc, #28]	; (388 <bt_start_setup+0x28>)
     36a:	4798      	blx	r3
    bt_timer = 0;
     36c:	2300      	movs	r3, #0
     36e:	4a07      	ldr	r2, [pc, #28]	; (38c <bt_start_setup+0x2c>)
     370:	6013      	str	r3, [r2, #0]
    bt_connected = true;
     372:	2101      	movs	r1, #1
     374:	4a06      	ldr	r2, [pc, #24]	; (390 <bt_start_setup+0x30>)
     376:	7011      	strb	r1, [r2, #0]
    poll_requested = false;
     378:	4a06      	ldr	r2, [pc, #24]	; (394 <bt_start_setup+0x34>)
     37a:	7013      	strb	r3, [r2, #0]
}
     37c:	bd10      	pop	{r4, pc}
     37e:	46c0      	nop			; (mov r8, r8)
     380:	00005918 	.word	0x00005918
     384:	20000130 	.word	0x20000130
     388:	000023bd 	.word	0x000023bd
     38c:	200001f0 	.word	0x200001f0
     390:	200001f7 	.word	0x200001f7
     394:	200001cc 	.word	0x200001cc

00000398 <bt_received>:
{
     398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     39a:	0005      	movs	r5, r0
    if (!bt_connected)
     39c:	4b3e      	ldr	r3, [pc, #248]	; (498 <bt_received+0x100>)
     39e:	781b      	ldrb	r3, [r3, #0]
     3a0:	2b00      	cmp	r3, #0
     3a2:	d108      	bne.n	3b6 <bt_received+0x1e>
        if (strcmp((const char*) received_msg, "OCTO") == 0)
     3a4:	493d      	ldr	r1, [pc, #244]	; (49c <bt_received+0x104>)
     3a6:	4b3e      	ldr	r3, [pc, #248]	; (4a0 <bt_received+0x108>)
     3a8:	4798      	blx	r3
     3aa:	2800      	cmp	r0, #0
     3ac:	d000      	beq.n	3b0 <bt_received+0x18>
}
     3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            bt_start_setup();
     3b0:	4b3c      	ldr	r3, [pc, #240]	; (4a4 <bt_received+0x10c>)
     3b2:	4798      	blx	r3
     3b4:	e7fb      	b.n	3ae <bt_received+0x16>
        if (received_msg[0] == 'W')
     3b6:	7803      	ldrb	r3, [r0, #0]
     3b8:	2b57      	cmp	r3, #87	; 0x57
     3ba:	d00c      	beq.n	3d6 <bt_received+0x3e>
        else if (received_msg[0] == 'D')
     3bc:	2b44      	cmp	r3, #68	; 0x44
     3be:	d054      	beq.n	46a <bt_received+0xd2>
        else if (received_msg[0] == 'C')
     3c0:	2b43      	cmp	r3, #67	; 0x43
     3c2:	d059      	beq.n	478 <bt_received+0xe0>
        else if(strcmp((const char*) received_msg, "OK") == 0)
     3c4:	4938      	ldr	r1, [pc, #224]	; (4a8 <bt_received+0x110>)
     3c6:	4b36      	ldr	r3, [pc, #216]	; (4a0 <bt_received+0x108>)
     3c8:	4798      	blx	r3
     3ca:	2800      	cmp	r0, #0
     3cc:	d1ef      	bne.n	3ae <bt_received+0x16>
            poll_requested = false;
     3ce:	2200      	movs	r2, #0
     3d0:	4b36      	ldr	r3, [pc, #216]	; (4ac <bt_received+0x114>)
     3d2:	701a      	strb	r2, [r3, #0]
}
     3d4:	e7eb      	b.n	3ae <bt_received+0x16>
            int nr_params = received_msg[2] - 0x30;
     3d6:	7887      	ldrb	r7, [r0, #2]
     3d8:	3f30      	subs	r7, #48	; 0x30
            for (int i = 0; i < nr_params; i++, index+=4)
     3da:	2f00      	cmp	r7, #0
     3dc:	dd3f      	ble.n	45e <bt_received+0xc6>
     3de:	2600      	movs	r6, #0
     3e0:	2404      	movs	r4, #4
     3e2:	e009      	b.n	3f8 <bt_received+0x60>
                    change_light_mode((E_LIGHT_MODE) received_msg[index+2] - 0x30);
     3e4:	192b      	adds	r3, r5, r4
     3e6:	7898      	ldrb	r0, [r3, #2]
     3e8:	3830      	subs	r0, #48	; 0x30
     3ea:	b2c0      	uxtb	r0, r0
     3ec:	4b30      	ldr	r3, [pc, #192]	; (4b0 <bt_received+0x118>)
     3ee:	4798      	blx	r3
            for (int i = 0; i < nr_params; i++, index+=4)
     3f0:	3601      	adds	r6, #1
     3f2:	3404      	adds	r4, #4
     3f4:	42b7      	cmp	r7, r6
     3f6:	dd32      	ble.n	45e <bt_received+0xc6>
                if (received_msg[index] == 'L')
     3f8:	5d2b      	ldrb	r3, [r5, r4]
     3fa:	2b4c      	cmp	r3, #76	; 0x4c
     3fc:	d0f2      	beq.n	3e4 <bt_received+0x4c>
                else if (received_msg[index] == 'F')
     3fe:	2b46      	cmp	r3, #70	; 0x46
     400:	d011      	beq.n	426 <bt_received+0x8e>
                else if (received_msg[index] == 'I')
     402:	2b49      	cmp	r3, #73	; 0x49
     404:	d016      	beq.n	434 <bt_received+0x9c>
                else if (received_msg[index] == 'P')
     406:	2b50      	cmp	r3, #80	; 0x50
     408:	d1f2      	bne.n	3f0 <bt_received+0x58>
                    uint16_t new_threshold = ((received_msg[index+2] - 0x30) * 10) + (received_msg[index+3] - 0x30);
     40a:	192a      	adds	r2, r5, r4
     40c:	7890      	ldrb	r0, [r2, #2]
     40e:	3830      	subs	r0, #48	; 0x30
     410:	0083      	lsls	r3, r0, #2
     412:	18c0      	adds	r0, r0, r3
     414:	0040      	lsls	r0, r0, #1
     416:	78d3      	ldrb	r3, [r2, #3]
     418:	3b30      	subs	r3, #48	; 0x30
     41a:	18c0      	adds	r0, r0, r3
                    change_light_threshold(new_threshold);
     41c:	b280      	uxth	r0, r0
     41e:	4b25      	ldr	r3, [pc, #148]	; (4b4 <bt_received+0x11c>)
     420:	4798      	blx	r3
					index++;
     422:	3401      	adds	r4, #1
     424:	e7e4      	b.n	3f0 <bt_received+0x58>
                    change_light_freq((E_LIGHT_FREQ) received_msg[index+2] - 0x30);
     426:	192a      	adds	r2, r5, r4
     428:	7890      	ldrb	r0, [r2, #2]
     42a:	3830      	subs	r0, #48	; 0x30
     42c:	b2c0      	uxtb	r0, r0
     42e:	4b22      	ldr	r3, [pc, #136]	; (4b8 <bt_received+0x120>)
     430:	4798      	blx	r3
     432:	e7dd      	b.n	3f0 <bt_received+0x58>
                    uint16_t light_perhundred = ((received_msg[index+2] - 0x30) * 10) + (received_msg[index+3] - 0x30);
     434:	192a      	adds	r2, r5, r4
     436:	7893      	ldrb	r3, [r2, #2]
     438:	3b30      	subs	r3, #48	; 0x30
     43a:	0098      	lsls	r0, r3, #2
     43c:	1818      	adds	r0, r3, r0
     43e:	0040      	lsls	r0, r0, #1
     440:	78d3      	ldrb	r3, [r2, #3]
     442:	3b30      	subs	r3, #48	; 0x30
     444:	18c0      	adds	r0, r0, r3
                    uint16_t light_perthousand = ((light_perhundred * 850) / 100) + 100;
     446:	b280      	uxth	r0, r0
     448:	4b1c      	ldr	r3, [pc, #112]	; (4bc <bt_received+0x124>)
     44a:	4358      	muls	r0, r3
     44c:	2164      	movs	r1, #100	; 0x64
     44e:	4b1c      	ldr	r3, [pc, #112]	; (4c0 <bt_received+0x128>)
     450:	4798      	blx	r3
     452:	3064      	adds	r0, #100	; 0x64
                    change_light_bright(light_perthousand);
     454:	b280      	uxth	r0, r0
     456:	4b1b      	ldr	r3, [pc, #108]	; (4c4 <bt_received+0x12c>)
     458:	4798      	blx	r3
					index++;
     45a:	3401      	adds	r4, #1
     45c:	e7c8      	b.n	3f0 <bt_received+0x58>
            usart_write_buffer_job(&bt_usart_instance, init_resp, 4);
     45e:	2204      	movs	r2, #4
     460:	4919      	ldr	r1, [pc, #100]	; (4c8 <bt_received+0x130>)
     462:	481a      	ldr	r0, [pc, #104]	; (4cc <bt_received+0x134>)
     464:	4b1a      	ldr	r3, [pc, #104]	; (4d0 <bt_received+0x138>)
     466:	4798      	blx	r3
     468:	e7a1      	b.n	3ae <bt_received+0x16>
            change_light_mode(E_LIGHT_ON);
     46a:	2001      	movs	r0, #1
     46c:	4b10      	ldr	r3, [pc, #64]	; (4b0 <bt_received+0x118>)
     46e:	4798      	blx	r3
            bt_connected = false;
     470:	2200      	movs	r2, #0
     472:	4b09      	ldr	r3, [pc, #36]	; (498 <bt_received+0x100>)
     474:	701a      	strb	r2, [r3, #0]
     476:	e79a      	b.n	3ae <bt_received+0x16>
            if (received_msg[2] == '1')
     478:	7883      	ldrb	r3, [r0, #2]
     47a:	2b31      	cmp	r3, #49	; 0x31
     47c:	d008      	beq.n	490 <bt_received+0xf8>
                bcap_enable = false;
     47e:	2200      	movs	r2, #0
     480:	4b14      	ldr	r3, [pc, #80]	; (4d4 <bt_received+0x13c>)
     482:	701a      	strb	r2, [r3, #0]
            usart_write_buffer_job(&bt_usart_instance, init_resp, 4);
     484:	2204      	movs	r2, #4
     486:	4910      	ldr	r1, [pc, #64]	; (4c8 <bt_received+0x130>)
     488:	4810      	ldr	r0, [pc, #64]	; (4cc <bt_received+0x134>)
     48a:	4b11      	ldr	r3, [pc, #68]	; (4d0 <bt_received+0x138>)
     48c:	4798      	blx	r3
     48e:	e78e      	b.n	3ae <bt_received+0x16>
                bcap_enable = true;
     490:	2201      	movs	r2, #1
     492:	4b10      	ldr	r3, [pc, #64]	; (4d4 <bt_received+0x13c>)
     494:	701a      	strb	r2, [r3, #0]
     496:	e7f5      	b.n	484 <bt_received+0xec>
     498:	200001f7 	.word	0x200001f7
     49c:	00005904 	.word	0x00005904
     4a0:	00005105 	.word	0x00005105
     4a4:	00000361 	.word	0x00000361
     4a8:	00005914 	.word	0x00005914
     4ac:	200001cc 	.word	0x200001cc
     4b0:	00002e85 	.word	0x00002e85
     4b4:	00002ea9 	.word	0x00002ea9
     4b8:	00002e91 	.word	0x00002e91
     4bc:	00000352 	.word	0x00000352
     4c0:	00003571 	.word	0x00003571
     4c4:	00002e9d 	.word	0x00002e9d
     4c8:	0000590c 	.word	0x0000590c
     4cc:	20000130 	.word	0x20000130
     4d0:	000023bd 	.word	0x000023bd
     4d4:	20000129 	.word	0x20000129

000004d8 <usart_read_callback>:
{    
     4d8:	b510      	push	{r4, lr}
    if ((!bt_start_received) && (rx_buffer[0] == '<'))
     4da:	4b11      	ldr	r3, [pc, #68]	; (520 <usart_read_callback+0x48>)
     4dc:	781b      	ldrb	r3, [r3, #0]
     4de:	2b00      	cmp	r3, #0
     4e0:	d103      	bne.n	4ea <usart_read_callback+0x12>
     4e2:	4b10      	ldr	r3, [pc, #64]	; (524 <usart_read_callback+0x4c>)
     4e4:	781b      	ldrb	r3, [r3, #0]
     4e6:	2b3c      	cmp	r3, #60	; 0x3c
     4e8:	d00a      	beq.n	500 <usart_read_callback+0x28>
        if (rx_buffer[0] == '>')
     4ea:	4b0e      	ldr	r3, [pc, #56]	; (524 <usart_read_callback+0x4c>)
     4ec:	781a      	ldrb	r2, [r3, #0]
     4ee:	2a3e      	cmp	r2, #62	; 0x3e
     4f0:	d00a      	beq.n	508 <usart_read_callback+0x30>
            bt_message[bt_counting] = rx_buffer[0];
     4f2:	490d      	ldr	r1, [pc, #52]	; (528 <usart_read_callback+0x50>)
     4f4:	780b      	ldrb	r3, [r1, #0]
     4f6:	480d      	ldr	r0, [pc, #52]	; (52c <usart_read_callback+0x54>)
     4f8:	54c2      	strb	r2, [r0, r3]
            bt_counting++;
     4fa:	3301      	adds	r3, #1
     4fc:	700b      	strb	r3, [r1, #0]
}
     4fe:	bd10      	pop	{r4, pc}
        bt_start_received = true;
     500:	2201      	movs	r2, #1
     502:	4b07      	ldr	r3, [pc, #28]	; (520 <usart_read_callback+0x48>)
     504:	701a      	strb	r2, [r3, #0]
     506:	e7fa      	b.n	4fe <usart_read_callback+0x26>
            bt_received(bt_message);
     508:	4808      	ldr	r0, [pc, #32]	; (52c <usart_read_callback+0x54>)
     50a:	4b09      	ldr	r3, [pc, #36]	; (530 <usart_read_callback+0x58>)
     50c:	4798      	blx	r3
            clean_array(bt_counting);
     50e:	4c06      	ldr	r4, [pc, #24]	; (528 <usart_read_callback+0x50>)
     510:	7820      	ldrb	r0, [r4, #0]
     512:	4b08      	ldr	r3, [pc, #32]	; (534 <usart_read_callback+0x5c>)
     514:	4798      	blx	r3
            bt_counting = 0;
     516:	2300      	movs	r3, #0
     518:	7023      	strb	r3, [r4, #0]
            bt_start_received = false;
     51a:	4a01      	ldr	r2, [pc, #4]	; (520 <usart_read_callback+0x48>)
     51c:	7013      	strb	r3, [r2, #0]
     51e:	e7ee      	b.n	4fe <usart_read_callback+0x26>
     520:	20000099 	.word	0x20000099
     524:	200001c0 	.word	0x200001c0
     528:	20000098 	.word	0x20000098
     52c:	200001d0 	.word	0x200001d0
     530:	00000399 	.word	0x00000399
     534:	000001ed 	.word	0x000001ed

00000538 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     538:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     53a:	2000      	movs	r0, #0
     53c:	4b08      	ldr	r3, [pc, #32]	; (560 <delay_init+0x28>)
     53e:	4798      	blx	r3
     540:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     542:	4c08      	ldr	r4, [pc, #32]	; (564 <delay_init+0x2c>)
     544:	21fa      	movs	r1, #250	; 0xfa
     546:	0089      	lsls	r1, r1, #2
     548:	47a0      	blx	r4
     54a:	4b07      	ldr	r3, [pc, #28]	; (568 <delay_init+0x30>)
     54c:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     54e:	4907      	ldr	r1, [pc, #28]	; (56c <delay_init+0x34>)
     550:	0028      	movs	r0, r5
     552:	47a0      	blx	r4
     554:	4b06      	ldr	r3, [pc, #24]	; (570 <delay_init+0x38>)
     556:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     558:	2205      	movs	r2, #5
     55a:	4b06      	ldr	r3, [pc, #24]	; (574 <delay_init+0x3c>)
     55c:	601a      	str	r2, [r3, #0]
}
     55e:	bd70      	pop	{r4, r5, r6, pc}
     560:	00002b09 	.word	0x00002b09
     564:	0000345d 	.word	0x0000345d
     568:	20000000 	.word	0x20000000
     56c:	000f4240 	.word	0x000f4240
     570:	20000004 	.word	0x20000004
     574:	e000e010 	.word	0xe000e010

00000578 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     578:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     57a:	4b08      	ldr	r3, [pc, #32]	; (59c <delay_cycles_ms+0x24>)
     57c:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     57e:	4a08      	ldr	r2, [pc, #32]	; (5a0 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     580:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     582:	2180      	movs	r1, #128	; 0x80
     584:	0249      	lsls	r1, r1, #9
	while (n--) {
     586:	3801      	subs	r0, #1
     588:	d307      	bcc.n	59a <delay_cycles_ms+0x22>
	if (n > 0) {
     58a:	2c00      	cmp	r4, #0
     58c:	d0fb      	beq.n	586 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     58e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     590:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     592:	6813      	ldr	r3, [r2, #0]
     594:	420b      	tst	r3, r1
     596:	d0fc      	beq.n	592 <delay_cycles_ms+0x1a>
     598:	e7f5      	b.n	586 <delay_cycles_ms+0xe>
	}
}
     59a:	bd30      	pop	{r4, r5, pc}
     59c:	20000000 	.word	0x20000000
     5a0:	e000e010 	.word	0xe000e010

000005a4 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     5a4:	6803      	ldr	r3, [r0, #0]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     5a6:	7a98      	ldrb	r0, [r3, #10]
     5a8:	09c0      	lsrs	r0, r0, #7
                return true;
        }

        return false;
}
     5aa:	4770      	bx	lr

000005ac <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     5ac:	b570      	push	{r4, r5, r6, lr}
     5ae:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     5b0:	6806      	ldr	r6, [r0, #0]
     5b2:	2208      	movs	r2, #8
     5b4:	4b05      	ldr	r3, [pc, #20]	; (5cc <rtc_count_enable+0x20>)
     5b6:	601a      	str	r2, [r3, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     5b8:	4d05      	ldr	r5, [pc, #20]	; (5d0 <rtc_count_enable+0x24>)
     5ba:	0020      	movs	r0, r4
     5bc:	47a8      	blx	r5
     5be:	2800      	cmp	r0, #0
     5c0:	d1fb      	bne.n	5ba <rtc_count_enable+0xe>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     5c2:	8833      	ldrh	r3, [r6, #0]
     5c4:	2202      	movs	r2, #2
     5c6:	4313      	orrs	r3, r2
     5c8:	8033      	strh	r3, [r6, #0]
}
     5ca:	bd70      	pop	{r4, r5, r6, pc}
     5cc:	e000e100 	.word	0xe000e100
     5d0:	000005a5 	.word	0x000005a5

000005d4 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     5d4:	b570      	push	{r4, r5, r6, lr}
     5d6:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     5d8:	6806      	ldr	r6, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     5da:	2108      	movs	r1, #8
     5dc:	2380      	movs	r3, #128	; 0x80
     5de:	4a06      	ldr	r2, [pc, #24]	; (5f8 <rtc_count_disable+0x24>)
     5e0:	50d1      	str	r1, [r2, r3]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     5e2:	4d06      	ldr	r5, [pc, #24]	; (5fc <rtc_count_disable+0x28>)
     5e4:	0020      	movs	r0, r4
     5e6:	47a8      	blx	r5
     5e8:	2800      	cmp	r0, #0
     5ea:	d1fb      	bne.n	5e4 <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     5ec:	8833      	ldrh	r3, [r6, #0]
     5ee:	2202      	movs	r2, #2
     5f0:	4393      	bics	r3, r2
     5f2:	8033      	strh	r3, [r6, #0]
}
     5f4:	bd70      	pop	{r4, r5, r6, pc}
     5f6:	46c0      	nop			; (mov r8, r8)
     5f8:	e000e100 	.word	0xe000e100
     5fc:	000005a5 	.word	0x000005a5

00000600 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     600:	b570      	push	{r4, r5, r6, lr}
     602:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     604:	6806      	ldr	r6, [r0, #0]

	/* Disable module before reset. */
	rtc_count_disable(module);
     606:	4b07      	ldr	r3, [pc, #28]	; (624 <rtc_count_reset+0x24>)
     608:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
     60a:	2300      	movs	r3, #0
     60c:	82a3      	strh	r3, [r4, #20]
	module->enabled_callback    = 0;
     60e:	82e3      	strh	r3, [r4, #22]
#endif

	while (rtc_count_is_syncing(module)) {
     610:	4d05      	ldr	r5, [pc, #20]	; (628 <rtc_count_reset+0x28>)
     612:	0020      	movs	r0, r4
     614:	47a8      	blx	r5
     616:	2800      	cmp	r0, #0
     618:	d1fb      	bne.n	612 <rtc_count_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     61a:	8833      	ldrh	r3, [r6, #0]
     61c:	2201      	movs	r2, #1
     61e:	4313      	orrs	r3, r2
     620:	8033      	strh	r3, [r6, #0]
}
     622:	bd70      	pop	{r4, r5, r6, pc}
     624:	000005d5 	.word	0x000005d5
     628:	000005a5 	.word	0x000005a5

0000062c <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     62c:	b5f0      	push	{r4, r5, r6, r7, lr}
     62e:	b083      	sub	sp, #12
     630:	0004      	movs	r4, r0
     632:	9101      	str	r1, [sp, #4]
     634:	0015      	movs	r5, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     636:	6806      	ldr	r6, [r0, #0]

	while (rtc_count_is_syncing(module)) {
     638:	4f11      	ldr	r7, [pc, #68]	; (680 <rtc_count_set_compare+0x54>)
     63a:	0020      	movs	r0, r4
     63c:	47b8      	blx	r7
     63e:	2800      	cmp	r0, #0
     640:	d1fb      	bne.n	63a <rtc_count_set_compare+0xe>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     642:	7923      	ldrb	r3, [r4, #4]
     644:	2b00      	cmp	r3, #0
     646:	d00a      	beq.n	65e <rtc_count_set_compare+0x32>
     648:	2b01      	cmp	r3, #1
     64a:	d116      	bne.n	67a <rtc_count_set_compare+0x4e>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
				return STATUS_ERR_INVALID_ARG;
     64c:	3017      	adds	r0, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
     64e:	2d01      	cmp	r5, #1
     650:	d814      	bhi.n	67c <rtc_count_set_compare+0x50>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     652:	3506      	adds	r5, #6
     654:	00ad      	lsls	r5, r5, #2
     656:	9b01      	ldr	r3, [sp, #4]
     658:	51ab      	str	r3, [r5, r6]
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     65a:	2000      	movs	r0, #0
			break;
     65c:	e00e      	b.n	67c <rtc_count_set_compare+0x50>
				return STATUS_ERR_INVALID_ARG;
     65e:	2017      	movs	r0, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     660:	2d02      	cmp	r5, #2
     662:	d80b      	bhi.n	67c <rtc_count_set_compare+0x50>
			if (comp_value > 0xffff) {
     664:	4b07      	ldr	r3, [pc, #28]	; (684 <rtc_count_set_compare+0x58>)
     666:	9a01      	ldr	r2, [sp, #4]
     668:	429a      	cmp	r2, r3
     66a:	d807      	bhi.n	67c <rtc_count_set_compare+0x50>
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     66c:	466b      	mov	r3, sp
     66e:	889b      	ldrh	r3, [r3, #4]
     670:	350c      	adds	r5, #12
     672:	006d      	lsls	r5, r5, #1
     674:	53ab      	strh	r3, [r5, r6]
	return STATUS_OK;
     676:	2000      	movs	r0, #0
			break;
     678:	e000      	b.n	67c <rtc_count_set_compare+0x50>
			return STATUS_ERR_BAD_FORMAT;
     67a:	201a      	movs	r0, #26
}
     67c:	b003      	add	sp, #12
     67e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     680:	000005a5 	.word	0x000005a5
     684:	0000ffff 	.word	0x0000ffff

00000688 <rtc_count_init>:
{
     688:	b5f0      	push	{r4, r5, r6, r7, lr}
     68a:	b083      	sub	sp, #12
     68c:	0004      	movs	r4, r0
     68e:	0016      	movs	r6, r2
	module->hw = hw;
     690:	6001      	str	r1, [r0, #0]
     692:	4a2e      	ldr	r2, [pc, #184]	; (74c <rtc_count_init+0xc4>)
     694:	6993      	ldr	r3, [r2, #24]
     696:	2120      	movs	r1, #32
     698:	430b      	orrs	r3, r1
     69a:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     69c:	a901      	add	r1, sp, #4
     69e:	2302      	movs	r3, #2
     6a0:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     6a2:	2004      	movs	r0, #4
     6a4:	4b2a      	ldr	r3, [pc, #168]	; (750 <rtc_count_init+0xc8>)
     6a6:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     6a8:	2004      	movs	r0, #4
     6aa:	4b2a      	ldr	r3, [pc, #168]	; (754 <rtc_count_init+0xcc>)
     6ac:	4798      	blx	r3
	rtc_count_reset(module);
     6ae:	0020      	movs	r0, r4
     6b0:	4b29      	ldr	r3, [pc, #164]	; (758 <rtc_count_init+0xd0>)
     6b2:	4798      	blx	r3
	module->mode                = config->mode;
     6b4:	78b3      	ldrb	r3, [r6, #2]
     6b6:	7123      	strb	r3, [r4, #4]
	module->continuously_update = config->continuously_update;
     6b8:	7933      	ldrb	r3, [r6, #4]
     6ba:	7163      	strb	r3, [r4, #5]
	_rtc_instance[0] = module;
     6bc:	4b27      	ldr	r3, [pc, #156]	; (75c <rtc_count_init+0xd4>)
     6be:	601c      	str	r4, [r3, #0]
	Rtc *const rtc_module = module->hw;
     6c0:	6827      	ldr	r7, [r4, #0]
	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
     6c2:	8833      	ldrh	r3, [r6, #0]
     6c4:	803b      	strh	r3, [r7, #0]
	switch (config->mode) {
     6c6:	78b3      	ldrb	r3, [r6, #2]
     6c8:	2b00      	cmp	r3, #0
     6ca:	d021      	beq.n	710 <rtc_count_init+0x88>
			return STATUS_ERR_INVALID_ARG;
     6cc:	2017      	movs	r0, #23
	switch (config->mode) {
     6ce:	2b01      	cmp	r3, #1
     6d0:	d11c      	bne.n	70c <rtc_count_init+0x84>
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
     6d2:	883b      	ldrh	r3, [r7, #0]
     6d4:	b29b      	uxth	r3, r3
     6d6:	803b      	strh	r3, [r7, #0]
			if (config->clear_on_match) {
     6d8:	78f3      	ldrb	r3, [r6, #3]
     6da:	2b00      	cmp	r3, #0
     6dc:	d003      	beq.n	6e6 <rtc_count_init+0x5e>
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
     6de:	883b      	ldrh	r3, [r7, #0]
     6e0:	2280      	movs	r2, #128	; 0x80
     6e2:	4313      	orrs	r3, r2
     6e4:	803b      	strh	r3, [r7, #0]
				while (rtc_count_is_syncing(module)) {
     6e6:	4d1e      	ldr	r5, [pc, #120]	; (760 <rtc_count_init+0xd8>)
     6e8:	0020      	movs	r0, r4
     6ea:	47a8      	blx	r5
     6ec:	2800      	cmp	r0, #0
     6ee:	d1fb      	bne.n	6e8 <rtc_count_init+0x60>
				rtc_count_set_compare(module, config->compare_values[i],
     6f0:	2200      	movs	r2, #0
     6f2:	68b1      	ldr	r1, [r6, #8]
     6f4:	0020      	movs	r0, r4
     6f6:	4b1b      	ldr	r3, [pc, #108]	; (764 <rtc_count_init+0xdc>)
     6f8:	4798      	blx	r3
	if (config->continuously_update) {
     6fa:	7933      	ldrb	r3, [r6, #4]
	return STATUS_OK;
     6fc:	2000      	movs	r0, #0
	if (config->continuously_update) {
     6fe:	2b00      	cmp	r3, #0
     700:	d004      	beq.n	70c <rtc_count_init+0x84>
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     702:	887b      	ldrh	r3, [r7, #2]
     704:	2280      	movs	r2, #128	; 0x80
     706:	01d2      	lsls	r2, r2, #7
     708:	4313      	orrs	r3, r2
     70a:	807b      	strh	r3, [r7, #2]
}
     70c:	b003      	add	sp, #12
     70e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
     710:	883b      	ldrh	r3, [r7, #0]
     712:	2204      	movs	r2, #4
     714:	4313      	orrs	r3, r2
     716:	803b      	strh	r3, [r7, #0]
			if (config->clear_on_match) {
     718:	78f3      	ldrb	r3, [r6, #3]
				return STATUS_ERR_INVALID_ARG;
     71a:	2017      	movs	r0, #23
			if (config->clear_on_match) {
     71c:	2b00      	cmp	r3, #0
     71e:	d1f5      	bne.n	70c <rtc_count_init+0x84>
				while (rtc_count_is_syncing(module)) {
     720:	4d0f      	ldr	r5, [pc, #60]	; (760 <rtc_count_init+0xd8>)
     722:	0020      	movs	r0, r4
     724:	47a8      	blx	r5
     726:	2800      	cmp	r0, #0
     728:	d1fb      	bne.n	722 <rtc_count_init+0x9a>
				rtc_count_set_compare(module, config->compare_values[i],
     72a:	2200      	movs	r2, #0
     72c:	68b1      	ldr	r1, [r6, #8]
     72e:	0020      	movs	r0, r4
     730:	4b0c      	ldr	r3, [pc, #48]	; (764 <rtc_count_init+0xdc>)
     732:	4798      	blx	r3
				while (rtc_count_is_syncing(module)) {
     734:	4d0a      	ldr	r5, [pc, #40]	; (760 <rtc_count_init+0xd8>)
     736:	0020      	movs	r0, r4
     738:	47a8      	blx	r5
     73a:	2800      	cmp	r0, #0
     73c:	d1fb      	bne.n	736 <rtc_count_init+0xae>
				rtc_count_set_compare(module, config->compare_values[i],
     73e:	2201      	movs	r2, #1
     740:	68f1      	ldr	r1, [r6, #12]
     742:	0020      	movs	r0, r4
     744:	4b07      	ldr	r3, [pc, #28]	; (764 <rtc_count_init+0xdc>)
     746:	4798      	blx	r3
     748:	e7d7      	b.n	6fa <rtc_count_init+0x72>
     74a:	46c0      	nop			; (mov r8, r8)
     74c:	40000400 	.word	0x40000400
     750:	00002c21 	.word	0x00002c21
     754:	00002b95 	.word	0x00002b95
     758:	00000601 	.word	0x00000601
     75c:	200001fc 	.word	0x200001fc
     760:	000005a5 	.word	0x000005a5
     764:	0000062d 	.word	0x0000062d

00000768 <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
     768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     76a:	0004      	movs	r4, r0
     76c:	000e      	movs	r6, r1
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     76e:	7903      	ldrb	r3, [r0, #4]
		return STATUS_ERR_UNSUPPORTED_DEV;
     770:	2015      	movs	r0, #21
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     772:	2b00      	cmp	r3, #0
     774:	d000      	beq.n	778 <rtc_count_set_period+0x10>

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;

	return STATUS_OK;
}
     776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	Rtc *const rtc_module = module->hw;
     778:	6827      	ldr	r7, [r4, #0]
	while (rtc_count_is_syncing(module)) {
     77a:	4d03      	ldr	r5, [pc, #12]	; (788 <rtc_count_set_period+0x20>)
     77c:	0020      	movs	r0, r4
     77e:	47a8      	blx	r5
     780:	2800      	cmp	r0, #0
     782:	d1fb      	bne.n	77c <rtc_count_set_period+0x14>
	rtc_module->MODE1.PER.reg = period_value;
     784:	82be      	strh	r6, [r7, #20]
	return STATUS_OK;
     786:	e7f6      	b.n	776 <rtc_count_set_period+0xe>
     788:	000005a5 	.word	0x000005a5

0000078c <rtc_count_register_callback>:
{

	enum status_code status = STATUS_OK;

	/* Overflow callback */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
     78c:	2a02      	cmp	r2, #2
     78e:	d00b      	beq.n	7a8 <rtc_count_register_callback+0x1c>
		status = STATUS_OK;
	} else {
		/* Make sure callback type can be registered */
		switch (module->mode) {
     790:	7903      	ldrb	r3, [r0, #4]
     792:	2b00      	cmp	r3, #0
     794:	d005      	beq.n	7a2 <rtc_count_register_callback+0x16>
     796:	2b01      	cmp	r3, #1
     798:	d112      	bne.n	7c0 <rtc_count_register_callback+0x34>
     79a:	3316      	adds	r3, #22
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (callback_type > RTC_NUM_OF_COMP32) {
     79c:	2a01      	cmp	r2, #1
     79e:	d80d      	bhi.n	7bc <rtc_count_register_callback+0x30>
     7a0:	e002      	b.n	7a8 <rtc_count_register_callback+0x1c>
     7a2:	2317      	movs	r3, #23
			}

			break;
		case RTC_COUNT_MODE_16BIT:
			/* Check sanity for 16-bit mode. */
			if (callback_type > RTC_NUM_OF_COMP16) {
     7a4:	2a02      	cmp	r2, #2
     7a6:	d809      	bhi.n	7bc <rtc_count_register_callback+0x30>
		}
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
     7a8:	1c93      	adds	r3, r2, #2
     7aa:	009b      	lsls	r3, r3, #2
     7ac:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
     7ae:	8a83      	ldrh	r3, [r0, #20]
     7b0:	2101      	movs	r1, #1
     7b2:	4091      	lsls	r1, r2
     7b4:	430b      	orrs	r3, r1
     7b6:	b29b      	uxth	r3, r3
     7b8:	8283      	strh	r3, [r0, #20]
     7ba:	2300      	movs	r3, #0
	}

	return status;
}
     7bc:	0018      	movs	r0, r3
     7be:	4770      	bx	lr
			status = STATUS_ERR_INVALID_ARG;
     7c0:	2317      	movs	r3, #23
     7c2:	e7fb      	b.n	7bc <rtc_count_register_callback+0x30>

000007c4 <rtc_count_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_count_enable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
     7c4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     7c6:	6804      	ldr	r4, [r0, #0]

	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
     7c8:	2902      	cmp	r1, #2
     7ca:	d00b      	beq.n	7e4 <rtc_count_enable_callback+0x20>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
	} else {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << callback_type);
     7cc:	2201      	movs	r2, #1
     7ce:	408a      	lsls	r2, r1
     7d0:	2303      	movs	r3, #3
     7d2:	4013      	ands	r3, r2
     7d4:	71e3      	strb	r3, [r4, #7]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
     7d6:	8ac3      	ldrh	r3, [r0, #22]
     7d8:	2201      	movs	r2, #1
     7da:	408a      	lsls	r2, r1
     7dc:	4313      	orrs	r3, r2
     7de:	b29b      	uxth	r3, r3
     7e0:	82c3      	strh	r3, [r0, #22]
}
     7e2:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
     7e4:	2380      	movs	r3, #128	; 0x80
     7e6:	71e3      	strb	r3, [r4, #7]
     7e8:	e7f5      	b.n	7d6 <rtc_count_enable_callback+0x12>
	...

000007ec <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     7ec:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
     7ee:	4b14      	ldr	r3, [pc, #80]	; (840 <RTC_Handler+0x54>)
     7f0:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
     7f2:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
     7f4:	8ad1      	ldrh	r1, [r2, #22]
	callback_mask &= module->registered_callback;
     7f6:	8a93      	ldrh	r3, [r2, #20]
     7f8:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
     7fa:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
     7fc:	79e3      	ldrb	r3, [r4, #7]
     7fe:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
     800:	b258      	sxtb	r0, r3
     802:	2800      	cmp	r0, #0
     804:	db06      	blt.n	814 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
     806:	07d8      	lsls	r0, r3, #31
     808:	d50f      	bpl.n	82a <RTC_Handler+0x3e>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
     80a:	07cb      	lsls	r3, r1, #31
     80c:	d40a      	bmi.n	824 <RTC_Handler+0x38>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
     80e:	2301      	movs	r3, #1
     810:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
     812:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
     814:	074b      	lsls	r3, r1, #29
     816:	d402      	bmi.n	81e <RTC_Handler+0x32>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
     818:	2380      	movs	r3, #128	; 0x80
     81a:	7223      	strb	r3, [r4, #8]
     81c:	e7f9      	b.n	812 <RTC_Handler+0x26>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
     81e:	6913      	ldr	r3, [r2, #16]
     820:	4798      	blx	r3
     822:	e7f9      	b.n	818 <RTC_Handler+0x2c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
     824:	6893      	ldr	r3, [r2, #8]
     826:	4798      	blx	r3
     828:	e7f1      	b.n	80e <RTC_Handler+0x22>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
     82a:	079b      	lsls	r3, r3, #30
     82c:	d5f1      	bpl.n	812 <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
     82e:	078b      	lsls	r3, r1, #30
     830:	d402      	bmi.n	838 <RTC_Handler+0x4c>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
     832:	2302      	movs	r3, #2
     834:	7223      	strb	r3, [r4, #8]
}
     836:	e7ec      	b.n	812 <RTC_Handler+0x26>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
     838:	68d3      	ldr	r3, [r2, #12]
     83a:	4798      	blx	r3
     83c:	e7f9      	b.n	832 <RTC_Handler+0x46>
     83e:	46c0      	nop			; (mov r8, r8)
     840:	200001fc 	.word	0x200001fc

00000844 <configure_adc_VMPPT>:
//=============================================================================
//! \brief Initialize ADC peripheral.
//! \return TRUE if that ADC was successfully configured.
//=============================================================================
bool configure_adc_VMPPT (void)
{
     844:	b510      	push	{r4, lr}
     846:	b08c      	sub	sp, #48	; 0x30
    struct adc_config conf_adc;

    adc_get_config_defaults(&conf_adc);
     848:	4668      	mov	r0, sp
     84a:	4b11      	ldr	r3, [pc, #68]	; (890 <configure_adc_VMPPT+0x4c>)
     84c:	4798      	blx	r3

    conf_adc.reference = ADC_REFERENCE_AREFA;
     84e:	2303      	movs	r3, #3
     850:	466a      	mov	r2, sp
     852:	7053      	strb	r3, [r2, #1]
    conf_adc.positive_input = VMPPT_ADC_0_PIN;
     854:	3301      	adds	r3, #1
     856:	7313      	strb	r3, [r2, #12]
    
    //system_voltage_reference_enable(ADC_REFERENCE_AREFA);

    adc_init(&adc_instance, ADC_MODULE, &conf_adc);
     858:	4c0e      	ldr	r4, [pc, #56]	; (894 <configure_adc_VMPPT+0x50>)
     85a:	490f      	ldr	r1, [pc, #60]	; (898 <configure_adc_VMPPT+0x54>)
     85c:	0020      	movs	r0, r4
     85e:	4b0f      	ldr	r3, [pc, #60]	; (89c <configure_adc_VMPPT+0x58>)
     860:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     862:	6822      	ldr	r2, [r4, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     864:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     866:	b25b      	sxtb	r3, r3
     868:	2b00      	cmp	r3, #0
     86a:	dbfb      	blt.n	864 <configure_adc_VMPPT+0x20>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     86c:	2180      	movs	r1, #128	; 0x80
     86e:	0409      	lsls	r1, r1, #16
     870:	4b0b      	ldr	r3, [pc, #44]	; (8a0 <configure_adc_VMPPT+0x5c>)
     872:	6019      	str	r1, [r3, #0]
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
     874:	7813      	ldrb	r3, [r2, #0]
     876:	2102      	movs	r1, #2
     878:	430b      	orrs	r3, r1
     87a:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
     87c:	4b05      	ldr	r3, [pc, #20]	; (894 <configure_adc_VMPPT+0x50>)
     87e:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     880:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     882:	b25b      	sxtb	r3, r3
     884:	2b00      	cmp	r3, #0
     886:	dbfb      	blt.n	880 <configure_adc_VMPPT+0x3c>

    adc_enable(&adc_instance);

    return true;
}
     888:	2001      	movs	r0, #1
     88a:	b00c      	add	sp, #48	; 0x30
     88c:	bd10      	pop	{r4, pc}
     88e:	46c0      	nop			; (mov r8, r8)
     890:	00000bfd 	.word	0x00000bfd
     894:	20000200 	.word	0x20000200
     898:	42004000 	.word	0x42004000
     89c:	00000c45 	.word	0x00000c45
     8a0:	e000e100 	.word	0xe000e100

000008a4 <turn_off_adc>:
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     8a4:	4b0a      	ldr	r3, [pc, #40]	; (8d0 <turn_off_adc+0x2c>)
     8a6:	681a      	ldr	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     8a8:	2080      	movs	r0, #128	; 0x80
     8aa:	0400      	lsls	r0, r0, #16
     8ac:	2380      	movs	r3, #128	; 0x80
     8ae:	4909      	ldr	r1, [pc, #36]	; (8d4 <turn_off_adc+0x30>)
     8b0:	50c8      	str	r0, [r1, r3]
     8b2:	7e53      	ldrb	r3, [r2, #25]
#	else
		system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	while (adc_is_syncing(module_inst)) {
     8b4:	b25b      	sxtb	r3, r3
     8b6:	2b00      	cmp	r3, #0
     8b8:	dbfb      	blt.n	8b2 <turn_off_adc+0xe>
		/* Wait for synchronization */
	}

	adc_module->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
     8ba:	7813      	ldrb	r3, [r2, #0]
     8bc:	2102      	movs	r1, #2
     8be:	438b      	bics	r3, r1
     8c0:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
     8c2:	4b03      	ldr	r3, [pc, #12]	; (8d0 <turn_off_adc+0x2c>)
     8c4:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     8c6:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     8c8:	b25b      	sxtb	r3, r3
     8ca:	2b00      	cmp	r3, #0
     8cc:	dbfb      	blt.n	8c6 <turn_off_adc+0x22>


void turn_off_adc(void)
{
    adc_disable(&adc_instance);
}
     8ce:	4770      	bx	lr
     8d0:	20000200 	.word	0x20000200
     8d4:	e000e100 	.word	0xe000e100

000008d8 <get_value_VMPPT>:


void get_value_VMPPT (uint32_t *value, uint32_t *converted)
{
     8d8:	b5f0      	push	{r4, r5, r6, r7, lr}
     8da:	b083      	sub	sp, #12
     8dc:	000f      	movs	r7, r1
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     8de:	4b21      	ldr	r3, [pc, #132]	; (964 <get_value_VMPPT+0x8c>)
     8e0:	6819      	ldr	r1, [r3, #0]
     8e2:	7e4b      	ldrb	r3, [r1, #25]

	while (adc_is_syncing(module_inst)) {
     8e4:	b25b      	sxtb	r3, r3
     8e6:	2b00      	cmp	r3, #0
     8e8:	dbfb      	blt.n	8e2 <get_value_VMPPT+0xa>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     8ea:	7b0b      	ldrb	r3, [r1, #12]
     8ec:	2202      	movs	r2, #2
     8ee:	4313      	orrs	r3, r2
     8f0:	730b      	strb	r3, [r1, #12]
     8f2:	7e4b      	ldrb	r3, [r1, #25]

	while (adc_is_syncing(module_inst)) {
     8f4:	b25b      	sxtb	r3, r3
     8f6:	2b00      	cmp	r3, #0
     8f8:	dbfb      	blt.n	8f2 <get_value_VMPPT+0x1a>
	if (int_flags & ADC_INTFLAG_RESRDY) {
     8fa:	2401      	movs	r4, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
     8fc:	2604      	movs	r6, #4
		status_flags |= ADC_STATUS_WINDOW;
     8fe:	2502      	movs	r5, #2
     900:	e001      	b.n	906 <get_value_VMPPT+0x2e>
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
     902:	4214      	tst	r4, r2
     904:	d10a      	bne.n	91c <get_value_VMPPT+0x44>
	uint32_t int_flags = adc_module->INTFLAG.reg;
     906:	7e0b      	ldrb	r3, [r1, #24]
     908:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
     90a:	0022      	movs	r2, r4
     90c:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
     90e:	421e      	tst	r6, r3
     910:	d000      	beq.n	914 <get_value_VMPPT+0x3c>
		status_flags |= ADC_STATUS_WINDOW;
     912:	432a      	orrs	r2, r5
	if (int_flags & ADC_INTFLAG_OVERRUN) {
     914:	421d      	tst	r5, r3
     916:	d0f4      	beq.n	902 <get_value_VMPPT+0x2a>
		status_flags |= ADC_STATUS_OVERRUN;
     918:	4332      	orrs	r2, r6
     91a:	e7f2      	b.n	902 <get_value_VMPPT+0x2a>
     91c:	7e4b      	ldrb	r3, [r1, #25]
	}

	Adc *const adc_module = module_inst->hw;

#if (SAMD) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
     91e:	b25b      	sxtb	r3, r3
     920:	2b00      	cmp	r3, #0
     922:	dbfb      	blt.n	91c <get_value_VMPPT+0x44>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
     924:	8b4a      	ldrh	r2, [r1, #26]
     926:	ab01      	add	r3, sp, #4
     928:	801a      	strh	r2, [r3, #0]
	adc_module->INTFLAG.reg = int_flags;
     92a:	2301      	movs	r3, #1
     92c:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
     92e:	7e0a      	ldrb	r2, [r1, #24]
     930:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
     932:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
     934:	0754      	lsls	r4, r2, #29
     936:	d501      	bpl.n	93c <get_value_VMPPT+0x64>
		status_flags |= ADC_STATUS_WINDOW;
     938:	2402      	movs	r4, #2
     93a:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
     93c:	0792      	lsls	r2, r2, #30
     93e:	d501      	bpl.n	944 <get_value_VMPPT+0x6c>
		status_flags |= ADC_STATUS_OVERRUN;
     940:	2204      	movs	r2, #4
     942:	4313      	orrs	r3, r2

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
     944:	075b      	lsls	r3, r3, #29
     946:	d501      	bpl.n	94c <get_value_VMPPT+0x74>
	adc_module->INTFLAG.reg = int_flags;
     948:	2302      	movs	r3, #2
     94a:	760b      	strb	r3, [r1, #24]
    
    do {
        /* Wait for conversion to be done and read out result */
    } while (adc_read(&adc_instance, &adc_reading) == STATUS_BUSY);
    
    reading = ((VMPPT_PULL_UP + VMPPT_PULL_DOWN) * D_ADC_VREF * adc_reading / VMPPT_PULL_DOWN) / D_ADC_RESOLUTION;
     94c:	9b01      	ldr	r3, [sp, #4]
    
    *value = adc_reading;
     94e:	6003      	str	r3, [r0, #0]
    reading = ((VMPPT_PULL_UP + VMPPT_PULL_DOWN) * D_ADC_VREF * adc_reading / VMPPT_PULL_DOWN) / D_ADC_RESOLUTION;
     950:	4805      	ldr	r0, [pc, #20]	; (968 <get_value_VMPPT+0x90>)
     952:	4358      	muls	r0, r3
     954:	21dc      	movs	r1, #220	; 0xdc
     956:	0309      	lsls	r1, r1, #12
     958:	4b04      	ldr	r3, [pc, #16]	; (96c <get_value_VMPPT+0x94>)
     95a:	4798      	blx	r3
    *converted = reading;
     95c:	6038      	str	r0, [r7, #0]
    
    return;
}
     95e:	b003      	add	sp, #12
     960:	bdf0      	pop	{r4, r5, r6, r7, pc}
     962:	46c0      	nop			; (mov r8, r8)
     964:	20000200 	.word	0x20000200
     968:	00101d00 	.word	0x00101d00
     96c:	0000345d 	.word	0x0000345d

00000970 <configure_dac>:
//
struct dac_module dac_instance;

//
void configure_dac()
{
     970:	b510      	push	{r4, lr}
     972:	b082      	sub	sp, #8
    struct dac_config config_dac;
    dac_get_config_defaults(&config_dac);
     974:	4668      	mov	r0, sp
     976:	4b07      	ldr	r3, [pc, #28]	; (994 <configure_dac+0x24>)
     978:	4798      	blx	r3
    config_dac.reference = DAC_REFERENCE_INT1V;
     97a:	2300      	movs	r3, #0
     97c:	466a      	mov	r2, sp
     97e:	7013      	strb	r3, [r2, #0]
    dac_init(&dac_instance, DAC, &config_dac);
     980:	4c05      	ldr	r4, [pc, #20]	; (998 <configure_dac+0x28>)
     982:	4906      	ldr	r1, [pc, #24]	; (99c <configure_dac+0x2c>)
     984:	0020      	movs	r0, r4
     986:	4b06      	ldr	r3, [pc, #24]	; (9a0 <configure_dac+0x30>)
     988:	4798      	blx	r3
    dac_enable(&dac_instance);
     98a:	0020      	movs	r0, r4
     98c:	4b05      	ldr	r3, [pc, #20]	; (9a4 <configure_dac+0x34>)
     98e:	4798      	blx	r3
}
     990:	b002      	add	sp, #8
     992:	bd10      	pop	{r4, pc}
     994:	00001135 	.word	0x00001135
     998:	20000224 	.word	0x20000224
     99c:	42004800 	.word	0x42004800
     9a0:	00001149 	.word	0x00001149
     9a4:	00001219 	.word	0x00001219

000009a8 <set_led_bright_perthousand>:

//
void set_led_bright_perthousand(uint16_t perthousand)
{
     9a8:	b510      	push	{r4, lr}
     9aa:	b082      	sub	sp, #8
     9ac:	0004      	movs	r4, r0
    if (perthousand < LIGHT_MIN)
     9ae:	2863      	cmp	r0, #99	; 0x63
     9b0:	d913      	bls.n	9da <set_led_bright_perthousand+0x32>
        port_pin_set_config(LED_DRIVER_PIN, &pin_conf);
        port_pin_set_output_level(LED_DRIVER_PIN, LED_DRIVER_INACTIVE);
    }
    else
    {
        if (!dac_enabled)
     9b2:	4b19      	ldr	r3, [pc, #100]	; (a18 <set_led_bright_perthousand+0x70>)
     9b4:	781b      	ldrb	r3, [r3, #0]
     9b6:	2b00      	cmp	r3, #0
     9b8:	d01e      	beq.n	9f8 <set_led_bright_perthousand+0x50>
            // Configure the Enable of LED Stripe as output, turn it on
            port_pin_set_config(LED_DRIVER_PIN, &pin_conf);
            port_pin_set_output_level(LED_DRIVER_PIN, LED_DRIVER_ACTIVE);
        }
        
        bright_reference = perthousand;
     9ba:	4b18      	ldr	r3, [pc, #96]	; (a1c <set_led_bright_perthousand+0x74>)
     9bc:	801c      	strh	r4, [r3, #0]
        
        uint16_t led_data = (perthousand*DAC_LED_FULL)/1000;
     9be:	2056      	movs	r0, #86	; 0x56
     9c0:	30ff      	adds	r0, #255	; 0xff
     9c2:	4360      	muls	r0, r4
     9c4:	21fa      	movs	r1, #250	; 0xfa
     9c6:	0089      	lsls	r1, r1, #2
     9c8:	4b15      	ldr	r3, [pc, #84]	; (a20 <set_led_bright_perthousand+0x78>)
     9ca:	4798      	blx	r3
        
        dac_chan_write(&dac_instance, DAC_CHANNEL_0, led_data);
     9cc:	b282      	uxth	r2, r0
     9ce:	2100      	movs	r1, #0
     9d0:	4814      	ldr	r0, [pc, #80]	; (a24 <set_led_bright_perthousand+0x7c>)
     9d2:	4b15      	ldr	r3, [pc, #84]	; (a28 <set_led_bright_perthousand+0x80>)
     9d4:	4798      	blx	r3
    }    
     9d6:	b002      	add	sp, #8
     9d8:	bd10      	pop	{r4, pc}
        dac_enabled = false;
     9da:	2300      	movs	r3, #0
     9dc:	4a0e      	ldr	r2, [pc, #56]	; (a18 <set_led_bright_perthousand+0x70>)
     9de:	7013      	strb	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     9e0:	a901      	add	r1, sp, #4
     9e2:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     9e4:	2201      	movs	r2, #1
     9e6:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     9e8:	708b      	strb	r3, [r1, #2]
        port_pin_set_config(LED_DRIVER_PIN, &pin_conf);
     9ea:	2001      	movs	r0, #1
     9ec:	4b0f      	ldr	r3, [pc, #60]	; (a2c <set_led_bright_perthousand+0x84>)
     9ee:	4798      	blx	r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     9f0:	2202      	movs	r2, #2
     9f2:	4b0f      	ldr	r3, [pc, #60]	; (a30 <set_led_bright_perthousand+0x88>)
     9f4:	615a      	str	r2, [r3, #20]
     9f6:	e7ee      	b.n	9d6 <set_led_bright_perthousand+0x2e>
            dac_enabled = true;
     9f8:	2201      	movs	r2, #1
     9fa:	4b07      	ldr	r3, [pc, #28]	; (a18 <set_led_bright_perthousand+0x70>)
     9fc:	701a      	strb	r2, [r3, #0]
	config->direction  = PORT_PIN_DIR_INPUT;
     9fe:	a901      	add	r1, sp, #4
     a00:	2300      	movs	r3, #0
     a02:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     a04:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     a06:	708b      	strb	r3, [r1, #2]
            port_pin_set_config(LED_DRIVER_PIN, &pin_conf);
     a08:	2001      	movs	r0, #1
     a0a:	4b08      	ldr	r3, [pc, #32]	; (a2c <set_led_bright_perthousand+0x84>)
     a0c:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
     a0e:	2202      	movs	r2, #2
     a10:	4b07      	ldr	r3, [pc, #28]	; (a30 <set_led_bright_perthousand+0x88>)
     a12:	619a      	str	r2, [r3, #24]
     a14:	e7d1      	b.n	9ba <set_led_bright_perthousand+0x12>
     a16:	46c0      	nop			; (mov r8, r8)
     a18:	20000008 	.word	0x20000008
     a1c:	20000220 	.word	0x20000220
     a20:	00003571 	.word	0x00003571
     a24:	20000224 	.word	0x20000224
     a28:	00001255 	.word	0x00001255
     a2c:	00001325 	.word	0x00001325
     a30:	41004400 	.word	0x41004400

00000a34 <gas_gauge_config_CC_registers>:
{
	
}

void gas_gauge_config_CC_registers()
{
     a34:	b530      	push	{r4, r5, lr}
     a36:	b085      	sub	sp, #20
    /* Init i2c packet. */
    struct i2c_master_packet packet = {
     a38:	aa01      	add	r2, sp, #4
     a3a:	4b06      	ldr	r3, [pc, #24]	; (a54 <gas_gauge_config_CC_registers+0x20>)
     a3c:	cb13      	ldmia	r3!, {r0, r1, r4}
     a3e:	c213      	stmia	r2!, {r0, r1, r4}
        .ten_bit_address = false,
        .high_speed = false,
        .hs_master_code = 0x0,
    };
    
    while (i2c_master_write_packet_wait(&gas_gauge_instance, &packet) != STATUS_OK);
     a40:	4d05      	ldr	r5, [pc, #20]	; (a58 <gas_gauge_config_CC_registers+0x24>)
     a42:	4c06      	ldr	r4, [pc, #24]	; (a5c <gas_gauge_config_CC_registers+0x28>)
     a44:	a901      	add	r1, sp, #4
     a46:	0028      	movs	r0, r5
     a48:	47a0      	blx	r4
     a4a:	2800      	cmp	r0, #0
     a4c:	d1fa      	bne.n	a44 <gas_gauge_config_CC_registers+0x10>
}
     a4e:	b005      	add	sp, #20
     a50:	bd30      	pop	{r4, r5, pc}
     a52:	46c0      	nop			; (mov r8, r8)
     a54:	00005920 	.word	0x00005920
     a58:	20000248 	.word	0x20000248
     a5c:	00001971 	.word	0x00001971

00000a60 <configure_gas_gauge>:
{
     a60:	b530      	push	{r4, r5, lr}
     a62:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
     a64:	aa01      	add	r2, sp, #4
     a66:	2364      	movs	r3, #100	; 0x64
     a68:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
     a6a:	4b21      	ldr	r3, [pc, #132]	; (af0 <configure_gas_gauge+0x90>)
     a6c:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
     a6e:	2300      	movs	r3, #0
     a70:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
     a72:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
     a74:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
     a76:	2180      	movs	r1, #128	; 0x80
     a78:	0389      	lsls	r1, r1, #14
     a7a:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
     a7c:	2101      	movs	r1, #1
     a7e:	4249      	negs	r1, r1
     a80:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
     a82:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
     a84:	3125      	adds	r1, #37	; 0x25
     a86:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     a88:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
     a8a:	3108      	adds	r1, #8
     a8c:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
     a8e:	3101      	adds	r1, #1
     a90:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
     a92:	3101      	adds	r1, #1
     a94:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
     a96:	33d7      	adds	r3, #215	; 0xd7
     a98:	8613      	strh	r3, [r2, #48]	; 0x30
    config_gas_gauge.pinmux_pad0 = GAS_GAUGE_I2C_SERCOM_PINMUX_PAD0;
     a9a:	4b16      	ldr	r3, [pc, #88]	; (af4 <configure_gas_gauge+0x94>)
     a9c:	61d3      	str	r3, [r2, #28]
    config_gas_gauge.pinmux_pad1 = GAS_GAUGE_I2C_SERCOM_PINMUX_PAD1;
     a9e:	4b16      	ldr	r3, [pc, #88]	; (af8 <configure_gas_gauge+0x98>)
     aa0:	6213      	str	r3, [r2, #32]
    i2c_master_init(&gas_gauge_instance, GAS_GAUGE_I2C_MODULE, &config_gas_gauge);
     aa2:	4c16      	ldr	r4, [pc, #88]	; (afc <configure_gas_gauge+0x9c>)
     aa4:	4916      	ldr	r1, [pc, #88]	; (b00 <configure_gas_gauge+0xa0>)
     aa6:	0020      	movs	r0, r4
     aa8:	4b16      	ldr	r3, [pc, #88]	; (b04 <configure_gas_gauge+0xa4>)
     aaa:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     aac:	6824      	ldr	r4, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     aae:	2207      	movs	r2, #7
     ab0:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
     ab2:	421a      	tst	r2, r3
     ab4:	d1fc      	bne.n	ab0 <configure_gas_gauge+0x50>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     ab6:	6823      	ldr	r3, [r4, #0]
     ab8:	2202      	movs	r2, #2
     aba:	4313      	orrs	r3, r2
     abc:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     abe:	4d0f      	ldr	r5, [pc, #60]	; (afc <configure_gas_gauge+0x9c>)
     ac0:	6828      	ldr	r0, [r5, #0]
     ac2:	4b11      	ldr	r3, [pc, #68]	; (b08 <configure_gas_gauge+0xa8>)
     ac4:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     ac6:	231f      	movs	r3, #31
     ac8:	4018      	ands	r0, r3
     aca:	3b1e      	subs	r3, #30
     acc:	4083      	lsls	r3, r0
     ace:	4a0f      	ldr	r2, [pc, #60]	; (b0c <configure_gas_gauge+0xac>)
     ad0:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     ad2:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
     ad4:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     ad6:	2110      	movs	r1, #16
     ad8:	8b62      	ldrh	r2, [r4, #26]
     ada:	420a      	tst	r2, r1
     adc:	d104      	bne.n	ae8 <configure_gas_gauge+0x88>
		timeout_counter++;
     ade:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     ae0:	4283      	cmp	r3, r0
     ae2:	d3f9      	bcc.n	ad8 <configure_gas_gauge+0x78>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     ae4:	2310      	movs	r3, #16
     ae6:	8363      	strh	r3, [r4, #26]
    gas_gauge_config_CC_registers();
     ae8:	4b09      	ldr	r3, [pc, #36]	; (b10 <configure_gas_gauge+0xb0>)
     aea:	4798      	blx	r3
}
     aec:	b00f      	add	sp, #60	; 0x3c
     aee:	bd30      	pop	{r4, r5, pc}
     af0:	00000d48 	.word	0x00000d48
     af4:	00080002 	.word	0x00080002
     af8:	00090002 	.word	0x00090002
     afc:	20000248 	.word	0x20000248
     b00:	42000800 	.word	0x42000800
     b04:	00001355 	.word	0x00001355
     b08:	000025d5 	.word	0x000025d5
     b0c:	e000e100 	.word	0xe000e100
     b10:	00000a35 	.word	0x00000a35

00000b14 <gas_gauge_read>:
    
    while (i2c_master_write_packet_wait(&gas_gauge_instance, &packet) != STATUS_OK);
}

bool gas_gauge_read(uint32_t *value, uint32_t *percent)
{
     b14:	b5f0      	push	{r4, r5, r6, r7, lr}
     b16:	b085      	sub	sp, #20
     b18:	0005      	movs	r5, r0
     b1a:	000c      	movs	r4, r1
    bool ok = false;
    
    /* Init i2c packet. */
    struct i2c_master_packet packet = {
     b1c:	a901      	add	r1, sp, #4
     b1e:	4b0e      	ldr	r3, [pc, #56]	; (b58 <gas_gauge_read+0x44>)
     b20:	3318      	adds	r3, #24
     b22:	000a      	movs	r2, r1
     b24:	cbc1      	ldmia	r3!, {r0, r6, r7}
     b26:	c2c1      	stmia	r2!, {r0, r6, r7}
        .hs_master_code = 0x0,
    };
    
    /* Read from slave until success. */
    packet.data = read_buffer;
    if (i2c_master_read_packet_wait(&gas_gauge_instance, &packet) == STATUS_OK) {
     b28:	480c      	ldr	r0, [pc, #48]	; (b5c <gas_gauge_read+0x48>)
     b2a:	4b0d      	ldr	r3, [pc, #52]	; (b60 <gas_gauge_read+0x4c>)
     b2c:	4798      	blx	r3
    bool ok = false;
     b2e:	2300      	movs	r3, #0
    if (i2c_master_read_packet_wait(&gas_gauge_instance, &packet) == STATUS_OK) {
     b30:	2800      	cmp	r0, #0
     b32:	d10e      	bne.n	b52 <gas_gauge_read+0x3e>
        
        uint16_t twi_reading = read_buffer[2] << 8 | read_buffer[3];
     b34:	4a0b      	ldr	r2, [pc, #44]	; (b64 <gas_gauge_read+0x50>)
     b36:	7893      	ldrb	r3, [r2, #2]
     b38:	021b      	lsls	r3, r3, #8
     b3a:	78d0      	ldrb	r0, [r2, #3]
     b3c:	4318      	orrs	r0, r3
        uint16_t twi_percent = ((twi_reading * 100) / FULL_SCALE_GAUGE);

        *value     = twi_reading;
     b3e:	6028      	str	r0, [r5, #0]
        uint16_t twi_percent = ((twi_reading * 100) / FULL_SCALE_GAUGE);
     b40:	2364      	movs	r3, #100	; 0x64
     b42:	4358      	muls	r0, r3
     b44:	4908      	ldr	r1, [pc, #32]	; (b68 <gas_gauge_read+0x54>)
     b46:	4b09      	ldr	r3, [pc, #36]	; (b6c <gas_gauge_read+0x58>)
     b48:	4798      	blx	r3
        *percent   = twi_percent;
     b4a:	0400      	lsls	r0, r0, #16
     b4c:	0c00      	lsrs	r0, r0, #16
     b4e:	6020      	str	r0, [r4, #0]

        ok = true;
     b50:	2301      	movs	r3, #1
    }
    
    return ok;
     b52:	0018      	movs	r0, r3
     b54:	b005      	add	sp, #20
     b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b58:	00005920 	.word	0x00005920
     b5c:	20000248 	.word	0x20000248
     b60:	0000194d 	.word	0x0000194d
     b64:	2000009c 	.word	0x2000009c
     b68:	0000ffff 	.word	0x0000ffff
     b6c:	00003571 	.word	0x00003571

00000b70 <rtc_overflow_callback>:
    rtc_count_set_period(&rtc_instance, 1);
}

void rtc_overflow_callback(void)
{
    tick_counter++;
     b70:	4a02      	ldr	r2, [pc, #8]	; (b7c <rtc_overflow_callback+0xc>)
     b72:	6813      	ldr	r3, [r2, #0]
     b74:	3301      	adds	r3, #1
     b76:	6013      	str	r3, [r2, #0]
}
     b78:	4770      	bx	lr
     b7a:	46c0      	nop			; (mov r8, r8)
     b7c:	200000a0 	.word	0x200000a0

00000b80 <configure_rtc_count>:
{
     b80:	b510      	push	{r4, lr}
     b82:	b084      	sub	sp, #16
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
	config->clear_on_match      = false;
     b84:	2300      	movs	r3, #0
     b86:	466a      	mov	r2, sp
     b88:	70d3      	strb	r3, [r2, #3]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
		config->compare_values[i] = 0;
     b8a:	9302      	str	r3, [sp, #8]
     b8c:	9303      	str	r3, [sp, #12]
    config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_1;
     b8e:	8013      	strh	r3, [r2, #0]
    config_rtc_count.mode                = RTC_COUNT_MODE_16BIT;
     b90:	7093      	strb	r3, [r2, #2]
    config_rtc_count.continuously_update = true;
     b92:	2301      	movs	r3, #1
     b94:	7113      	strb	r3, [r2, #4]
    rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
     b96:	4c0b      	ldr	r4, [pc, #44]	; (bc4 <configure_rtc_count+0x44>)
     b98:	490b      	ldr	r1, [pc, #44]	; (bc8 <configure_rtc_count+0x48>)
     b9a:	0020      	movs	r0, r4
     b9c:	4b0b      	ldr	r3, [pc, #44]	; (bcc <configure_rtc_count+0x4c>)
     b9e:	4798      	blx	r3
    rtc_count_enable(&rtc_instance);
     ba0:	0020      	movs	r0, r4
     ba2:	4b0b      	ldr	r3, [pc, #44]	; (bd0 <configure_rtc_count+0x50>)
     ba4:	4798      	blx	r3
    rtc_count_register_callback(&rtc_instance, rtc_overflow_callback, RTC_COUNT_CALLBACK_OVERFLOW);
     ba6:	2202      	movs	r2, #2
     ba8:	490a      	ldr	r1, [pc, #40]	; (bd4 <configure_rtc_count+0x54>)
     baa:	0020      	movs	r0, r4
     bac:	4b0a      	ldr	r3, [pc, #40]	; (bd8 <configure_rtc_count+0x58>)
     bae:	4798      	blx	r3
    rtc_count_enable_callback(&rtc_instance, RTC_COUNT_CALLBACK_OVERFLOW);
     bb0:	2102      	movs	r1, #2
     bb2:	0020      	movs	r0, r4
     bb4:	4b09      	ldr	r3, [pc, #36]	; (bdc <configure_rtc_count+0x5c>)
     bb6:	4798      	blx	r3
    rtc_count_set_period(&rtc_instance, 1);
     bb8:	2101      	movs	r1, #1
     bba:	0020      	movs	r0, r4
     bbc:	4b08      	ldr	r3, [pc, #32]	; (be0 <configure_rtc_count+0x60>)
     bbe:	4798      	blx	r3
}
     bc0:	b004      	add	sp, #16
     bc2:	bd10      	pop	{r4, pc}
     bc4:	20000270 	.word	0x20000270
     bc8:	40001400 	.word	0x40001400
     bcc:	00000689 	.word	0x00000689
     bd0:	000005ad 	.word	0x000005ad
     bd4:	00000b71 	.word	0x00000b71
     bd8:	0000078d 	.word	0x0000078d
     bdc:	000007c5 	.word	0x000007c5
     be0:	00000769 	.word	0x00000769

00000be4 <get_tick>:



uint32_t get_tick()
{
    return tick_counter;
     be4:	4b01      	ldr	r3, [pc, #4]	; (bec <get_tick+0x8>)
     be6:	6818      	ldr	r0, [r3, #0]
}
     be8:	4770      	bx	lr
     bea:	46c0      	nop			; (mov r8, r8)
     bec:	200000a0 	.word	0x200000a0

00000bf0 <tick_elapsed>:
//!
//! \return The number of milliseconds elapsed
//=============================================================================
uint32_t tick_elapsed(uint32_t reference)
{
    return  (tick_counter - reference);
     bf0:	4b01      	ldr	r3, [pc, #4]	; (bf8 <tick_elapsed+0x8>)
     bf2:	681b      	ldr	r3, [r3, #0]
     bf4:	1a18      	subs	r0, r3, r0
     bf6:	4770      	bx	lr
     bf8:	200000a0 	.word	0x200000a0

00000bfc <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     bfc:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     bfe:	2200      	movs	r2, #0
     c00:	2300      	movs	r3, #0
     c02:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     c04:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     c06:	2100      	movs	r1, #0
     c08:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     c0a:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     c0c:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     c0e:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     c10:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     c12:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     c14:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     c16:	24c0      	movs	r4, #192	; 0xc0
     c18:	0164      	lsls	r4, r4, #5
     c1a:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     c1c:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     c1e:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     c20:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     c22:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     c24:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     c26:	242a      	movs	r4, #42	; 0x2a
     c28:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     c2a:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     c2c:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     c2e:	3c06      	subs	r4, #6
     c30:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     c32:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     c34:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     c36:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     c38:	232b      	movs	r3, #43	; 0x2b
     c3a:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     c3c:	3301      	adds	r3, #1
     c3e:	54c1      	strb	r1, [r0, r3]
}
     c40:	bd10      	pop	{r4, pc}
	...

00000c44 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     c44:	b5f0      	push	{r4, r5, r6, r7, lr}
     c46:	46d6      	mov	lr, sl
     c48:	464f      	mov	r7, r9
     c4a:	4646      	mov	r6, r8
     c4c:	b5c0      	push	{r6, r7, lr}
     c4e:	b096      	sub	sp, #88	; 0x58
     c50:	0007      	movs	r7, r0
     c52:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     c54:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     c56:	4ac6      	ldr	r2, [pc, #792]	; (f70 <adc_init+0x32c>)
     c58:	6a10      	ldr	r0, [r2, #32]
     c5a:	2380      	movs	r3, #128	; 0x80
     c5c:	025b      	lsls	r3, r3, #9
     c5e:	4303      	orrs	r3, r0
     c60:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     c62:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     c64:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     c66:	07db      	lsls	r3, r3, #31
     c68:	d505      	bpl.n	c76 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     c6a:	b016      	add	sp, #88	; 0x58
     c6c:	bc1c      	pop	{r2, r3, r4}
     c6e:	4690      	mov	r8, r2
     c70:	4699      	mov	r9, r3
     c72:	46a2      	mov	sl, r4
     c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     c76:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     c78:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     c7a:	079b      	lsls	r3, r3, #30
     c7c:	d4f5      	bmi.n	c6a <adc_init+0x26>
	module_inst->reference = config->reference;
     c7e:	7873      	ldrb	r3, [r6, #1]
     c80:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     c82:	2b00      	cmp	r3, #0
     c84:	d104      	bne.n	c90 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     c86:	4abb      	ldr	r2, [pc, #748]	; (f74 <adc_init+0x330>)
     c88:	6c13      	ldr	r3, [r2, #64]	; 0x40
     c8a:	2104      	movs	r1, #4
     c8c:	430b      	orrs	r3, r1
     c8e:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     c90:	2300      	movs	r3, #0
     c92:	60bb      	str	r3, [r7, #8]
     c94:	60fb      	str	r3, [r7, #12]
     c96:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     c98:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     c9a:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     c9c:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     c9e:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     ca0:	4bb5      	ldr	r3, [pc, #724]	; (f78 <adc_init+0x334>)
     ca2:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     ca4:	232a      	movs	r3, #42	; 0x2a
     ca6:	5cf3      	ldrb	r3, [r6, r3]
     ca8:	2b00      	cmp	r3, #0
     caa:	d105      	bne.n	cb8 <adc_init+0x74>
     cac:	7d33      	ldrb	r3, [r6, #20]
     cae:	2b00      	cmp	r3, #0
     cb0:	d102      	bne.n	cb8 <adc_init+0x74>
		module_inst->software_trigger = true;
     cb2:	3301      	adds	r3, #1
     cb4:	777b      	strb	r3, [r7, #29]
     cb6:	e001      	b.n	cbc <adc_init+0x78>
		module_inst->software_trigger = false;
     cb8:	2300      	movs	r3, #0
     cba:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     cbc:	683b      	ldr	r3, [r7, #0]
     cbe:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     cc0:	7833      	ldrb	r3, [r6, #0]
     cc2:	466a      	mov	r2, sp
     cc4:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     cc6:	4669      	mov	r1, sp
     cc8:	201e      	movs	r0, #30
     cca:	4bac      	ldr	r3, [pc, #688]	; (f7c <adc_init+0x338>)
     ccc:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     cce:	201e      	movs	r0, #30
     cd0:	4bab      	ldr	r3, [pc, #684]	; (f80 <adc_init+0x33c>)
     cd2:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     cd4:	232c      	movs	r3, #44	; 0x2c
     cd6:	5cf2      	ldrb	r2, [r6, r3]
     cd8:	2a00      	cmp	r2, #0
     cda:	d054      	beq.n	d86 <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     cdc:	3b01      	subs	r3, #1
     cde:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     ce0:	7b33      	ldrb	r3, [r6, #12]
     ce2:	18eb      	adds	r3, r5, r3
     ce4:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     ce6:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     ce8:	b2c9      	uxtb	r1, r1
     cea:	428b      	cmp	r3, r1
     cec:	d221      	bcs.n	d32 <adc_init+0xee>
     cee:	1952      	adds	r2, r2, r5
     cf0:	b2d3      	uxtb	r3, r2
     cf2:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     cf4:	4ba3      	ldr	r3, [pc, #652]	; (f84 <adc_init+0x340>)
     cf6:	469a      	mov	sl, r3
     cf8:	e003      	b.n	d02 <adc_init+0xbe>
			offset++;
     cfa:	3501      	adds	r5, #1
     cfc:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     cfe:	454d      	cmp	r5, r9
     d00:	d017      	beq.n	d32 <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     d02:	240f      	movs	r4, #15
     d04:	402c      	ands	r4, r5
     d06:	7b33      	ldrb	r3, [r6, #12]
     d08:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     d0a:	2250      	movs	r2, #80	; 0x50
     d0c:	499e      	ldr	r1, [pc, #632]	; (f88 <adc_init+0x344>)
     d0e:	a802      	add	r0, sp, #8
     d10:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     d12:	2c13      	cmp	r4, #19
     d14:	d8f1      	bhi.n	cfa <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     d16:	00a4      	lsls	r4, r4, #2
     d18:	ab02      	add	r3, sp, #8
     d1a:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     d1c:	a901      	add	r1, sp, #4
     d1e:	2300      	movs	r3, #0
     d20:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     d22:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     d24:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     d26:	3301      	adds	r3, #1
     d28:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     d2a:	b2c0      	uxtb	r0, r0
     d2c:	4b97      	ldr	r3, [pc, #604]	; (f8c <adc_init+0x348>)
     d2e:	4798      	blx	r3
     d30:	e7e3      	b.n	cfa <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     d32:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     d34:	2250      	movs	r2, #80	; 0x50
     d36:	4994      	ldr	r1, [pc, #592]	; (f88 <adc_init+0x344>)
     d38:	a802      	add	r0, sp, #8
     d3a:	4b92      	ldr	r3, [pc, #584]	; (f84 <adc_init+0x340>)
     d3c:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     d3e:	2c13      	cmp	r4, #19
     d40:	d913      	bls.n	d6a <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     d42:	7d73      	ldrb	r3, [r6, #21]
     d44:	009b      	lsls	r3, r3, #2
     d46:	b2db      	uxtb	r3, r3
     d48:	4642      	mov	r2, r8
     d4a:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     d4c:	7db3      	ldrb	r3, [r6, #22]
     d4e:	01db      	lsls	r3, r3, #7
     d50:	7872      	ldrb	r2, [r6, #1]
     d52:	4313      	orrs	r3, r2
     d54:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     d56:	4642      	mov	r2, r8
     d58:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     d5a:	7933      	ldrb	r3, [r6, #4]
     d5c:	2b34      	cmp	r3, #52	; 0x34
     d5e:	d900      	bls.n	d62 <adc_init+0x11e>
     d60:	e17b      	b.n	105a <adc_init+0x416>
     d62:	009b      	lsls	r3, r3, #2
     d64:	4a8a      	ldr	r2, [pc, #552]	; (f90 <adc_init+0x34c>)
     d66:	58d3      	ldr	r3, [r2, r3]
     d68:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     d6a:	00a4      	lsls	r4, r4, #2
     d6c:	ab02      	add	r3, sp, #8
     d6e:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     d70:	a901      	add	r1, sp, #4
     d72:	2300      	movs	r3, #0
     d74:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     d76:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     d78:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     d7a:	3301      	adds	r3, #1
     d7c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     d7e:	b2c0      	uxtb	r0, r0
     d80:	4b82      	ldr	r3, [pc, #520]	; (f8c <adc_init+0x348>)
     d82:	4798      	blx	r3
     d84:	e7dd      	b.n	d42 <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     d86:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     d88:	2250      	movs	r2, #80	; 0x50
     d8a:	497f      	ldr	r1, [pc, #508]	; (f88 <adc_init+0x344>)
     d8c:	a802      	add	r0, sp, #8
     d8e:	4b7d      	ldr	r3, [pc, #500]	; (f84 <adc_init+0x340>)
     d90:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     d92:	2c13      	cmp	r4, #19
     d94:	d915      	bls.n	dc2 <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     d96:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     d98:	2250      	movs	r2, #80	; 0x50
     d9a:	497b      	ldr	r1, [pc, #492]	; (f88 <adc_init+0x344>)
     d9c:	a802      	add	r0, sp, #8
     d9e:	4b79      	ldr	r3, [pc, #484]	; (f84 <adc_init+0x340>)
     da0:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     da2:	2c13      	cmp	r4, #19
     da4:	d8cd      	bhi.n	d42 <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     da6:	00a4      	lsls	r4, r4, #2
     da8:	ab02      	add	r3, sp, #8
     daa:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     dac:	a901      	add	r1, sp, #4
     dae:	2300      	movs	r3, #0
     db0:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     db2:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     db4:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     db6:	3301      	adds	r3, #1
     db8:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     dba:	b2c0      	uxtb	r0, r0
     dbc:	4b73      	ldr	r3, [pc, #460]	; (f8c <adc_init+0x348>)
     dbe:	4798      	blx	r3
     dc0:	e7bf      	b.n	d42 <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     dc2:	00a4      	lsls	r4, r4, #2
     dc4:	ab02      	add	r3, sp, #8
     dc6:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     dc8:	a901      	add	r1, sp, #4
     dca:	2300      	movs	r3, #0
     dcc:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     dce:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     dd0:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     dd2:	3301      	adds	r3, #1
     dd4:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     dd6:	b2c0      	uxtb	r0, r0
     dd8:	4b6c      	ldr	r3, [pc, #432]	; (f8c <adc_init+0x348>)
     dda:	4798      	blx	r3
     ddc:	e7db      	b.n	d96 <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     dde:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     de0:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     de2:	2102      	movs	r1, #2
     de4:	e01a      	b.n	e1c <adc_init+0x1d8>
		adjres = config->divide_result;
     de6:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     de8:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     dea:	2410      	movs	r4, #16
     dec:	e016      	b.n	e1c <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     dee:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     df0:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     df2:	2101      	movs	r1, #1
     df4:	e012      	b.n	e1c <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     df6:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     df8:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     dfa:	2100      	movs	r1, #0
     dfc:	e00e      	b.n	e1c <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     dfe:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     e00:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     e02:	2100      	movs	r1, #0
     e04:	e00a      	b.n	e1c <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     e06:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     e08:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     e0a:	2100      	movs	r1, #0
     e0c:	e006      	b.n	e1c <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     e0e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     e10:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     e12:	2100      	movs	r1, #0
     e14:	e002      	b.n	e1c <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     e16:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     e18:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     e1a:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     e1c:	0109      	lsls	r1, r1, #4
     e1e:	2270      	movs	r2, #112	; 0x70
     e20:	400a      	ands	r2, r1
     e22:	4313      	orrs	r3, r2
     e24:	4642      	mov	r2, r8
     e26:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     e28:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     e2a:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     e2c:	2b3f      	cmp	r3, #63	; 0x3f
     e2e:	d900      	bls.n	e32 <adc_init+0x1ee>
     e30:	e71b      	b.n	c6a <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     e32:	70d3      	strb	r3, [r2, #3]
	Adc *const adc_module = module_inst->hw;
     e34:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     e36:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     e38:	b25b      	sxtb	r3, r3
     e3a:	2b00      	cmp	r3, #0
     e3c:	dbfb      	blt.n	e36 <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     e3e:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     e40:	8872      	ldrh	r2, [r6, #2]
     e42:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     e44:	2224      	movs	r2, #36	; 0x24
     e46:	5cb2      	ldrb	r2, [r6, r2]
     e48:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     e4a:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     e4c:	7d32      	ldrb	r2, [r6, #20]
     e4e:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     e50:	4313      	orrs	r3, r2
     e52:	7cb2      	ldrb	r2, [r6, #18]
     e54:	0052      	lsls	r2, r2, #1
     e56:	4313      	orrs	r3, r2
     e58:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     e5a:	4642      	mov	r2, r8
     e5c:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     e5e:	7e33      	ldrb	r3, [r6, #24]
     e60:	2b00      	cmp	r3, #0
     e62:	d020      	beq.n	ea6 <adc_init+0x262>
		switch (resolution) {
     e64:	2c10      	cmp	r4, #16
     e66:	d100      	bne.n	e6a <adc_init+0x226>
     e68:	e0d9      	b.n	101e <adc_init+0x3da>
     e6a:	d800      	bhi.n	e6e <adc_init+0x22a>
     e6c:	e098      	b.n	fa0 <adc_init+0x35c>
     e6e:	2c20      	cmp	r4, #32
     e70:	d100      	bne.n	e74 <adc_init+0x230>
     e72:	e0b6      	b.n	fe2 <adc_init+0x39e>
     e74:	2c30      	cmp	r4, #48	; 0x30
     e76:	d116      	bne.n	ea6 <adc_init+0x262>
			if (config->differential_mode &&
     e78:	7cf2      	ldrb	r2, [r6, #19]
     e7a:	2a00      	cmp	r2, #0
     e7c:	d00a      	beq.n	e94 <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
     e7e:	69f2      	ldr	r2, [r6, #28]
     e80:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     e82:	2017      	movs	r0, #23
			if (config->differential_mode &&
     e84:	2aff      	cmp	r2, #255	; 0xff
     e86:	d900      	bls.n	e8a <adc_init+0x246>
     e88:	e6ef      	b.n	c6a <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     e8a:	6a32      	ldr	r2, [r6, #32]
     e8c:	3280      	adds	r2, #128	; 0x80
     e8e:	2aff      	cmp	r2, #255	; 0xff
     e90:	d900      	bls.n	e94 <adc_init+0x250>
     e92:	e6ea      	b.n	c6a <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     e94:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     e96:	69f2      	ldr	r2, [r6, #28]
     e98:	2aff      	cmp	r2, #255	; 0xff
     e9a:	dd00      	ble.n	e9e <adc_init+0x25a>
     e9c:	e6e5      	b.n	c6a <adc_init+0x26>
     e9e:	6a32      	ldr	r2, [r6, #32]
     ea0:	2aff      	cmp	r2, #255	; 0xff
     ea2:	dd00      	ble.n	ea6 <adc_init+0x262>
     ea4:	e6e1      	b.n	c6a <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     ea6:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     ea8:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     eaa:	b252      	sxtb	r2, r2
     eac:	2a00      	cmp	r2, #0
     eae:	dbfb      	blt.n	ea8 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
     eb0:	4642      	mov	r2, r8
     eb2:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     eb4:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     eb6:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     eb8:	b25b      	sxtb	r3, r3
     eba:	2b00      	cmp	r3, #0
     ebc:	dbfb      	blt.n	eb6 <adc_init+0x272>
	adc_module->WINLT.reg =
     ebe:	8bb3      	ldrh	r3, [r6, #28]
     ec0:	4642      	mov	r2, r8
     ec2:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     ec4:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     ec6:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     ec8:	b25b      	sxtb	r3, r3
     eca:	2b00      	cmp	r3, #0
     ecc:	dbfb      	blt.n	ec6 <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     ece:	8c33      	ldrh	r3, [r6, #32]
     ed0:	4642      	mov	r2, r8
     ed2:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     ed4:	232c      	movs	r3, #44	; 0x2c
     ed6:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     ed8:	2b00      	cmp	r3, #0
     eda:	d005      	beq.n	ee8 <adc_init+0x2a4>
		inputs_to_scan--;
     edc:	3b01      	subs	r3, #1
     ede:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     ee0:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     ee2:	2b0f      	cmp	r3, #15
     ee4:	d900      	bls.n	ee8 <adc_init+0x2a4>
     ee6:	e6c0      	b.n	c6a <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     ee8:	222b      	movs	r2, #43	; 0x2b
     eea:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     eec:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     eee:	290f      	cmp	r1, #15
     ef0:	d900      	bls.n	ef4 <adc_init+0x2b0>
     ef2:	e6ba      	b.n	c6a <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     ef4:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     ef6:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     ef8:	b252      	sxtb	r2, r2
     efa:	2a00      	cmp	r2, #0
     efc:	dbfb      	blt.n	ef6 <adc_init+0x2b2>
			config->negative_input |
     efe:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     f00:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     f02:	4302      	orrs	r2, r0
     f04:	68b0      	ldr	r0, [r6, #8]
     f06:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     f08:	0509      	lsls	r1, r1, #20
			config->negative_input |
     f0a:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     f0c:	041b      	lsls	r3, r3, #16
			config->negative_input |
     f0e:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     f10:	4642      	mov	r2, r8
     f12:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     f14:	232a      	movs	r3, #42	; 0x2a
     f16:	5cf3      	ldrb	r3, [r6, r3]
     f18:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     f1a:	230f      	movs	r3, #15
     f1c:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     f1e:	3315      	adds	r3, #21
     f20:	5cf3      	ldrb	r3, [r6, r3]
     f22:	2b00      	cmp	r3, #0
     f24:	d012      	beq.n	f4c <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     f26:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     f28:	4a1a      	ldr	r2, [pc, #104]	; (f94 <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
     f2a:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     f2c:	4293      	cmp	r3, r2
     f2e:	d900      	bls.n	f32 <adc_init+0x2ee>
     f30:	e69b      	b.n	c6a <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     f32:	4642      	mov	r2, r8
     f34:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     f36:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     f38:	2380      	movs	r3, #128	; 0x80
     f3a:	011b      	lsls	r3, r3, #4
     f3c:	18d3      	adds	r3, r2, r3
     f3e:	4915      	ldr	r1, [pc, #84]	; (f94 <adc_init+0x350>)
     f40:	b29b      	uxth	r3, r3
     f42:	428b      	cmp	r3, r1
     f44:	d900      	bls.n	f48 <adc_init+0x304>
     f46:	e690      	b.n	c6a <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     f48:	4643      	mov	r3, r8
     f4a:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     f4c:	4b12      	ldr	r3, [pc, #72]	; (f98 <adc_init+0x354>)
     f4e:	681b      	ldr	r3, [r3, #0]
     f50:	015b      	lsls	r3, r3, #5
     f52:	22e0      	movs	r2, #224	; 0xe0
     f54:	00d2      	lsls	r2, r2, #3
     f56:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     f58:	4a10      	ldr	r2, [pc, #64]	; (f9c <adc_init+0x358>)
     f5a:	6851      	ldr	r1, [r2, #4]
     f5c:	0149      	lsls	r1, r1, #5
     f5e:	6812      	ldr	r2, [r2, #0]
     f60:	0ed2      	lsrs	r2, r2, #27
     f62:	430a      	orrs	r2, r1
     f64:	b2d2      	uxtb	r2, r2
			) |
     f66:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     f68:	4642      	mov	r2, r8
     f6a:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     f6c:	2000      	movs	r0, #0
     f6e:	e67c      	b.n	c6a <adc_init+0x26>
     f70:	40000400 	.word	0x40000400
     f74:	40000800 	.word	0x40000800
     f78:	20000288 	.word	0x20000288
     f7c:	00002c21 	.word	0x00002c21
     f80:	00002b95 	.word	0x00002b95
     f84:	000050ad 	.word	0x000050ad
     f88:	00005a18 	.word	0x00005a18
     f8c:	00002d19 	.word	0x00002d19
     f90:	00005944 	.word	0x00005944
     f94:	00000fff 	.word	0x00000fff
     f98:	00806024 	.word	0x00806024
     f9c:	00806020 	.word	0x00806020
		switch (resolution) {
     fa0:	2c00      	cmp	r4, #0
     fa2:	d000      	beq.n	fa6 <adc_init+0x362>
     fa4:	e77f      	b.n	ea6 <adc_init+0x262>
			if (config->differential_mode &&
     fa6:	7cf2      	ldrb	r2, [r6, #19]
     fa8:	2a00      	cmp	r2, #0
     faa:	d00f      	beq.n	fcc <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
     fac:	69f2      	ldr	r2, [r6, #28]
     fae:	2180      	movs	r1, #128	; 0x80
     fb0:	0109      	lsls	r1, r1, #4
     fb2:	468c      	mov	ip, r1
     fb4:	4462      	add	r2, ip
			if (config->differential_mode &&
     fb6:	492a      	ldr	r1, [pc, #168]	; (1060 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     fb8:	2017      	movs	r0, #23
			if (config->differential_mode &&
     fba:	428a      	cmp	r2, r1
     fbc:	d900      	bls.n	fc0 <adc_init+0x37c>
     fbe:	e654      	b.n	c6a <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     fc0:	6a32      	ldr	r2, [r6, #32]
     fc2:	4462      	add	r2, ip
     fc4:	4926      	ldr	r1, [pc, #152]	; (1060 <adc_init+0x41c>)
     fc6:	428a      	cmp	r2, r1
     fc8:	d900      	bls.n	fcc <adc_init+0x388>
     fca:	e64e      	b.n	c6a <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     fcc:	4a24      	ldr	r2, [pc, #144]	; (1060 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     fce:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     fd0:	69f1      	ldr	r1, [r6, #28]
     fd2:	4291      	cmp	r1, r2
     fd4:	dd00      	ble.n	fd8 <adc_init+0x394>
     fd6:	e648      	b.n	c6a <adc_init+0x26>
     fd8:	6a31      	ldr	r1, [r6, #32]
     fda:	4291      	cmp	r1, r2
     fdc:	dd00      	ble.n	fe0 <adc_init+0x39c>
     fde:	e644      	b.n	c6a <adc_init+0x26>
     fe0:	e761      	b.n	ea6 <adc_init+0x262>
			if (config->differential_mode &&
     fe2:	7cf2      	ldrb	r2, [r6, #19]
     fe4:	2a00      	cmp	r2, #0
     fe6:	d00f      	beq.n	1008 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
     fe8:	69f2      	ldr	r2, [r6, #28]
     fea:	2180      	movs	r1, #128	; 0x80
     fec:	0089      	lsls	r1, r1, #2
     fee:	468c      	mov	ip, r1
     ff0:	4462      	add	r2, ip
			if (config->differential_mode &&
     ff2:	491c      	ldr	r1, [pc, #112]	; (1064 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     ff4:	2017      	movs	r0, #23
			if (config->differential_mode &&
     ff6:	428a      	cmp	r2, r1
     ff8:	d900      	bls.n	ffc <adc_init+0x3b8>
     ffa:	e636      	b.n	c6a <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     ffc:	6a32      	ldr	r2, [r6, #32]
     ffe:	4462      	add	r2, ip
    1000:	4918      	ldr	r1, [pc, #96]	; (1064 <adc_init+0x420>)
    1002:	428a      	cmp	r2, r1
    1004:	d900      	bls.n	1008 <adc_init+0x3c4>
    1006:	e630      	b.n	c6a <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
    1008:	4a16      	ldr	r2, [pc, #88]	; (1064 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
    100a:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
    100c:	69f1      	ldr	r1, [r6, #28]
    100e:	4291      	cmp	r1, r2
    1010:	dd00      	ble.n	1014 <adc_init+0x3d0>
    1012:	e62a      	b.n	c6a <adc_init+0x26>
    1014:	6a31      	ldr	r1, [r6, #32]
    1016:	4291      	cmp	r1, r2
    1018:	dd00      	ble.n	101c <adc_init+0x3d8>
    101a:	e626      	b.n	c6a <adc_init+0x26>
    101c:	e743      	b.n	ea6 <adc_init+0x262>
			if (config->differential_mode &&
    101e:	7cf2      	ldrb	r2, [r6, #19]
    1020:	2a00      	cmp	r2, #0
    1022:	d00f      	beq.n	1044 <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
    1024:	69f2      	ldr	r2, [r6, #28]
    1026:	2180      	movs	r1, #128	; 0x80
    1028:	0209      	lsls	r1, r1, #8
    102a:	468c      	mov	ip, r1
    102c:	4462      	add	r2, ip
			if (config->differential_mode &&
    102e:	490e      	ldr	r1, [pc, #56]	; (1068 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
    1030:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1032:	428a      	cmp	r2, r1
    1034:	d900      	bls.n	1038 <adc_init+0x3f4>
    1036:	e618      	b.n	c6a <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
    1038:	6a32      	ldr	r2, [r6, #32]
    103a:	4462      	add	r2, ip
    103c:	490a      	ldr	r1, [pc, #40]	; (1068 <adc_init+0x424>)
    103e:	428a      	cmp	r2, r1
    1040:	d900      	bls.n	1044 <adc_init+0x400>
    1042:	e612      	b.n	c6a <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
    1044:	4a08      	ldr	r2, [pc, #32]	; (1068 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
    1046:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
    1048:	69f1      	ldr	r1, [r6, #28]
    104a:	4291      	cmp	r1, r2
    104c:	dd00      	ble.n	1050 <adc_init+0x40c>
    104e:	e60c      	b.n	c6a <adc_init+0x26>
    1050:	6a31      	ldr	r1, [r6, #32]
    1052:	4291      	cmp	r1, r2
    1054:	dd00      	ble.n	1058 <adc_init+0x414>
    1056:	e608      	b.n	c6a <adc_init+0x26>
    1058:	e725      	b.n	ea6 <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
    105a:	2017      	movs	r0, #23
    105c:	e605      	b.n	c6a <adc_init+0x26>
    105e:	46c0      	nop			; (mov r8, r8)
    1060:	00000fff 	.word	0x00000fff
    1064:	000003ff 	.word	0x000003ff
    1068:	0000ffff 	.word	0x0000ffff

0000106c <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    106c:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    106e:	4b2e      	ldr	r3, [pc, #184]	; (1128 <ADC_Handler+0xbc>)
    1070:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg;
    1072:	6823      	ldr	r3, [r4, #0]
    1074:	7e1d      	ldrb	r5, [r3, #24]
    1076:	b2ed      	uxtb	r5, r5
	if (flags & ADC_INTFLAG_RESRDY) {
    1078:	07ea      	lsls	r2, r5, #31
    107a:	d505      	bpl.n	1088 <ADC_Handler+0x1c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    107c:	7ee2      	ldrb	r2, [r4, #27]
    107e:	07d2      	lsls	r2, r2, #31
    1080:	d502      	bpl.n	1088 <ADC_Handler+0x1c>
    1082:	7ea2      	ldrb	r2, [r4, #26]
    1084:	07d2      	lsls	r2, r2, #31
    1086:	d416      	bmi.n	10b6 <ADC_Handler+0x4a>
	if (flags & ADC_INTFLAG_WINMON) {
    1088:	076b      	lsls	r3, r5, #29
    108a:	d508      	bpl.n	109e <ADC_Handler+0x32>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    108c:	2304      	movs	r3, #4
    108e:	6822      	ldr	r2, [r4, #0]
    1090:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    1092:	7ee3      	ldrb	r3, [r4, #27]
    1094:	079b      	lsls	r3, r3, #30
    1096:	d502      	bpl.n	109e <ADC_Handler+0x32>
    1098:	7ea3      	ldrb	r3, [r4, #26]
    109a:	079b      	lsls	r3, r3, #30
    109c:	d43c      	bmi.n	1118 <ADC_Handler+0xac>
	if (flags & ADC_INTFLAG_OVERRUN) {
    109e:	07ab      	lsls	r3, r5, #30
    10a0:	d508      	bpl.n	10b4 <ADC_Handler+0x48>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    10a2:	2302      	movs	r3, #2
    10a4:	6822      	ldr	r2, [r4, #0]
    10a6:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    10a8:	7ee3      	ldrb	r3, [r4, #27]
    10aa:	075b      	lsls	r3, r3, #29
    10ac:	d502      	bpl.n	10b4 <ADC_Handler+0x48>
    10ae:	7ea3      	ldrb	r3, [r4, #26]
    10b0:	075b      	lsls	r3, r3, #29
    10b2:	d435      	bmi.n	1120 <ADC_Handler+0xb4>
	_adc_interrupt_handler(0);
}
    10b4:	bd70      	pop	{r4, r5, r6, pc}
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    10b6:	2201      	movs	r2, #1
    10b8:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
    10ba:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    10bc:	7e53      	ldrb	r3, [r2, #25]
			while (adc_is_syncing(module)) {
    10be:	b25b      	sxtb	r3, r3
    10c0:	2b00      	cmp	r3, #0
    10c2:	dbfb      	blt.n	10bc <ADC_Handler+0x50>
			*(module->job_buffer++) = module->hw->RESULT.reg;
    10c4:	6961      	ldr	r1, [r4, #20]
    10c6:	1c8b      	adds	r3, r1, #2
    10c8:	6163      	str	r3, [r4, #20]
    10ca:	8b53      	ldrh	r3, [r2, #26]
    10cc:	b29b      	uxth	r3, r3
    10ce:	800b      	strh	r3, [r1, #0]
			if (--module->remaining_conversions > 0) {
    10d0:	8b23      	ldrh	r3, [r4, #24]
    10d2:	3b01      	subs	r3, #1
    10d4:	b29b      	uxth	r3, r3
    10d6:	8323      	strh	r3, [r4, #24]
    10d8:	2b00      	cmp	r3, #0
    10da:	d011      	beq.n	1100 <ADC_Handler+0x94>
				if (module->software_trigger == true) {
    10dc:	7f63      	ldrb	r3, [r4, #29]
    10de:	2b00      	cmp	r3, #0
    10e0:	d0d2      	beq.n	1088 <ADC_Handler+0x1c>
	Adc *const adc_module = module_inst->hw;
    10e2:	6822      	ldr	r2, [r4, #0]
    10e4:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    10e6:	b25b      	sxtb	r3, r3
    10e8:	2b00      	cmp	r3, #0
    10ea:	dbfb      	blt.n	10e4 <ADC_Handler+0x78>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    10ec:	7b13      	ldrb	r3, [r2, #12]
    10ee:	2102      	movs	r1, #2
    10f0:	430b      	orrs	r3, r1
    10f2:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
    10f4:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    10f6:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    10f8:	b25b      	sxtb	r3, r3
    10fa:	2b00      	cmp	r3, #0
    10fc:	dbfb      	blt.n	10f6 <ADC_Handler+0x8a>
    10fe:	e7c3      	b.n	1088 <ADC_Handler+0x1c>
				if (module->job_status == STATUS_BUSY) {
    1100:	7f23      	ldrb	r3, [r4, #28]
    1102:	2b05      	cmp	r3, #5
    1104:	d1c0      	bne.n	1088 <ADC_Handler+0x1c>
					module->job_status = STATUS_OK;
    1106:	2300      	movs	r3, #0
    1108:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    110a:	3301      	adds	r3, #1
    110c:	6822      	ldr	r2, [r4, #0]
    110e:	7593      	strb	r3, [r2, #22]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    1110:	0020      	movs	r0, r4
    1112:	68a3      	ldr	r3, [r4, #8]
    1114:	4798      	blx	r3
    1116:	e7b7      	b.n	1088 <ADC_Handler+0x1c>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    1118:	0020      	movs	r0, r4
    111a:	68e3      	ldr	r3, [r4, #12]
    111c:	4798      	blx	r3
    111e:	e7be      	b.n	109e <ADC_Handler+0x32>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    1120:	6923      	ldr	r3, [r4, #16]
    1122:	0020      	movs	r0, r4
    1124:	4798      	blx	r3
}
    1126:	e7c5      	b.n	10b4 <ADC_Handler+0x48>
    1128:	20000288 	.word	0x20000288

0000112c <dac_is_syncing>:
		struct dac_module *const dev_inst)
{
	/* Sanity check arguments */
	Assert(dev_inst);

	Dac *const dac_module = dev_inst->hw;
    112c:	6803      	ldr	r3, [r0, #0]

#if (SAMC21)
	if (dac_module->SYNCBUSY.reg) {
#else
	if (dac_module->STATUS.reg & DAC_STATUS_SYNCBUSY) {
    112e:	79d8      	ldrb	r0, [r3, #7]
    1130:	09c0      	lsrs	r0, r0, #7
#endif
		return true;
	}

	return false;
}
    1132:	4770      	bx	lr

00001134 <dac_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->reference      = DAC_REFERENCE_INT1V;
    1134:	2300      	movs	r3, #0
    1136:	7003      	strb	r3, [r0, #0]
	config->output         = DAC_OUTPUT_EXTERNAL;
    1138:	2201      	movs	r2, #1
    113a:	7042      	strb	r2, [r0, #1]
	config->left_adjust    = false;
    113c:	7083      	strb	r3, [r0, #2]
#ifdef FEATURE_DAC_DATABUF_WRITE_PROTECTION
	config->databuf_protection_bypass = false;
    113e:	7103      	strb	r3, [r0, #4]
#endif
	config->voltage_pump_disable = false;
    1140:	7143      	strb	r3, [r0, #5]
	config->clock_source   = GCLK_GENERATOR_0;
    1142:	70c3      	strb	r3, [r0, #3]
	config->run_in_standby = false;
    1144:	7183      	strb	r3, [r0, #6]
#if (SAMC21)
	config->dither_mode    = false;
#endif
}
    1146:	4770      	bx	lr

00001148 <dac_init>:
 */
enum status_code dac_init(
		struct dac_module *const module_inst,
		Dac *const module,
		struct dac_config *const config)
{
    1148:	b5f0      	push	{r4, r5, r6, r7, lr}
    114a:	46c6      	mov	lr, r8
    114c:	b500      	push	{lr}
    114e:	b082      	sub	sp, #8
    1150:	0005      	movs	r5, r0
    1152:	0014      	movs	r4, r2
	Assert(module_inst);
	Assert(module);
	Assert(config);

	/* Initialize device instance */
	module_inst->hw = module;
    1154:	6001      	str	r1, [r0, #0]
    1156:	4a2a      	ldr	r2, [pc, #168]	; (1200 <dac_init+0xb8>)
    1158:	6a10      	ldr	r0, [r2, #32]
    115a:	2380      	movs	r3, #128	; 0x80
    115c:	02db      	lsls	r3, r3, #11
    115e:	4303      	orrs	r3, r0
    1160:	6213      	str	r3, [r2, #32]
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_DAC);
#endif

	/* Check if module is enabled. */
	if (module->CTRLA.reg & DAC_CTRLA_ENABLE) {
    1162:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
    1164:	201c      	movs	r0, #28
	if (module->CTRLA.reg & DAC_CTRLA_ENABLE) {
    1166:	079b      	lsls	r3, r3, #30
    1168:	d503      	bpl.n	1172 <dac_init+0x2a>

	_dac_instances[0] = module_inst;
#endif

	return STATUS_OK;
}
    116a:	b002      	add	sp, #8
    116c:	bc04      	pop	{r2}
    116e:	4690      	mov	r8, r2
    1170:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (module->CTRLA.reg & DAC_CTRLA_SWRST) {
    1172:	780b      	ldrb	r3, [r1, #0]
		return STATUS_BUSY;
    1174:	3817      	subs	r0, #23
	if (module->CTRLA.reg & DAC_CTRLA_SWRST) {
    1176:	07db      	lsls	r3, r3, #31
    1178:	d4f7      	bmi.n	116a <dac_init+0x22>
	gclk_chan_conf.source_generator = config->clock_source;
    117a:	a901      	add	r1, sp, #4
    117c:	78e3      	ldrb	r3, [r4, #3]
    117e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(DAC_GCLK_ID, &gclk_chan_conf);
    1180:	301c      	adds	r0, #28
    1182:	4b20      	ldr	r3, [pc, #128]	; (1204 <dac_init+0xbc>)
    1184:	4798      	blx	r3
	system_gclk_chan_enable(DAC_GCLK_ID);
    1186:	2021      	movs	r0, #33	; 0x21
    1188:	4b1f      	ldr	r3, [pc, #124]	; (1208 <dac_init+0xc0>)
    118a:	4798      	blx	r3
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    118c:	2600      	movs	r6, #0
    118e:	466b      	mov	r3, sp
    1190:	705e      	strb	r6, [r3, #1]
	config->powersave    = false;
    1192:	70de      	strb	r6, [r3, #3]
	pin_conf.mux_position = MUX_PA02B_DAC_VOUT;
    1194:	2301      	movs	r3, #1
    1196:	466a      	mov	r2, sp
    1198:	7013      	strb	r3, [r2, #0]
	pin_conf.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    119a:	7096      	strb	r6, [r2, #2]
	system_pinmux_pin_set_config(PIN_PA02B_DAC_VOUT, &pin_conf);
    119c:	4669      	mov	r1, sp
    119e:	2002      	movs	r0, #2
    11a0:	4b1a      	ldr	r3, [pc, #104]	; (120c <dac_init+0xc4>)
    11a2:	4798      	blx	r3
	Dac *const dac_module = module_inst->hw;
    11a4:	682b      	ldr	r3, [r5, #0]
    11a6:	4698      	mov	r8, r3
	module_inst->output = config->output;
    11a8:	7863      	ldrb	r3, [r4, #1]
    11aa:	712b      	strb	r3, [r5, #4]
	module_inst->start_on_event = false;
    11ac:	71ae      	strb	r6, [r5, #6]
	if (config->run_in_standby) {
    11ae:	79a3      	ldrb	r3, [r4, #6]
		new_ctrla |= DAC_CTRLA_RUNSTDBY;
    11b0:	1e5a      	subs	r2, r3, #1
    11b2:	4193      	sbcs	r3, r2
    11b4:	009b      	lsls	r3, r3, #2
	new_ctrlb |= config->reference;
    11b6:	7826      	ldrb	r6, [r4, #0]
	if (config->left_adjust) {
    11b8:	78a2      	ldrb	r2, [r4, #2]
    11ba:	2a00      	cmp	r2, #0
    11bc:	d001      	beq.n	11c2 <dac_init+0x7a>
    11be:	2204      	movs	r2, #4
    11c0:	4316      	orrs	r6, r2
	if (config->databuf_protection_bypass) {
    11c2:	7922      	ldrb	r2, [r4, #4]
    11c4:	2a00      	cmp	r2, #0
    11c6:	d001      	beq.n	11cc <dac_init+0x84>
    11c8:	2210      	movs	r2, #16
    11ca:	4316      	orrs	r6, r2
	if (config->voltage_pump_disable) {
    11cc:	7962      	ldrb	r2, [r4, #5]
    11ce:	2a00      	cmp	r2, #0
    11d0:	d001      	beq.n	11d6 <dac_init+0x8e>
    11d2:	2208      	movs	r2, #8
    11d4:	4316      	orrs	r6, r2
	dac_module->CTRLA.reg = new_ctrla;
    11d6:	b2db      	uxtb	r3, r3
    11d8:	4642      	mov	r2, r8
    11da:	7013      	strb	r3, [r2, #0]
	while (dac_is_syncing(module_inst)) {
    11dc:	4f0c      	ldr	r7, [pc, #48]	; (1210 <dac_init+0xc8>)
    11de:	0028      	movs	r0, r5
    11e0:	47b8      	blx	r7
    11e2:	2800      	cmp	r0, #0
    11e4:	d1fb      	bne.n	11de <dac_init+0x96>
	dac_module->CTRLB.reg = new_ctrlb;
    11e6:	b2f6      	uxtb	r6, r6
    11e8:	4643      	mov	r3, r8
    11ea:	705e      	strb	r6, [r3, #1]
	module_inst->reference = config->reference;
    11ec:	7823      	ldrb	r3, [r4, #0]
    11ee:	716b      	strb	r3, [r5, #5]
		module_inst->callback[i] = NULL;
    11f0:	2300      	movs	r3, #0
    11f2:	616b      	str	r3, [r5, #20]
    11f4:	61ab      	str	r3, [r5, #24]
    11f6:	61eb      	str	r3, [r5, #28]
	_dac_instances[0] = module_inst;
    11f8:	4b06      	ldr	r3, [pc, #24]	; (1214 <dac_init+0xcc>)
    11fa:	601d      	str	r5, [r3, #0]
	return STATUS_OK;
    11fc:	e7b5      	b.n	116a <dac_init+0x22>
    11fe:	46c0      	nop			; (mov r8, r8)
    1200:	40000400 	.word	0x40000400
    1204:	00002c21 	.word	0x00002c21
    1208:	00002b95 	.word	0x00002b95
    120c:	00002d19 	.word	0x00002d19
    1210:	0000112d 	.word	0x0000112d
    1214:	2000028c 	.word	0x2000028c

00001218 <dac_enable>:
 * \param[in] module_inst  Pointer to the DAC software instance struct
 *
 */
void dac_enable(
		struct dac_module *const module_inst)
{
    1218:	b570      	push	{r4, r5, r6, lr}
    121a:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Dac *const dac_module = module_inst->hw;
    121c:	6806      	ldr	r6, [r0, #0]

	/* Enable selected output */
	dac_module->CTRLB.reg |= module_inst->output;
    121e:	7873      	ldrb	r3, [r6, #1]
    1220:	7902      	ldrb	r2, [r0, #4]
    1222:	4313      	orrs	r3, r2
    1224:	7073      	strb	r3, [r6, #1]

	while (dac_is_syncing(module_inst)) {
    1226:	4d09      	ldr	r5, [pc, #36]	; (124c <dac_enable+0x34>)
    1228:	0020      	movs	r0, r4
    122a:	47a8      	blx	r5
    122c:	2800      	cmp	r0, #0
    122e:	d1fb      	bne.n	1228 <dac_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	dac_module->CTRLA.reg |= DAC_CTRLA_ENABLE;
    1230:	7833      	ldrb	r3, [r6, #0]
    1232:	2202      	movs	r2, #2
    1234:	4313      	orrs	r3, r2
    1236:	7033      	strb	r3, [r6, #0]

	/* Enable internal bandgap reference if selected in the configuration */
	if (module_inst->reference == DAC_REFERENCE_INT1V) {
    1238:	7963      	ldrb	r3, [r4, #5]
    123a:	2b00      	cmp	r3, #0
    123c:	d104      	bne.n	1248 <dac_enable+0x30>
    123e:	4a04      	ldr	r2, [pc, #16]	; (1250 <dac_enable+0x38>)
    1240:	6c13      	ldr	r3, [r2, #64]	; 0x40
    1242:	2104      	movs	r1, #4
    1244:	430b      	orrs	r3, r1
    1246:	6413      	str	r3, [r2, #64]	; 0x40
#else
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
	}

#endif
}
    1248:	bd70      	pop	{r4, r5, r6, pc}
    124a:	46c0      	nop			; (mov r8, r8)
    124c:	0000112d 	.word	0x0000112d
    1250:	40000800 	.word	0x40000800

00001254 <dac_chan_write>:
 */
enum status_code dac_chan_write(
		struct dac_module *const module_inst,
		enum dac_channel channel,
		const uint16_t data)
{
    1254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1256:	0004      	movs	r4, r0
    1258:	0017      	movs	r7, r2
	Assert(module_inst->hw);

	/* No channel support yet */
	UNUSED(channel);

	Dac *const dac_module = module_inst->hw;
    125a:	6806      	ldr	r6, [r0, #0]

	/* Wait until the synchronization is complete */
	while (dac_is_syncing(module_inst)) {
    125c:	4d06      	ldr	r5, [pc, #24]	; (1278 <dac_chan_write+0x24>)
    125e:	0020      	movs	r0, r4
    1260:	47a8      	blx	r5
    1262:	2800      	cmp	r0, #0
    1264:	d1fb      	bne.n	125e <dac_chan_write+0xa>
	};

	if (module_inst->start_on_event) {
    1266:	79a3      	ldrb	r3, [r4, #6]
    1268:	2b00      	cmp	r3, #0
    126a:	d102      	bne.n	1272 <dac_chan_write+0x1e>
		/* Write the new value to the buffered DAC data register */
		dac_module->DATABUF.reg = data;
	} else {
		/* Write the new value to the DAC data register */
		dac_module->DATA.reg = data;
    126c:	8137      	strh	r7, [r6, #8]
	}

	return STATUS_OK;
}
    126e:	2000      	movs	r0, #0
    1270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		dac_module->DATABUF.reg = data;
    1272:	81b7      	strh	r7, [r6, #12]
    1274:	e7fb      	b.n	126e <dac_chan_write+0x1a>
    1276:	46c0      	nop			; (mov r8, r8)
    1278:	0000112d 	.word	0x0000112d

0000127c <DAC_Handler>:
	}
}

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
    127c:	b570      	push	{r4, r5, r6, lr}
	struct dac_module *module = _dac_instances[instance];
    127e:	4b27      	ldr	r3, [pc, #156]	; (131c <DAC_Handler+0xa0>)
    1280:	681c      	ldr	r4, [r3, #0]
	Dac *const dac_hw = module->hw;
    1282:	6825      	ldr	r5, [r4, #0]
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
    1284:	79ab      	ldrb	r3, [r5, #6]
    1286:	07db      	lsls	r3, r3, #31
    1288:	d507      	bpl.n	129a <DAC_Handler+0x1e>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
    128a:	2301      	movs	r3, #1
    128c:	71ab      	strb	r3, [r5, #6]
		if ((module->callback) &&
    128e:	0023      	movs	r3, r4
    1290:	3314      	adds	r3, #20
    1292:	d002      	beq.n	129a <DAC_Handler+0x1e>
    1294:	7c63      	ldrb	r3, [r4, #17]
    1296:	2b00      	cmp	r3, #0
    1298:	d131      	bne.n	12fe <DAC_Handler+0x82>
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
    129a:	79ab      	ldrb	r3, [r5, #6]
    129c:	079b      	lsls	r3, r3, #30
    129e:	d538      	bpl.n	1312 <DAC_Handler+0x96>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
    12a0:	2302      	movs	r3, #2
    12a2:	71ab      	strb	r3, [r5, #6]
		if (module->remaining_conversions) {
    12a4:	89a3      	ldrh	r3, [r4, #12]
    12a6:	b29b      	uxth	r3, r3
    12a8:	2b00      	cmp	r3, #0
    12aa:	d02c      	beq.n	1306 <DAC_Handler+0x8a>
				module->job_buffer[module->transferred_conversions++];
    12ac:	89e3      	ldrh	r3, [r4, #14]
    12ae:	b29b      	uxth	r3, r3
    12b0:	1c5a      	adds	r2, r3, #1
    12b2:	b292      	uxth	r2, r2
    12b4:	81e2      	strh	r2, [r4, #14]
    12b6:	005b      	lsls	r3, r3, #1
    12b8:	68a2      	ldr	r2, [r4, #8]
    12ba:	4694      	mov	ip, r2
    12bc:	4463      	add	r3, ip
    12be:	881b      	ldrh	r3, [r3, #0]
    12c0:	b29b      	uxth	r3, r3
			dac_hw->DATABUF.reg =
    12c2:	81ab      	strh	r3, [r5, #12]
			module->remaining_conversions --;
    12c4:	89a3      	ldrh	r3, [r4, #12]
    12c6:	3b01      	subs	r3, #1
    12c8:	b29b      	uxth	r3, r3
    12ca:	81a3      	strh	r3, [r4, #12]
			if (module->remaining_conversions == 0) {
    12cc:	89a3      	ldrh	r3, [r4, #12]
    12ce:	b29b      	uxth	r3, r3
    12d0:	2b00      	cmp	r3, #0
    12d2:	d118      	bne.n	1306 <DAC_Handler+0x8a>
				module->job_status = STATUS_OK;
    12d4:	2200      	movs	r2, #0
    12d6:	3320      	adds	r3, #32
    12d8:	54e2      	strb	r2, [r4, r3]
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
    12da:	3b1e      	subs	r3, #30
    12dc:	712b      	strb	r3, [r5, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
    12de:	71ab      	strb	r3, [r5, #6]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    12e0:	2180      	movs	r1, #128	; 0x80
    12e2:	0489      	lsls	r1, r1, #18
    12e4:	337e      	adds	r3, #126	; 0x7e
    12e6:	4a0e      	ldr	r2, [pc, #56]	; (1320 <DAC_Handler+0xa4>)
    12e8:	50d1      	str	r1, [r2, r3]
				if ((module->callback) &&
    12ea:	0023      	movs	r3, r4
    12ec:	3314      	adds	r3, #20
    12ee:	d010      	beq.n	1312 <DAC_Handler+0x96>
    12f0:	7ca3      	ldrb	r3, [r4, #18]
    12f2:	2b00      	cmp	r3, #0
    12f4:	d00a      	beq.n	130c <DAC_Handler+0x90>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
    12f6:	2000      	movs	r0, #0
    12f8:	69e3      	ldr	r3, [r4, #28]
    12fa:	4798      	blx	r3
    12fc:	e006      	b.n	130c <DAC_Handler+0x90>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
    12fe:	2000      	movs	r0, #0
    1300:	69a3      	ldr	r3, [r4, #24]
    1302:	4798      	blx	r3
    1304:	e7c9      	b.n	129a <DAC_Handler+0x1e>
		if ((module->callback) &&
    1306:	0023      	movs	r3, r4
    1308:	3314      	adds	r3, #20
    130a:	d002      	beq.n	1312 <DAC_Handler+0x96>
    130c:	7c23      	ldrb	r3, [r4, #16]
    130e:	2b00      	cmp	r3, #0
    1310:	d100      	bne.n	1314 <DAC_Handler+0x98>
	_dac_interrupt_handler(0);
}
    1312:	bd70      	pop	{r4, r5, r6, pc}
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
    1314:	6963      	ldr	r3, [r4, #20]
    1316:	2000      	movs	r0, #0
    1318:	4798      	blx	r3
}
    131a:	e7fa      	b.n	1312 <DAC_Handler+0x96>
    131c:	2000028c 	.word	0x2000028c
    1320:	e000e100 	.word	0xe000e100

00001324 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1324:	b500      	push	{lr}
    1326:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1328:	ab01      	add	r3, sp, #4
    132a:	2280      	movs	r2, #128	; 0x80
    132c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    132e:	780a      	ldrb	r2, [r1, #0]
    1330:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1332:	784a      	ldrb	r2, [r1, #1]
    1334:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1336:	788a      	ldrb	r2, [r1, #2]
    1338:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    133a:	0019      	movs	r1, r3
    133c:	4b01      	ldr	r3, [pc, #4]	; (1344 <port_pin_set_config+0x20>)
    133e:	4798      	blx	r3
}
    1340:	b003      	add	sp, #12
    1342:	bd00      	pop	{pc}
    1344:	00002d19 	.word	0x00002d19

00001348 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    1348:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    134a:	2207      	movs	r2, #7
    134c:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    134e:	421a      	tst	r2, r3
    1350:	d1fc      	bne.n	134c <_i2c_master_wait_for_sync+0x4>
}
    1352:	4770      	bx	lr

00001354 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    1354:	b5f0      	push	{r4, r5, r6, r7, lr}
    1356:	46de      	mov	lr, fp
    1358:	4657      	mov	r7, sl
    135a:	464e      	mov	r6, r9
    135c:	4645      	mov	r5, r8
    135e:	b5e0      	push	{r5, r6, r7, lr}
    1360:	b08b      	sub	sp, #44	; 0x2c
    1362:	0005      	movs	r5, r0
    1364:	000f      	movs	r7, r1
    1366:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    1368:	6029      	str	r1, [r5, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    136a:	0008      	movs	r0, r1
    136c:	4b9b      	ldr	r3, [pc, #620]	; (15dc <i2c_master_init+0x288>)
    136e:	4798      	blx	r3
    1370:	4a9b      	ldr	r2, [pc, #620]	; (15e0 <i2c_master_init+0x28c>)
    1372:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1374:	1c84      	adds	r4, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1376:	2301      	movs	r3, #1
    1378:	40a3      	lsls	r3, r4
    137a:	430b      	orrs	r3, r1
    137c:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    137e:	a909      	add	r1, sp, #36	; 0x24
    1380:	7b33      	ldrb	r3, [r6, #12]
    1382:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1384:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1386:	b2c4      	uxtb	r4, r0
    1388:	0020      	movs	r0, r4
    138a:	4b96      	ldr	r3, [pc, #600]	; (15e4 <i2c_master_init+0x290>)
    138c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    138e:	0020      	movs	r0, r4
    1390:	4b95      	ldr	r3, [pc, #596]	; (15e8 <i2c_master_init+0x294>)
    1392:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1394:	7b30      	ldrb	r0, [r6, #12]
    1396:	2100      	movs	r1, #0
    1398:	4b94      	ldr	r3, [pc, #592]	; (15ec <i2c_master_init+0x298>)
    139a:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    139c:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
    139e:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    13a0:	079b      	lsls	r3, r3, #30
    13a2:	d506      	bpl.n	13b2 <i2c_master_init+0x5e>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    13a4:	b00b      	add	sp, #44	; 0x2c
    13a6:	bc3c      	pop	{r2, r3, r4, r5}
    13a8:	4690      	mov	r8, r2
    13aa:	4699      	mov	r9, r3
    13ac:	46a2      	mov	sl, r4
    13ae:	46ab      	mov	fp, r5
    13b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    13b2:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
    13b4:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    13b6:	07db      	lsls	r3, r3, #31
    13b8:	d4f4      	bmi.n	13a4 <i2c_master_init+0x50>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    13ba:	6828      	ldr	r0, [r5, #0]
    13bc:	4b87      	ldr	r3, [pc, #540]	; (15dc <i2c_master_init+0x288>)
    13be:	4699      	mov	r9, r3
    13c0:	4798      	blx	r3
    13c2:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    13c4:	498a      	ldr	r1, [pc, #552]	; (15f0 <i2c_master_init+0x29c>)
    13c6:	4b8b      	ldr	r3, [pc, #556]	; (15f4 <i2c_master_init+0x2a0>)
    13c8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    13ca:	00a4      	lsls	r4, r4, #2
    13cc:	4b8a      	ldr	r3, [pc, #552]	; (15f8 <i2c_master_init+0x2a4>)
    13ce:	50e5      	str	r5, [r4, r3]
	module->registered_callback = 0;
    13d0:	2300      	movs	r3, #0
    13d2:	762b      	strb	r3, [r5, #24]
	module->enabled_callback = 0;
    13d4:	766b      	strb	r3, [r5, #25]
	module->buffer_length = 0;
    13d6:	2400      	movs	r4, #0
    13d8:	836b      	strh	r3, [r5, #26]
	module->buffer_remaining = 0;
    13da:	83ab      	strh	r3, [r5, #28]
	module->status = STATUS_OK;
    13dc:	2225      	movs	r2, #37	; 0x25
    13de:	54ac      	strb	r4, [r5, r2]
	module->buffer = NULL;
    13e0:	622b      	str	r3, [r5, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    13e2:	3314      	adds	r3, #20
    13e4:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    13e6:	682b      	ldr	r3, [r5, #0]
    13e8:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    13ea:	0018      	movs	r0, r3
    13ec:	47c8      	blx	r9
    13ee:	4681      	mov	r9, r0
    13f0:	2380      	movs	r3, #128	; 0x80
    13f2:	aa08      	add	r2, sp, #32
    13f4:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    13f6:	7054      	strb	r4, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    13f8:	2301      	movs	r3, #1
    13fa:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
    13fc:	70d4      	strb	r4, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
    13fe:	69f0      	ldr	r0, [r6, #28]
	uint32_t pad1 = config->pinmux_pad1;
    1400:	6a37      	ldr	r7, [r6, #32]
	if (pad0 == PINMUX_DEFAULT) {
    1402:	2800      	cmp	r0, #0
    1404:	d100      	bne.n	1408 <i2c_master_init+0xb4>
    1406:	e0a7      	b.n	1558 <i2c_master_init+0x204>
	pin_conf.mux_position = pad0 & 0xFFFF;
    1408:	ab08      	add	r3, sp, #32
    140a:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    140c:	2302      	movs	r3, #2
    140e:	aa08      	add	r2, sp, #32
    1410:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    1412:	0c00      	lsrs	r0, r0, #16
    1414:	b2c0      	uxtb	r0, r0
    1416:	0011      	movs	r1, r2
    1418:	4b78      	ldr	r3, [pc, #480]	; (15fc <i2c_master_init+0x2a8>)
    141a:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    141c:	2f00      	cmp	r7, #0
    141e:	d100      	bne.n	1422 <i2c_master_init+0xce>
    1420:	e09f      	b.n	1562 <i2c_master_init+0x20e>
	pin_conf.mux_position = pad1 & 0xFFFF;
    1422:	ab08      	add	r3, sp, #32
    1424:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    1426:	2302      	movs	r3, #2
    1428:	aa08      	add	r2, sp, #32
    142a:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    142c:	0c3f      	lsrs	r7, r7, #16
    142e:	b2f8      	uxtb	r0, r7
    1430:	0011      	movs	r1, r2
    1432:	4b72      	ldr	r3, [pc, #456]	; (15fc <i2c_master_init+0x2a8>)
    1434:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    1436:	8ab3      	ldrh	r3, [r6, #20]
    1438:	80eb      	strh	r3, [r5, #6]
	module->buffer_timeout = config->buffer_timeout;
    143a:	8af3      	ldrh	r3, [r6, #22]
    143c:	812b      	strh	r3, [r5, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    143e:	7e33      	ldrb	r3, [r6, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    1440:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    1442:	2b00      	cmp	r3, #0
    1444:	d104      	bne.n	1450 <i2c_master_init+0xfc>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1446:	4b6e      	ldr	r3, [pc, #440]	; (1600 <i2c_master_init+0x2ac>)
    1448:	789b      	ldrb	r3, [r3, #2]
    144a:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    144c:	0fdb      	lsrs	r3, r3, #31
    144e:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    1450:	68b1      	ldr	r1, [r6, #8]
    1452:	6933      	ldr	r3, [r6, #16]
    1454:	430b      	orrs	r3, r1
    1456:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    1458:	2224      	movs	r2, #36	; 0x24
    145a:	5cb2      	ldrb	r2, [r6, r2]
    145c:	2a00      	cmp	r2, #0
    145e:	d002      	beq.n	1466 <i2c_master_init+0x112>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    1460:	2280      	movs	r2, #128	; 0x80
    1462:	05d2      	lsls	r2, r2, #23
    1464:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    1466:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    1468:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    146a:	222c      	movs	r2, #44	; 0x2c
    146c:	5cb2      	ldrb	r2, [r6, r2]
    146e:	2a00      	cmp	r2, #0
    1470:	d103      	bne.n	147a <i2c_master_init+0x126>
    1472:	2280      	movs	r2, #128	; 0x80
    1474:	0492      	lsls	r2, r2, #18
    1476:	4291      	cmp	r1, r2
    1478:	d102      	bne.n	1480 <i2c_master_init+0x12c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    147a:	2280      	movs	r2, #128	; 0x80
    147c:	0512      	lsls	r2, r2, #20
    147e:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    1480:	222d      	movs	r2, #45	; 0x2d
    1482:	5cb2      	ldrb	r2, [r6, r2]
    1484:	2a00      	cmp	r2, #0
    1486:	d002      	beq.n	148e <i2c_master_init+0x13a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    1488:	2280      	movs	r2, #128	; 0x80
    148a:	0412      	lsls	r2, r2, #16
    148c:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    148e:	222e      	movs	r2, #46	; 0x2e
    1490:	5cb2      	ldrb	r2, [r6, r2]
    1492:	2a00      	cmp	r2, #0
    1494:	d002      	beq.n	149c <i2c_master_init+0x148>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    1496:	2280      	movs	r2, #128	; 0x80
    1498:	03d2      	lsls	r2, r2, #15
    149a:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    149c:	4642      	mov	r2, r8
    149e:	6812      	ldr	r2, [r2, #0]
    14a0:	4313      	orrs	r3, r2
    14a2:	4642      	mov	r2, r8
    14a4:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    14a6:	2380      	movs	r3, #128	; 0x80
    14a8:	005b      	lsls	r3, r3, #1
    14aa:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    14ac:	4648      	mov	r0, r9
    14ae:	3014      	adds	r0, #20
    14b0:	b2c0      	uxtb	r0, r0
    14b2:	4b54      	ldr	r3, [pc, #336]	; (1604 <i2c_master_init+0x2b0>)
    14b4:	4798      	blx	r3
    14b6:	0005      	movs	r5, r0
    14b8:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    14ba:	27fa      	movs	r7, #250	; 0xfa
    14bc:	00bf      	lsls	r7, r7, #2
    14be:	6833      	ldr	r3, [r6, #0]
    14c0:	435f      	muls	r7, r3
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    14c2:	6873      	ldr	r3, [r6, #4]
    14c4:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    14c6:	4c50      	ldr	r4, [pc, #320]	; (1608 <i2c_master_init+0x2b4>)
    14c8:	47a0      	blx	r4
    14ca:	9002      	str	r0, [sp, #8]
    14cc:	9103      	str	r1, [sp, #12]
    14ce:	0078      	lsls	r0, r7, #1
    14d0:	47a0      	blx	r4
    14d2:	9000      	str	r0, [sp, #0]
    14d4:	9101      	str	r1, [sp, #4]
	uint32_t trise       = config->sda_scl_rise_time_ns;
    14d6:	8e30      	ldrh	r0, [r6, #48]	; 0x30
	tmp_baud = (int32_t)(div_ceil(
    14d8:	4368      	muls	r0, r5
    14da:	47a0      	blx	r4
    14dc:	4b4b      	ldr	r3, [pc, #300]	; (160c <i2c_master_init+0x2b8>)
    14de:	469b      	mov	fp, r3
    14e0:	4a4b      	ldr	r2, [pc, #300]	; (1610 <i2c_master_init+0x2bc>)
    14e2:	4b4c      	ldr	r3, [pc, #304]	; (1614 <i2c_master_init+0x2c0>)
    14e4:	47d8      	blx	fp
    14e6:	4d4c      	ldr	r5, [pc, #304]	; (1618 <i2c_master_init+0x2c4>)
    14e8:	2200      	movs	r2, #0
    14ea:	4b4c      	ldr	r3, [pc, #304]	; (161c <i2c_master_init+0x2c8>)
    14ec:	47a8      	blx	r5
    14ee:	9004      	str	r0, [sp, #16]
    14f0:	9105      	str	r1, [sp, #20]
    14f2:	0038      	movs	r0, r7
    14f4:	47a0      	blx	r4
    14f6:	0002      	movs	r2, r0
    14f8:	000b      	movs	r3, r1
    14fa:	9804      	ldr	r0, [sp, #16]
    14fc:	9905      	ldr	r1, [sp, #20]
    14fe:	47d8      	blx	fp
    1500:	0002      	movs	r2, r0
    1502:	000b      	movs	r3, r1
    1504:	4c46      	ldr	r4, [pc, #280]	; (1620 <i2c_master_init+0x2cc>)
    1506:	9802      	ldr	r0, [sp, #8]
    1508:	9903      	ldr	r1, [sp, #12]
    150a:	47a0      	blx	r4
    150c:	9a00      	ldr	r2, [sp, #0]
    150e:	9b01      	ldr	r3, [sp, #4]
    1510:	47a8      	blx	r5
    1512:	2200      	movs	r2, #0
    1514:	4b43      	ldr	r3, [pc, #268]	; (1624 <i2c_master_init+0x2d0>)
    1516:	47a0      	blx	r4
    1518:	9a00      	ldr	r2, [sp, #0]
    151a:	9b01      	ldr	r3, [sp, #4]
    151c:	4c42      	ldr	r4, [pc, #264]	; (1628 <i2c_master_init+0x2d4>)
    151e:	47a0      	blx	r4
    1520:	4b42      	ldr	r3, [pc, #264]	; (162c <i2c_master_init+0x2d8>)
    1522:	4798      	blx	r3
    1524:	0004      	movs	r4, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    1526:	2380      	movs	r3, #128	; 0x80
    1528:	049b      	lsls	r3, r3, #18
    152a:	68b2      	ldr	r2, [r6, #8]
    152c:	429a      	cmp	r2, r3
    152e:	d01e      	beq.n	156e <i2c_master_init+0x21a>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    1530:	0003      	movs	r3, r0
    1532:	2040      	movs	r0, #64	; 0x40
    1534:	2cff      	cmp	r4, #255	; 0xff
    1536:	d900      	bls.n	153a <i2c_master_init+0x1e6>
    1538:	e734      	b.n	13a4 <i2c_master_init+0x50>
	int32_t tmp_baudlow_hs = 0;
    153a:	2600      	movs	r6, #0
	int32_t tmp_baud_hs = 0;
    153c:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    153e:	24ff      	movs	r4, #255	; 0xff
    1540:	401c      	ands	r4, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    1542:	0636      	lsls	r6, r6, #24
    1544:	4334      	orrs	r4, r6
    1546:	0400      	lsls	r0, r0, #16
    1548:	23ff      	movs	r3, #255	; 0xff
    154a:	041b      	lsls	r3, r3, #16
    154c:	4018      	ands	r0, r3
    154e:	4304      	orrs	r4, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1550:	4643      	mov	r3, r8
    1552:	60dc      	str	r4, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    1554:	2000      	movs	r0, #0
    1556:	e725      	b.n	13a4 <i2c_master_init+0x50>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    1558:	2100      	movs	r1, #0
    155a:	4640      	mov	r0, r8
    155c:	4b34      	ldr	r3, [pc, #208]	; (1630 <i2c_master_init+0x2dc>)
    155e:	4798      	blx	r3
    1560:	e752      	b.n	1408 <i2c_master_init+0xb4>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    1562:	2101      	movs	r1, #1
    1564:	4640      	mov	r0, r8
    1566:	4b32      	ldr	r3, [pc, #200]	; (1630 <i2c_master_init+0x2dc>)
    1568:	4798      	blx	r3
    156a:	0007      	movs	r7, r0
    156c:	e759      	b.n	1422 <i2c_master_init+0xce>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    156e:	27fa      	movs	r7, #250	; 0xfa
    1570:	00bf      	lsls	r7, r7, #2
    1572:	4653      	mov	r3, sl
    1574:	435f      	muls	r7, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    1576:	9802      	ldr	r0, [sp, #8]
    1578:	9903      	ldr	r1, [sp, #12]
    157a:	0002      	movs	r2, r0
    157c:	000b      	movs	r3, r1
    157e:	47a8      	blx	r5
    1580:	9000      	str	r0, [sp, #0]
    1582:	9101      	str	r1, [sp, #4]
    1584:	0038      	movs	r0, r7
    1586:	4b20      	ldr	r3, [pc, #128]	; (1608 <i2c_master_init+0x2b4>)
    1588:	4798      	blx	r3
    158a:	2200      	movs	r2, #0
    158c:	4b29      	ldr	r3, [pc, #164]	; (1634 <i2c_master_init+0x2e0>)
    158e:	47d8      	blx	fp
    1590:	0002      	movs	r2, r0
    1592:	000b      	movs	r3, r1
    1594:	9800      	ldr	r0, [sp, #0]
    1596:	9901      	ldr	r1, [sp, #4]
    1598:	4e23      	ldr	r6, [pc, #140]	; (1628 <i2c_master_init+0x2d4>)
    159a:	47b0      	blx	r6
    159c:	2200      	movs	r2, #0
    159e:	4b21      	ldr	r3, [pc, #132]	; (1624 <i2c_master_init+0x2d0>)
    15a0:	4e1f      	ldr	r6, [pc, #124]	; (1620 <i2c_master_init+0x2cc>)
    15a2:	47b0      	blx	r6
    15a4:	4b21      	ldr	r3, [pc, #132]	; (162c <i2c_master_init+0x2d8>)
    15a6:	4798      	blx	r3
    15a8:	1e06      	subs	r6, r0, #0
		if (tmp_baudlow_hs) {
    15aa:	d00c      	beq.n	15c6 <i2c_master_init+0x272>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    15ac:	0039      	movs	r1, r7
    15ae:	9807      	ldr	r0, [sp, #28]
    15b0:	4b21      	ldr	r3, [pc, #132]	; (1638 <i2c_master_init+0x2e4>)
    15b2:	4798      	blx	r3
    15b4:	3802      	subs	r0, #2
    15b6:	1b80      	subs	r0, r0, r6
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    15b8:	0023      	movs	r3, r4
    15ba:	2cff      	cmp	r4, #255	; 0xff
    15bc:	d80c      	bhi.n	15d8 <i2c_master_init+0x284>
    15be:	28ff      	cmp	r0, #255	; 0xff
    15c0:	d9bd      	bls.n	153e <i2c_master_init+0x1ea>
    15c2:	2040      	movs	r0, #64	; 0x40
    15c4:	e6ee      	b.n	13a4 <i2c_master_init+0x50>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    15c6:	0079      	lsls	r1, r7, #1
    15c8:	1e48      	subs	r0, r1, #1
    15ca:	9b07      	ldr	r3, [sp, #28]
    15cc:	469c      	mov	ip, r3
    15ce:	4460      	add	r0, ip
    15d0:	4b19      	ldr	r3, [pc, #100]	; (1638 <i2c_master_init+0x2e4>)
    15d2:	4798      	blx	r3
    15d4:	3801      	subs	r0, #1
    15d6:	e7ef      	b.n	15b8 <i2c_master_init+0x264>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    15d8:	2040      	movs	r0, #64	; 0x40
    15da:	e6e3      	b.n	13a4 <i2c_master_init+0x50>
    15dc:	00001f91 	.word	0x00001f91
    15e0:	40000400 	.word	0x40000400
    15e4:	00002c21 	.word	0x00002c21
    15e8:	00002b95 	.word	0x00002b95
    15ec:	00001e49 	.word	0x00001e49
    15f0:	00001a65 	.word	0x00001a65
    15f4:	00002595 	.word	0x00002595
    15f8:	20000290 	.word	0x20000290
    15fc:	00002d19 	.word	0x00002d19
    1600:	41002000 	.word	0x41002000
    1604:	00002c3d 	.word	0x00002c3d
    1608:	00004fb9 	.word	0x00004fb9
    160c:	00004425 	.word	0x00004425
    1610:	e826d695 	.word	0xe826d695
    1614:	3e112e0b 	.word	0x3e112e0b
    1618:	0000379d 	.word	0x0000379d
    161c:	40240000 	.word	0x40240000
    1620:	00004925 	.word	0x00004925
    1624:	3ff00000 	.word	0x3ff00000
    1628:	00003dbd 	.word	0x00003dbd
    162c:	00004f51 	.word	0x00004f51
    1630:	00001e95 	.word	0x00001e95
    1634:	40080000 	.word	0x40080000
    1638:	0000345d 	.word	0x0000345d

0000163c <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    163c:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    163e:	7e1a      	ldrb	r2, [r3, #24]
    1640:	0792      	lsls	r2, r2, #30
    1642:	d507      	bpl.n	1654 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1644:	2202      	movs	r2, #2
    1646:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1648:	8b5b      	ldrh	r3, [r3, #26]
    164a:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    164c:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    164e:	17db      	asrs	r3, r3, #31
    1650:	4018      	ands	r0, r3
}
    1652:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1654:	8b5a      	ldrh	r2, [r3, #26]
    1656:	0752      	lsls	r2, r2, #29
    1658:	d506      	bpl.n	1668 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    165a:	6859      	ldr	r1, [r3, #4]
    165c:	22c0      	movs	r2, #192	; 0xc0
    165e:	0292      	lsls	r2, r2, #10
    1660:	430a      	orrs	r2, r1
    1662:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    1664:	2018      	movs	r0, #24
    1666:	e7f4      	b.n	1652 <_i2c_master_address_response+0x16>
	return STATUS_OK;
    1668:	2000      	movs	r0, #0
    166a:	e7f2      	b.n	1652 <_i2c_master_address_response+0x16>

0000166c <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    166c:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    166e:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    1670:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1672:	2401      	movs	r4, #1
    1674:	2502      	movs	r5, #2
    1676:	7e11      	ldrb	r1, [r2, #24]
    1678:	4221      	tst	r1, r4
    167a:	d10b      	bne.n	1694 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    167c:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    167e:	4229      	tst	r1, r5
    1680:	d106      	bne.n	1690 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    1682:	3301      	adds	r3, #1
    1684:	b29b      	uxth	r3, r3
    1686:	8901      	ldrh	r1, [r0, #8]
    1688:	4299      	cmp	r1, r3
    168a:	d8f4      	bhi.n	1676 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    168c:	2012      	movs	r0, #18
    168e:	e002      	b.n	1696 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    1690:	2000      	movs	r0, #0
    1692:	e000      	b.n	1696 <_i2c_master_wait_for_bus+0x2a>
    1694:	2000      	movs	r0, #0
}
    1696:	bd30      	pop	{r4, r5, pc}

00001698 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    1698:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    169a:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    169c:	6862      	ldr	r2, [r4, #4]
    169e:	2380      	movs	r3, #128	; 0x80
    16a0:	02db      	lsls	r3, r3, #11
    16a2:	4313      	orrs	r3, r2
    16a4:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    16a6:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    16a8:	4b02      	ldr	r3, [pc, #8]	; (16b4 <_i2c_master_send_hs_master_code+0x1c>)
    16aa:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    16ac:	2301      	movs	r3, #1
    16ae:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    16b0:	bd10      	pop	{r4, pc}
    16b2:	46c0      	nop			; (mov r8, r8)
    16b4:	0000166d 	.word	0x0000166d

000016b8 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    16b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    16ba:	46de      	mov	lr, fp
    16bc:	4657      	mov	r7, sl
    16be:	464e      	mov	r6, r9
    16c0:	4645      	mov	r5, r8
    16c2:	b5e0      	push	{r5, r6, r7, lr}
    16c4:	b083      	sub	sp, #12
    16c6:	0006      	movs	r6, r0
    16c8:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    16ca:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    16cc:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    16ce:	682b      	ldr	r3, [r5, #0]
    16d0:	011b      	lsls	r3, r3, #4
    16d2:	0fdb      	lsrs	r3, r3, #31
    16d4:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    16d6:	7a4b      	ldrb	r3, [r1, #9]
    16d8:	2b00      	cmp	r3, #0
    16da:	d12b      	bne.n	1734 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    16dc:	686b      	ldr	r3, [r5, #4]
    16de:	4a58      	ldr	r2, [pc, #352]	; (1840 <_i2c_master_read_packet+0x188>)
    16e0:	4013      	ands	r3, r2
    16e2:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    16e4:	464b      	mov	r3, r9
    16e6:	7a1b      	ldrb	r3, [r3, #8]
    16e8:	2b00      	cmp	r3, #0
    16ea:	d127      	bne.n	173c <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    16ec:	464b      	mov	r3, r9
    16ee:	881b      	ldrh	r3, [r3, #0]
    16f0:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    16f2:	464a      	mov	r2, r9
    16f4:	7a52      	ldrb	r2, [r2, #9]
    16f6:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    16f8:	4313      	orrs	r3, r2
    16fa:	2201      	movs	r2, #1
    16fc:	4313      	orrs	r3, r2
    16fe:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1700:	0030      	movs	r0, r6
    1702:	4b50      	ldr	r3, [pc, #320]	; (1844 <_i2c_master_read_packet+0x18c>)
    1704:	4798      	blx	r3
    1706:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    1708:	4653      	mov	r3, sl
    170a:	2b00      	cmp	r3, #0
    170c:	d003      	beq.n	1716 <_i2c_master_read_packet+0x5e>
    170e:	464b      	mov	r3, r9
    1710:	885b      	ldrh	r3, [r3, #2]
    1712:	2b01      	cmp	r3, #1
    1714:	d03b      	beq.n	178e <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    1716:	686b      	ldr	r3, [r5, #4]
    1718:	4a49      	ldr	r2, [pc, #292]	; (1840 <_i2c_master_read_packet+0x188>)
    171a:	4013      	ands	r3, r2
    171c:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    171e:	9b01      	ldr	r3, [sp, #4]
    1720:	2b00      	cmp	r3, #0
    1722:	d03a      	beq.n	179a <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    1724:	9801      	ldr	r0, [sp, #4]
    1726:	b003      	add	sp, #12
    1728:	bc3c      	pop	{r2, r3, r4, r5}
    172a:	4690      	mov	r8, r2
    172c:	4699      	mov	r9, r3
    172e:	46a2      	mov	sl, r4
    1730:	46ab      	mov	fp, r5
    1732:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1734:	7a89      	ldrb	r1, [r1, #10]
    1736:	4b44      	ldr	r3, [pc, #272]	; (1848 <_i2c_master_read_packet+0x190>)
    1738:	4798      	blx	r3
    173a:	e7cf      	b.n	16dc <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    173c:	464b      	mov	r3, r9
    173e:	881b      	ldrh	r3, [r3, #0]
    1740:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1742:	464a      	mov	r2, r9
    1744:	7a52      	ldrb	r2, [r2, #9]
    1746:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    1748:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    174a:	2280      	movs	r2, #128	; 0x80
    174c:	0212      	lsls	r2, r2, #8
    174e:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    1750:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    1752:	0030      	movs	r0, r6
    1754:	4b3b      	ldr	r3, [pc, #236]	; (1844 <_i2c_master_read_packet+0x18c>)
    1756:	4798      	blx	r3
    1758:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    175a:	686b      	ldr	r3, [r5, #4]
    175c:	4a38      	ldr	r2, [pc, #224]	; (1840 <_i2c_master_read_packet+0x188>)
    175e:	4013      	ands	r3, r2
    1760:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    1762:	2800      	cmp	r0, #0
    1764:	d1de      	bne.n	1724 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
    1766:	0030      	movs	r0, r6
    1768:	4b38      	ldr	r3, [pc, #224]	; (184c <_i2c_master_read_packet+0x194>)
    176a:	4798      	blx	r3
    176c:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    176e:	2800      	cmp	r0, #0
    1770:	d1d8      	bne.n	1724 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1772:	464b      	mov	r3, r9
    1774:	881b      	ldrh	r3, [r3, #0]
    1776:	0a1b      	lsrs	r3, r3, #8
    1778:	2278      	movs	r2, #120	; 0x78
    177a:	4313      	orrs	r3, r2
    177c:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    177e:	464a      	mov	r2, r9
    1780:	7a52      	ldrb	r2, [r2, #9]
    1782:	0392      	lsls	r2, r2, #14
    1784:	2101      	movs	r1, #1
    1786:	430a      	orrs	r2, r1
    1788:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    178a:	626b      	str	r3, [r5, #36]	; 0x24
    178c:	e7b8      	b.n	1700 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    178e:	686a      	ldr	r2, [r5, #4]
    1790:	2380      	movs	r3, #128	; 0x80
    1792:	02db      	lsls	r3, r3, #11
    1794:	4313      	orrs	r3, r2
    1796:	606b      	str	r3, [r5, #4]
    1798:	e7c1      	b.n	171e <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
    179a:	0030      	movs	r0, r6
    179c:	4b2b      	ldr	r3, [pc, #172]	; (184c <_i2c_master_read_packet+0x194>)
    179e:	4798      	blx	r3
    17a0:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    17a2:	2800      	cmp	r0, #0
    17a4:	d1be      	bne.n	1724 <_i2c_master_read_packet+0x6c>
    17a6:	3c01      	subs	r4, #1
    17a8:	b2a4      	uxth	r4, r4
    17aa:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    17ac:	4b28      	ldr	r3, [pc, #160]	; (1850 <_i2c_master_read_packet+0x198>)
    17ae:	469b      	mov	fp, r3
    17b0:	e015      	b.n	17de <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    17b2:	2c01      	cmp	r4, #1
    17b4:	d020      	beq.n	17f8 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
    17b6:	0030      	movs	r0, r6
    17b8:	4b26      	ldr	r3, [pc, #152]	; (1854 <_i2c_master_read_packet+0x19c>)
    17ba:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    17bc:	4643      	mov	r3, r8
    17be:	1c5f      	adds	r7, r3, #1
    17c0:	b2bf      	uxth	r7, r7
    17c2:	2328      	movs	r3, #40	; 0x28
    17c4:	5ceb      	ldrb	r3, [r5, r3]
    17c6:	464a      	mov	r2, r9
    17c8:	6852      	ldr	r2, [r2, #4]
    17ca:	4641      	mov	r1, r8
    17cc:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    17ce:	0030      	movs	r0, r6
    17d0:	4b1c      	ldr	r3, [pc, #112]	; (1844 <_i2c_master_read_packet+0x18c>)
    17d2:	4798      	blx	r3
    17d4:	3c01      	subs	r4, #1
    17d6:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    17d8:	2800      	cmp	r0, #0
    17da:	d115      	bne.n	1808 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
    17dc:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    17de:	455c      	cmp	r4, fp
    17e0:	d014      	beq.n	180c <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    17e2:	8b6b      	ldrh	r3, [r5, #26]
    17e4:	069b      	lsls	r3, r3, #26
    17e6:	d527      	bpl.n	1838 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    17e8:	7af3      	ldrb	r3, [r6, #11]
    17ea:	2b00      	cmp	r3, #0
    17ec:	d0e3      	beq.n	17b6 <_i2c_master_read_packet+0xfe>
    17ee:	4653      	mov	r3, sl
    17f0:	2b00      	cmp	r3, #0
    17f2:	d1de      	bne.n	17b2 <_i2c_master_read_packet+0xfa>
    17f4:	2c00      	cmp	r4, #0
    17f6:	d1de      	bne.n	17b6 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    17f8:	686a      	ldr	r2, [r5, #4]
    17fa:	2380      	movs	r3, #128	; 0x80
    17fc:	02db      	lsls	r3, r3, #11
    17fe:	4313      	orrs	r3, r2
    1800:	606b      	str	r3, [r5, #4]
    1802:	3c01      	subs	r4, #1
    1804:	b2a4      	uxth	r4, r4
    1806:	e7ea      	b.n	17de <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
    1808:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    180a:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    180c:	7ab3      	ldrb	r3, [r6, #10]
    180e:	2b00      	cmp	r3, #0
    1810:	d109      	bne.n	1826 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
    1812:	0030      	movs	r0, r6
    1814:	4b0f      	ldr	r3, [pc, #60]	; (1854 <_i2c_master_read_packet+0x19c>)
    1816:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    1818:	2328      	movs	r3, #40	; 0x28
    181a:	5cea      	ldrb	r2, [r5, r3]
    181c:	464b      	mov	r3, r9
    181e:	685b      	ldr	r3, [r3, #4]
    1820:	4641      	mov	r1, r8
    1822:	545a      	strb	r2, [r3, r1]
    1824:	e77e      	b.n	1724 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
    1826:	0030      	movs	r0, r6
    1828:	4b0a      	ldr	r3, [pc, #40]	; (1854 <_i2c_master_read_packet+0x19c>)
    182a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    182c:	686a      	ldr	r2, [r5, #4]
    182e:	23c0      	movs	r3, #192	; 0xc0
    1830:	029b      	lsls	r3, r3, #10
    1832:	4313      	orrs	r3, r2
    1834:	606b      	str	r3, [r5, #4]
    1836:	e7ec      	b.n	1812 <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
    1838:	2341      	movs	r3, #65	; 0x41
    183a:	9301      	str	r3, [sp, #4]
    183c:	e772      	b.n	1724 <_i2c_master_read_packet+0x6c>
    183e:	46c0      	nop			; (mov r8, r8)
    1840:	fffbffff 	.word	0xfffbffff
    1844:	0000166d 	.word	0x0000166d
    1848:	00001699 	.word	0x00001699
    184c:	0000163d 	.word	0x0000163d
    1850:	0000ffff 	.word	0x0000ffff
    1854:	00001349 	.word	0x00001349

00001858 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1858:	b5f0      	push	{r4, r5, r6, r7, lr}
    185a:	46de      	mov	lr, fp
    185c:	4657      	mov	r7, sl
    185e:	464e      	mov	r6, r9
    1860:	4645      	mov	r5, r8
    1862:	b5e0      	push	{r5, r6, r7, lr}
    1864:	b083      	sub	sp, #12
    1866:	0006      	movs	r6, r0
    1868:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    186a:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    186c:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    186e:	4b32      	ldr	r3, [pc, #200]	; (1938 <_i2c_master_write_packet+0xe0>)
    1870:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1872:	7a7b      	ldrb	r3, [r7, #9]
    1874:	2b00      	cmp	r3, #0
    1876:	d11d      	bne.n	18b4 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1878:	686b      	ldr	r3, [r5, #4]
    187a:	4a30      	ldr	r2, [pc, #192]	; (193c <_i2c_master_write_packet+0xe4>)
    187c:	4013      	ands	r3, r2
    187e:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    1880:	7a3b      	ldrb	r3, [r7, #8]
    1882:	2b00      	cmp	r3, #0
    1884:	d01b      	beq.n	18be <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1886:	883b      	ldrh	r3, [r7, #0]
    1888:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    188a:	7a7a      	ldrb	r2, [r7, #9]
    188c:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    188e:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1890:	2280      	movs	r2, #128	; 0x80
    1892:	0212      	lsls	r2, r2, #8
    1894:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1896:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1898:	0030      	movs	r0, r6
    189a:	4b29      	ldr	r3, [pc, #164]	; (1940 <_i2c_master_write_packet+0xe8>)
    189c:	4798      	blx	r3
    189e:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    18a0:	2800      	cmp	r0, #0
    18a2:	d013      	beq.n	18cc <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    18a4:	9801      	ldr	r0, [sp, #4]
    18a6:	b003      	add	sp, #12
    18a8:	bc3c      	pop	{r2, r3, r4, r5}
    18aa:	4690      	mov	r8, r2
    18ac:	4699      	mov	r9, r3
    18ae:	46a2      	mov	sl, r4
    18b0:	46ab      	mov	fp, r5
    18b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    18b4:	7ab9      	ldrb	r1, [r7, #10]
    18b6:	0030      	movs	r0, r6
    18b8:	4b22      	ldr	r3, [pc, #136]	; (1944 <_i2c_master_write_packet+0xec>)
    18ba:	4798      	blx	r3
    18bc:	e7dc      	b.n	1878 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    18be:	883b      	ldrh	r3, [r7, #0]
    18c0:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    18c2:	7a7a      	ldrb	r2, [r7, #9]
    18c4:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    18c6:	4313      	orrs	r3, r2
    18c8:	626b      	str	r3, [r5, #36]	; 0x24
    18ca:	e7e5      	b.n	1898 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    18cc:	0030      	movs	r0, r6
    18ce:	4b1e      	ldr	r3, [pc, #120]	; (1948 <_i2c_master_write_packet+0xf0>)
    18d0:	4798      	blx	r3
    18d2:	1e03      	subs	r3, r0, #0
    18d4:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    18d6:	d1e5      	bne.n	18a4 <_i2c_master_write_packet+0x4c>
    18d8:	46a0      	mov	r8, r4
    18da:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    18dc:	3320      	adds	r3, #32
    18de:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    18e0:	4b15      	ldr	r3, [pc, #84]	; (1938 <_i2c_master_write_packet+0xe0>)
    18e2:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    18e4:	4b16      	ldr	r3, [pc, #88]	; (1940 <_i2c_master_write_packet+0xe8>)
    18e6:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    18e8:	4544      	cmp	r4, r8
    18ea:	d015      	beq.n	1918 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    18ec:	8b6b      	ldrh	r3, [r5, #26]
    18ee:	464a      	mov	r2, r9
    18f0:	4213      	tst	r3, r2
    18f2:	d01d      	beq.n	1930 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    18f4:	0030      	movs	r0, r6
    18f6:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    18f8:	687b      	ldr	r3, [r7, #4]
    18fa:	5d1a      	ldrb	r2, [r3, r4]
    18fc:	2328      	movs	r3, #40	; 0x28
    18fe:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    1900:	0030      	movs	r0, r6
    1902:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    1904:	2800      	cmp	r0, #0
    1906:	d106      	bne.n	1916 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1908:	8b6b      	ldrh	r3, [r5, #26]
    190a:	3401      	adds	r4, #1
    190c:	075b      	lsls	r3, r3, #29
    190e:	d5eb      	bpl.n	18e8 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    1910:	231e      	movs	r3, #30
    1912:	9301      	str	r3, [sp, #4]
    1914:	e000      	b.n	1918 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    1916:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    1918:	7ab3      	ldrb	r3, [r6, #10]
    191a:	2b00      	cmp	r3, #0
    191c:	d0c2      	beq.n	18a4 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    191e:	0030      	movs	r0, r6
    1920:	4b05      	ldr	r3, [pc, #20]	; (1938 <_i2c_master_write_packet+0xe0>)
    1922:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1924:	686a      	ldr	r2, [r5, #4]
    1926:	23c0      	movs	r3, #192	; 0xc0
    1928:	029b      	lsls	r3, r3, #10
    192a:	4313      	orrs	r3, r2
    192c:	606b      	str	r3, [r5, #4]
    192e:	e7b9      	b.n	18a4 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    1930:	2341      	movs	r3, #65	; 0x41
    1932:	9301      	str	r3, [sp, #4]
    1934:	e7b6      	b.n	18a4 <_i2c_master_write_packet+0x4c>
    1936:	46c0      	nop			; (mov r8, r8)
    1938:	00001349 	.word	0x00001349
    193c:	fffbffff 	.word	0xfffbffff
    1940:	0000166d 	.word	0x0000166d
    1944:	00001699 	.word	0x00001699
    1948:	0000163d 	.word	0x0000163d

0000194c <i2c_master_read_packet_wait>:
{
    194c:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
    194e:	8b83      	ldrh	r3, [r0, #28]
    1950:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    1952:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    1954:	2b00      	cmp	r3, #0
    1956:	d001      	beq.n	195c <i2c_master_read_packet_wait+0x10>
}
    1958:	0010      	movs	r0, r2
    195a:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    195c:	3301      	adds	r3, #1
    195e:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    1960:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    1962:	4b02      	ldr	r3, [pc, #8]	; (196c <i2c_master_read_packet_wait+0x20>)
    1964:	4798      	blx	r3
    1966:	0002      	movs	r2, r0
    1968:	e7f6      	b.n	1958 <i2c_master_read_packet_wait+0xc>
    196a:	46c0      	nop			; (mov r8, r8)
    196c:	000016b9 	.word	0x000016b9

00001970 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1970:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    1972:	8b83      	ldrh	r3, [r0, #28]
    1974:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    1976:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    1978:	2b00      	cmp	r3, #0
    197a:	d001      	beq.n	1980 <i2c_master_write_packet_wait+0x10>

	module->send_stop = true;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
    197c:	0010      	movs	r0, r2
    197e:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    1980:	3301      	adds	r3, #1
    1982:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    1984:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
    1986:	4b02      	ldr	r3, [pc, #8]	; (1990 <i2c_master_write_packet_wait+0x20>)
    1988:	4798      	blx	r3
    198a:	0002      	movs	r2, r0
    198c:	e7f6      	b.n	197c <i2c_master_write_packet_wait+0xc>
    198e:	46c0      	nop			; (mov r8, r8)
    1990:	00001859 	.word	0x00001859

00001994 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    1994:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1996:	2207      	movs	r2, #7
    1998:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    199a:	421a      	tst	r2, r3
    199c:	d1fc      	bne.n	1998 <_i2c_master_wait_for_sync+0x4>
}
    199e:	4770      	bx	lr

000019a0 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    19a0:	b570      	push	{r4, r5, r6, lr}
    19a2:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    19a4:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    19a6:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    19a8:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
    19aa:	8b83      	ldrh	r3, [r0, #28]
    19ac:	1aed      	subs	r5, r5, r3
    19ae:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
    19b0:	8b83      	ldrh	r3, [r0, #28]
    19b2:	3b01      	subs	r3, #1
    19b4:	b29b      	uxth	r3, r3
    19b6:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
    19b8:	0113      	lsls	r3, r2, #4
    19ba:	d51d      	bpl.n	19f8 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
    19bc:	7ac3      	ldrb	r3, [r0, #11]
    19be:	2b00      	cmp	r3, #0
    19c0:	d003      	beq.n	19ca <_i2c_master_read+0x2a>
    19c2:	8b83      	ldrh	r3, [r0, #28]
    19c4:	b29b      	uxth	r3, r3
    19c6:	2b01      	cmp	r3, #1
    19c8:	d010      	beq.n	19ec <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
    19ca:	8ba3      	ldrh	r3, [r4, #28]
    19cc:	b29b      	uxth	r3, r3
    19ce:	2b00      	cmp	r3, #0
    19d0:	d102      	bne.n	19d8 <_i2c_master_read+0x38>
		if (module->send_stop) {
    19d2:	7aa3      	ldrb	r3, [r4, #10]
    19d4:	2b00      	cmp	r3, #0
    19d6:	d11c      	bne.n	1a12 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    19d8:	0020      	movs	r0, r4
    19da:	4b12      	ldr	r3, [pc, #72]	; (1a24 <_i2c_master_read+0x84>)
    19dc:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    19de:	6a23      	ldr	r3, [r4, #32]
    19e0:	195d      	adds	r5, r3, r5
    19e2:	2328      	movs	r3, #40	; 0x28
    19e4:	5cf3      	ldrb	r3, [r6, r3]
    19e6:	b2db      	uxtb	r3, r3
    19e8:	702b      	strb	r3, [r5, #0]
}
    19ea:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    19ec:	6872      	ldr	r2, [r6, #4]
    19ee:	2380      	movs	r3, #128	; 0x80
    19f0:	02db      	lsls	r3, r3, #11
    19f2:	4313      	orrs	r3, r2
    19f4:	6073      	str	r3, [r6, #4]
    19f6:	e7e8      	b.n	19ca <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
    19f8:	7ac3      	ldrb	r3, [r0, #11]
    19fa:	2b00      	cmp	r3, #0
    19fc:	d0e5      	beq.n	19ca <_i2c_master_read+0x2a>
    19fe:	8b83      	ldrh	r3, [r0, #28]
    1a00:	b29b      	uxth	r3, r3
    1a02:	2b00      	cmp	r3, #0
    1a04:	d1e1      	bne.n	19ca <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1a06:	6872      	ldr	r2, [r6, #4]
    1a08:	2380      	movs	r3, #128	; 0x80
    1a0a:	02db      	lsls	r3, r3, #11
    1a0c:	4313      	orrs	r3, r2
    1a0e:	6073      	str	r3, [r6, #4]
    1a10:	e7db      	b.n	19ca <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
    1a12:	0020      	movs	r0, r4
    1a14:	4b03      	ldr	r3, [pc, #12]	; (1a24 <_i2c_master_read+0x84>)
    1a16:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1a18:	6872      	ldr	r2, [r6, #4]
    1a1a:	23c0      	movs	r3, #192	; 0xc0
    1a1c:	029b      	lsls	r3, r3, #10
    1a1e:	4313      	orrs	r3, r2
    1a20:	6073      	str	r3, [r6, #4]
    1a22:	e7d9      	b.n	19d8 <_i2c_master_read+0x38>
    1a24:	00001995 	.word	0x00001995

00001a28 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    1a28:	b570      	push	{r4, r5, r6, lr}
    1a2a:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1a2c:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    1a2e:	8b6b      	ldrh	r3, [r5, #26]
    1a30:	075b      	lsls	r3, r3, #29
    1a32:	d503      	bpl.n	1a3c <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    1a34:	221e      	movs	r2, #30
    1a36:	2325      	movs	r3, #37	; 0x25
    1a38:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
    1a3a:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
    1a3c:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
    1a3e:	8b83      	ldrh	r3, [r0, #28]
    1a40:	1af6      	subs	r6, r6, r3
    1a42:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
    1a44:	8b83      	ldrh	r3, [r0, #28]
    1a46:	3b01      	subs	r3, #1
    1a48:	b29b      	uxth	r3, r3
    1a4a:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
    1a4c:	4b04      	ldr	r3, [pc, #16]	; (1a60 <_i2c_master_write+0x38>)
    1a4e:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    1a50:	6a23      	ldr	r3, [r4, #32]
    1a52:	199e      	adds	r6, r3, r6
    1a54:	7833      	ldrb	r3, [r6, #0]
    1a56:	b2db      	uxtb	r3, r3
    1a58:	2228      	movs	r2, #40	; 0x28
    1a5a:	54ab      	strb	r3, [r5, r2]
    1a5c:	e7ed      	b.n	1a3a <_i2c_master_write+0x12>
    1a5e:	46c0      	nop			; (mov r8, r8)
    1a60:	00001995 	.word	0x00001995

00001a64 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    1a64:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    1a66:	0080      	lsls	r0, r0, #2
    1a68:	4b75      	ldr	r3, [pc, #468]	; (1c40 <_i2c_master_interrupt_handler+0x1dc>)
    1a6a:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1a6c:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1a6e:	682b      	ldr	r3, [r5, #0]
    1a70:	011b      	lsls	r3, r3, #4
    1a72:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    1a74:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
    1a76:	7e26      	ldrb	r6, [r4, #24]
    1a78:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    1a7a:	8b63      	ldrh	r3, [r4, #26]
    1a7c:	b29b      	uxth	r3, r3
    1a7e:	2b00      	cmp	r3, #0
    1a80:	d103      	bne.n	1a8a <_i2c_master_interrupt_handler+0x26>
    1a82:	8ba3      	ldrh	r3, [r4, #28]
    1a84:	b29b      	uxth	r3, r3
    1a86:	2b00      	cmp	r3, #0
    1a88:	d123      	bne.n	1ad2 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1a8a:	8b63      	ldrh	r3, [r4, #26]
    1a8c:	b29b      	uxth	r3, r3
    1a8e:	2b00      	cmp	r3, #0
    1a90:	d008      	beq.n	1aa4 <_i2c_master_interrupt_handler+0x40>
    1a92:	8ba3      	ldrh	r3, [r4, #28]
    1a94:	b29b      	uxth	r3, r3
    1a96:	2b00      	cmp	r3, #0
    1a98:	d104      	bne.n	1aa4 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
    1a9a:	3325      	adds	r3, #37	; 0x25
    1a9c:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1a9e:	2b05      	cmp	r3, #5
    1aa0:	d100      	bne.n	1aa4 <_i2c_master_interrupt_handler+0x40>
    1aa2:	e06d      	b.n	1b80 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    1aa4:	8b63      	ldrh	r3, [r4, #26]
    1aa6:	b29b      	uxth	r3, r3
    1aa8:	2b00      	cmp	r3, #0
    1aaa:	d024      	beq.n	1af6 <_i2c_master_interrupt_handler+0x92>
    1aac:	8ba3      	ldrh	r3, [r4, #28]
    1aae:	b29b      	uxth	r3, r3
    1ab0:	2b00      	cmp	r3, #0
    1ab2:	d020      	beq.n	1af6 <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1ab4:	8b6b      	ldrh	r3, [r5, #26]
    1ab6:	069b      	lsls	r3, r3, #26
    1ab8:	d500      	bpl.n	1abc <_i2c_master_interrupt_handler+0x58>
    1aba:	e081      	b.n	1bc0 <_i2c_master_interrupt_handler+0x15c>
    1abc:	2a00      	cmp	r2, #0
    1abe:	d004      	beq.n	1aca <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1ac0:	8ba3      	ldrh	r3, [r4, #28]
    1ac2:	b29b      	uxth	r3, r3
    1ac4:	2b01      	cmp	r3, #1
    1ac6:	d100      	bne.n	1aca <_i2c_master_interrupt_handler+0x66>
    1ac8:	e07a      	b.n	1bc0 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
    1aca:	2241      	movs	r2, #65	; 0x41
    1acc:	2325      	movs	r3, #37	; 0x25
    1ace:	54e2      	strb	r2, [r4, r3]
    1ad0:	e011      	b.n	1af6 <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    1ad2:	7e2b      	ldrb	r3, [r5, #24]
    1ad4:	07db      	lsls	r3, r3, #31
    1ad6:	d507      	bpl.n	1ae8 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1ad8:	2301      	movs	r3, #1
    1ada:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1adc:	8b6b      	ldrh	r3, [r5, #26]
    1ade:	079b      	lsls	r3, r3, #30
    1ae0:	d52e      	bpl.n	1b40 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
    1ae2:	2241      	movs	r2, #65	; 0x41
    1ae4:	2325      	movs	r3, #37	; 0x25
    1ae6:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
    1ae8:	8ba3      	ldrh	r3, [r4, #28]
    1aea:	b29b      	uxth	r3, r3
    1aec:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
    1aee:	2325      	movs	r3, #37	; 0x25
    1af0:	5ce3      	ldrb	r3, [r4, r3]
    1af2:	2b05      	cmp	r3, #5
    1af4:	d038      	beq.n	1b68 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1af6:	8b63      	ldrh	r3, [r4, #26]
    1af8:	b29b      	uxth	r3, r3
    1afa:	2b00      	cmp	r3, #0
    1afc:	d007      	beq.n	1b0e <_i2c_master_interrupt_handler+0xaa>
    1afe:	8ba3      	ldrh	r3, [r4, #28]
    1b00:	b29b      	uxth	r3, r3
    1b02:	2b00      	cmp	r3, #0
    1b04:	d103      	bne.n	1b0e <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
    1b06:	3325      	adds	r3, #37	; 0x25
    1b08:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1b0a:	2b05      	cmp	r3, #5
    1b0c:	d064      	beq.n	1bd8 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    1b0e:	2325      	movs	r3, #37	; 0x25
    1b10:	5ce3      	ldrb	r3, [r4, r3]
    1b12:	2b05      	cmp	r3, #5
    1b14:	d013      	beq.n	1b3e <_i2c_master_interrupt_handler+0xda>
    1b16:	2325      	movs	r3, #37	; 0x25
    1b18:	5ce3      	ldrb	r3, [r4, r3]
    1b1a:	2b00      	cmp	r3, #0
    1b1c:	d00f      	beq.n	1b3e <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    1b1e:	2303      	movs	r3, #3
    1b20:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    1b22:	2300      	movs	r3, #0
    1b24:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
    1b26:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    1b28:	3325      	adds	r3, #37	; 0x25
    1b2a:	5ce3      	ldrb	r3, [r4, r3]
    1b2c:	2b41      	cmp	r3, #65	; 0x41
    1b2e:	d003      	beq.n	1b38 <_i2c_master_interrupt_handler+0xd4>
    1b30:	7aa3      	ldrb	r3, [r4, #10]
    1b32:	2b00      	cmp	r3, #0
    1b34:	d000      	beq.n	1b38 <_i2c_master_interrupt_handler+0xd4>
    1b36:	e075      	b.n	1c24 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    1b38:	0773      	lsls	r3, r6, #29
    1b3a:	d500      	bpl.n	1b3e <_i2c_master_interrupt_handler+0xda>
    1b3c:	e07b      	b.n	1c36 <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
    1b3e:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1b40:	8b6b      	ldrh	r3, [r5, #26]
    1b42:	075b      	lsls	r3, r3, #29
    1b44:	d5d0      	bpl.n	1ae8 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    1b46:	2218      	movs	r2, #24
    1b48:	2325      	movs	r3, #37	; 0x25
    1b4a:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
    1b4c:	2300      	movs	r3, #0
    1b4e:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
    1b50:	7aa3      	ldrb	r3, [r4, #10]
    1b52:	2b00      	cmp	r3, #0
    1b54:	d0c8      	beq.n	1ae8 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
    1b56:	0020      	movs	r0, r4
    1b58:	4b3a      	ldr	r3, [pc, #232]	; (1c44 <_i2c_master_interrupt_handler+0x1e0>)
    1b5a:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1b5c:	686a      	ldr	r2, [r5, #4]
    1b5e:	23c0      	movs	r3, #192	; 0xc0
    1b60:	029b      	lsls	r3, r3, #10
    1b62:	4313      	orrs	r3, r2
    1b64:	606b      	str	r3, [r5, #4]
    1b66:	e7bf      	b.n	1ae8 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1b68:	331f      	adds	r3, #31
    1b6a:	5ce3      	ldrb	r3, [r4, r3]
    1b6c:	2b00      	cmp	r3, #0
    1b6e:	d003      	beq.n	1b78 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
    1b70:	0020      	movs	r0, r4
    1b72:	4b35      	ldr	r3, [pc, #212]	; (1c48 <_i2c_master_interrupt_handler+0x1e4>)
    1b74:	4798      	blx	r3
    1b76:	e7be      	b.n	1af6 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
    1b78:	0020      	movs	r0, r4
    1b7a:	4b34      	ldr	r3, [pc, #208]	; (1c4c <_i2c_master_interrupt_handler+0x1e8>)
    1b7c:	4798      	blx	r3
    1b7e:	e7ba      	b.n	1af6 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1b80:	331f      	adds	r3, #31
    1b82:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    1b84:	2b00      	cmp	r3, #0
    1b86:	d000      	beq.n	1b8a <_i2c_master_interrupt_handler+0x126>
    1b88:	e78c      	b.n	1aa4 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
    1b8a:	3303      	adds	r3, #3
    1b8c:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    1b8e:	2300      	movs	r3, #0
    1b90:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    1b92:	3325      	adds	r3, #37	; 0x25
    1b94:	2200      	movs	r2, #0
    1b96:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
    1b98:	7aa3      	ldrb	r3, [r4, #10]
    1b9a:	2b00      	cmp	r3, #0
    1b9c:	d107      	bne.n	1bae <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1b9e:	2301      	movs	r3, #1
    1ba0:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1ba2:	07f3      	lsls	r3, r6, #31
    1ba4:	d5a7      	bpl.n	1af6 <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1ba6:	68e3      	ldr	r3, [r4, #12]
    1ba8:	0020      	movs	r0, r4
    1baa:	4798      	blx	r3
    1bac:	e7a3      	b.n	1af6 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
    1bae:	0020      	movs	r0, r4
    1bb0:	4b24      	ldr	r3, [pc, #144]	; (1c44 <_i2c_master_interrupt_handler+0x1e0>)
    1bb2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1bb4:	686a      	ldr	r2, [r5, #4]
    1bb6:	23c0      	movs	r3, #192	; 0xc0
    1bb8:	029b      	lsls	r3, r3, #10
    1bba:	4313      	orrs	r3, r2
    1bbc:	606b      	str	r3, [r5, #4]
    1bbe:	e7f0      	b.n	1ba2 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1bc0:	2324      	movs	r3, #36	; 0x24
    1bc2:	5ce3      	ldrb	r3, [r4, r3]
    1bc4:	2b00      	cmp	r3, #0
    1bc6:	d103      	bne.n	1bd0 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
    1bc8:	0020      	movs	r0, r4
    1bca:	4b20      	ldr	r3, [pc, #128]	; (1c4c <_i2c_master_interrupt_handler+0x1e8>)
    1bcc:	4798      	blx	r3
    1bce:	e792      	b.n	1af6 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
    1bd0:	0020      	movs	r0, r4
    1bd2:	4b1d      	ldr	r3, [pc, #116]	; (1c48 <_i2c_master_interrupt_handler+0x1e4>)
    1bd4:	4798      	blx	r3
    1bd6:	e78e      	b.n	1af6 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    1bd8:	331f      	adds	r3, #31
    1bda:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    1bdc:	2b01      	cmp	r3, #1
    1bde:	d196      	bne.n	1b0e <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1be0:	7e2b      	ldrb	r3, [r5, #24]
    1be2:	079b      	lsls	r3, r3, #30
    1be4:	d501      	bpl.n	1bea <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1be6:	2302      	movs	r3, #2
    1be8:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
    1bea:	2303      	movs	r3, #3
    1bec:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    1bee:	2300      	movs	r3, #0
    1bf0:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    1bf2:	3325      	adds	r3, #37	; 0x25
    1bf4:	2200      	movs	r2, #0
    1bf6:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    1bf8:	07b3      	lsls	r3, r6, #30
    1bfa:	d503      	bpl.n	1c04 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    1bfc:	2324      	movs	r3, #36	; 0x24
    1bfe:	5ce3      	ldrb	r3, [r4, r3]
    1c00:	2b01      	cmp	r3, #1
    1c02:	d00b      	beq.n	1c1c <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    1c04:	07f3      	lsls	r3, r6, #31
    1c06:	d400      	bmi.n	1c0a <_i2c_master_interrupt_handler+0x1a6>
    1c08:	e781      	b.n	1b0e <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1c0a:	2324      	movs	r3, #36	; 0x24
    1c0c:	5ce3      	ldrb	r3, [r4, r3]
    1c0e:	2b00      	cmp	r3, #0
    1c10:	d000      	beq.n	1c14 <_i2c_master_interrupt_handler+0x1b0>
    1c12:	e77c      	b.n	1b0e <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1c14:	68e3      	ldr	r3, [r4, #12]
    1c16:	0020      	movs	r0, r4
    1c18:	4798      	blx	r3
    1c1a:	e778      	b.n	1b0e <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    1c1c:	6923      	ldr	r3, [r4, #16]
    1c1e:	0020      	movs	r0, r4
    1c20:	4798      	blx	r3
    1c22:	e774      	b.n	1b0e <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
    1c24:	0020      	movs	r0, r4
    1c26:	4b07      	ldr	r3, [pc, #28]	; (1c44 <_i2c_master_interrupt_handler+0x1e0>)
    1c28:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    1c2a:	686a      	ldr	r2, [r5, #4]
    1c2c:	23e0      	movs	r3, #224	; 0xe0
    1c2e:	02db      	lsls	r3, r3, #11
    1c30:	4313      	orrs	r3, r2
    1c32:	606b      	str	r3, [r5, #4]
    1c34:	e780      	b.n	1b38 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    1c36:	6963      	ldr	r3, [r4, #20]
    1c38:	0020      	movs	r0, r4
    1c3a:	4798      	blx	r3
}
    1c3c:	e77f      	b.n	1b3e <_i2c_master_interrupt_handler+0xda>
    1c3e:	46c0      	nop			; (mov r8, r8)
    1c40:	20000290 	.word	0x20000290
    1c44:	00001995 	.word	0x00001995
    1c48:	000019a1 	.word	0x000019a1
    1c4c:	00001a29 	.word	0x00001a29

00001c50 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1c50:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1c52:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1c54:	2340      	movs	r3, #64	; 0x40
    1c56:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1c58:	4281      	cmp	r1, r0
    1c5a:	d202      	bcs.n	1c62 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1c5c:	0018      	movs	r0, r3
    1c5e:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1c60:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1c62:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1c64:	1c63      	adds	r3, r4, #1
    1c66:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1c68:	4288      	cmp	r0, r1
    1c6a:	d9f9      	bls.n	1c60 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1c6c:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1c6e:	2cff      	cmp	r4, #255	; 0xff
    1c70:	d8f4      	bhi.n	1c5c <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1c72:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1c74:	2300      	movs	r3, #0
    1c76:	e7f1      	b.n	1c5c <_sercom_get_sync_baud_val+0xc>

00001c78 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1c78:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c7a:	46de      	mov	lr, fp
    1c7c:	4657      	mov	r7, sl
    1c7e:	464e      	mov	r6, r9
    1c80:	4645      	mov	r5, r8
    1c82:	b5e0      	push	{r5, r6, r7, lr}
    1c84:	b089      	sub	sp, #36	; 0x24
    1c86:	000c      	movs	r4, r1
    1c88:	9205      	str	r2, [sp, #20]
    1c8a:	aa12      	add	r2, sp, #72	; 0x48
    1c8c:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1c8e:	0005      	movs	r5, r0
    1c90:	434d      	muls	r5, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1c92:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1c94:	42a5      	cmp	r5, r4
    1c96:	d907      	bls.n	1ca8 <_sercom_get_async_baud_val+0x30>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1c98:	0010      	movs	r0, r2
    1c9a:	b009      	add	sp, #36	; 0x24
    1c9c:	bc3c      	pop	{r2, r3, r4, r5}
    1c9e:	4690      	mov	r8, r2
    1ca0:	4699      	mov	r9, r3
    1ca2:	46a2      	mov	sl, r4
    1ca4:	46ab      	mov	fp, r5
    1ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1ca8:	2b00      	cmp	r3, #0
    1caa:	d155      	bne.n	1d58 <_sercom_get_async_baud_val+0xe0>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1cac:	0002      	movs	r2, r0
    1cae:	0008      	movs	r0, r1
    1cb0:	2100      	movs	r1, #0
    1cb2:	4d63      	ldr	r5, [pc, #396]	; (1e40 <_sercom_get_async_baud_val+0x1c8>)
    1cb4:	47a8      	blx	r5
    1cb6:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
    1cb8:	0026      	movs	r6, r4
    1cba:	2700      	movs	r7, #0
	uint64_t q = 0, r = 0, bit_shift;
    1cbc:	2300      	movs	r3, #0
    1cbe:	2400      	movs	r4, #0
    1cc0:	9300      	str	r3, [sp, #0]
    1cc2:	9401      	str	r4, [sp, #4]
    1cc4:	2200      	movs	r2, #0
    1cc6:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    1cc8:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1cca:	2120      	movs	r1, #32
    1ccc:	468c      	mov	ip, r1
    1cce:	391f      	subs	r1, #31
    1cd0:	9602      	str	r6, [sp, #8]
    1cd2:	9703      	str	r7, [sp, #12]
    1cd4:	e014      	b.n	1d00 <_sercom_get_async_baud_val+0x88>
    1cd6:	4664      	mov	r4, ip
    1cd8:	1a24      	subs	r4, r4, r0
    1cda:	000d      	movs	r5, r1
    1cdc:	40e5      	lsrs	r5, r4
    1cde:	46a8      	mov	r8, r5
    1ce0:	e015      	b.n	1d0e <_sercom_get_async_baud_val+0x96>
			r = r - d;
    1ce2:	9c02      	ldr	r4, [sp, #8]
    1ce4:	9d03      	ldr	r5, [sp, #12]
    1ce6:	1b12      	subs	r2, r2, r4
    1ce8:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1cea:	464d      	mov	r5, r9
    1cec:	9e00      	ldr	r6, [sp, #0]
    1cee:	9f01      	ldr	r7, [sp, #4]
    1cf0:	4335      	orrs	r5, r6
    1cf2:	003c      	movs	r4, r7
    1cf4:	4646      	mov	r6, r8
    1cf6:	4334      	orrs	r4, r6
    1cf8:	9500      	str	r5, [sp, #0]
    1cfa:	9401      	str	r4, [sp, #4]
	for (i = 63; i >= 0; i--) {
    1cfc:	3801      	subs	r0, #1
    1cfe:	d31d      	bcc.n	1d3c <_sercom_get_async_baud_val+0xc4>
		bit_shift = (uint64_t)1 << i;
    1d00:	2420      	movs	r4, #32
    1d02:	4264      	negs	r4, r4
    1d04:	1904      	adds	r4, r0, r4
    1d06:	d4e6      	bmi.n	1cd6 <_sercom_get_async_baud_val+0x5e>
    1d08:	000d      	movs	r5, r1
    1d0a:	40a5      	lsls	r5, r4
    1d0c:	46a8      	mov	r8, r5
    1d0e:	000c      	movs	r4, r1
    1d10:	4084      	lsls	r4, r0
    1d12:	46a1      	mov	r9, r4
		r = r << 1;
    1d14:	1892      	adds	r2, r2, r2
    1d16:	415b      	adcs	r3, r3
    1d18:	0014      	movs	r4, r2
    1d1a:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1d1c:	4646      	mov	r6, r8
    1d1e:	465f      	mov	r7, fp
    1d20:	423e      	tst	r6, r7
    1d22:	d003      	beq.n	1d2c <_sercom_get_async_baud_val+0xb4>
			r |= 0x01;
    1d24:	000e      	movs	r6, r1
    1d26:	4326      	orrs	r6, r4
    1d28:	0032      	movs	r2, r6
    1d2a:	002b      	movs	r3, r5
		if (r >= d) {
    1d2c:	9c02      	ldr	r4, [sp, #8]
    1d2e:	9d03      	ldr	r5, [sp, #12]
    1d30:	429d      	cmp	r5, r3
    1d32:	d8e3      	bhi.n	1cfc <_sercom_get_async_baud_val+0x84>
    1d34:	d1d5      	bne.n	1ce2 <_sercom_get_async_baud_val+0x6a>
    1d36:	4294      	cmp	r4, r2
    1d38:	d8e0      	bhi.n	1cfc <_sercom_get_async_baud_val+0x84>
    1d3a:	e7d2      	b.n	1ce2 <_sercom_get_async_baud_val+0x6a>
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1d3c:	2200      	movs	r2, #0
    1d3e:	2301      	movs	r3, #1
    1d40:	9800      	ldr	r0, [sp, #0]
    1d42:	9901      	ldr	r1, [sp, #4]
    1d44:	1a12      	subs	r2, r2, r0
    1d46:	418b      	sbcs	r3, r1
    1d48:	0019      	movs	r1, r3
		baud_calculated = (65536 * scale) >> SHIFT;
    1d4a:	0c13      	lsrs	r3, r2, #16
    1d4c:	040a      	lsls	r2, r1, #16
    1d4e:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1d50:	9b05      	ldr	r3, [sp, #20]
    1d52:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    1d54:	2200      	movs	r2, #0
    1d56:	e79f      	b.n	1c98 <_sercom_get_async_baud_val+0x20>
	uint64_t baud_calculated = 0;
    1d58:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1d5a:	2b01      	cmp	r3, #1
    1d5c:	d1f8      	bne.n	1d50 <_sercom_get_async_baud_val+0xd8>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    1d5e:	0f63      	lsrs	r3, r4, #29
    1d60:	9304      	str	r3, [sp, #16]
    1d62:	00e3      	lsls	r3, r4, #3
    1d64:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
    1d66:	000a      	movs	r2, r1
    1d68:	2300      	movs	r3, #0
    1d6a:	2100      	movs	r1, #0
    1d6c:	4c34      	ldr	r4, [pc, #208]	; (1e40 <_sercom_get_async_baud_val+0x1c8>)
    1d6e:	47a0      	blx	r4
    1d70:	0004      	movs	r4, r0
    1d72:	000d      	movs	r5, r1
    1d74:	2300      	movs	r3, #0
    1d76:	469c      	mov	ip, r3
    1d78:	9306      	str	r3, [sp, #24]
		bit_shift = (uint64_t)1 << i;
    1d7a:	3320      	adds	r3, #32
    1d7c:	469b      	mov	fp, r3
    1d7e:	2601      	movs	r6, #1
			if(baud_int < BAUD_INT_MAX) {
    1d80:	4663      	mov	r3, ip
    1d82:	9307      	str	r3, [sp, #28]
    1d84:	e048      	b.n	1e18 <_sercom_get_async_baud_val+0x1a0>
		bit_shift = (uint64_t)1 << i;
    1d86:	4659      	mov	r1, fp
    1d88:	1bc9      	subs	r1, r1, r7
    1d8a:	0030      	movs	r0, r6
    1d8c:	40c8      	lsrs	r0, r1
    1d8e:	4682      	mov	sl, r0
    1d90:	e010      	b.n	1db4 <_sercom_get_async_baud_val+0x13c>
			r = r - d;
    1d92:	9800      	ldr	r0, [sp, #0]
    1d94:	9901      	ldr	r1, [sp, #4]
    1d96:	1a12      	subs	r2, r2, r0
    1d98:	418b      	sbcs	r3, r1
			q |= bit_shift;
    1d9a:	9902      	ldr	r1, [sp, #8]
    1d9c:	4648      	mov	r0, r9
    1d9e:	4301      	orrs	r1, r0
    1da0:	9102      	str	r1, [sp, #8]
	for (i = 63; i >= 0; i--) {
    1da2:	3f01      	subs	r7, #1
    1da4:	d325      	bcc.n	1df2 <_sercom_get_async_baud_val+0x17a>
		bit_shift = (uint64_t)1 << i;
    1da6:	2120      	movs	r1, #32
    1da8:	4249      	negs	r1, r1
    1daa:	1879      	adds	r1, r7, r1
    1dac:	d4eb      	bmi.n	1d86 <_sercom_get_async_baud_val+0x10e>
    1dae:	0030      	movs	r0, r6
    1db0:	4088      	lsls	r0, r1
    1db2:	4682      	mov	sl, r0
    1db4:	0031      	movs	r1, r6
    1db6:	40b9      	lsls	r1, r7
    1db8:	4689      	mov	r9, r1
		r = r << 1;
    1dba:	1892      	adds	r2, r2, r2
    1dbc:	415b      	adcs	r3, r3
    1dbe:	0010      	movs	r0, r2
    1dc0:	0019      	movs	r1, r3
		if (n & bit_shift) {
    1dc2:	4644      	mov	r4, r8
    1dc4:	464d      	mov	r5, r9
    1dc6:	402c      	ands	r4, r5
    1dc8:	46a4      	mov	ip, r4
    1dca:	4654      	mov	r4, sl
    1dcc:	9d04      	ldr	r5, [sp, #16]
    1dce:	402c      	ands	r4, r5
    1dd0:	46a2      	mov	sl, r4
    1dd2:	4664      	mov	r4, ip
    1dd4:	4655      	mov	r5, sl
    1dd6:	432c      	orrs	r4, r5
    1dd8:	d003      	beq.n	1de2 <_sercom_get_async_baud_val+0x16a>
			r |= 0x01;
    1dda:	0034      	movs	r4, r6
    1ddc:	4304      	orrs	r4, r0
    1dde:	0022      	movs	r2, r4
    1de0:	000b      	movs	r3, r1
		if (r >= d) {
    1de2:	9800      	ldr	r0, [sp, #0]
    1de4:	9901      	ldr	r1, [sp, #4]
    1de6:	4299      	cmp	r1, r3
    1de8:	d8db      	bhi.n	1da2 <_sercom_get_async_baud_val+0x12a>
    1dea:	d1d2      	bne.n	1d92 <_sercom_get_async_baud_val+0x11a>
    1dec:	4290      	cmp	r0, r2
    1dee:	d8d8      	bhi.n	1da2 <_sercom_get_async_baud_val+0x12a>
    1df0:	e7cf      	b.n	1d92 <_sercom_get_async_baud_val+0x11a>
    1df2:	9c00      	ldr	r4, [sp, #0]
    1df4:	9d01      	ldr	r5, [sp, #4]
			baud_int -= baud_fp;
    1df6:	9902      	ldr	r1, [sp, #8]
    1df8:	9a07      	ldr	r2, [sp, #28]
    1dfa:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
    1dfc:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
    1dfe:	4911      	ldr	r1, [pc, #68]	; (1e44 <_sercom_get_async_baud_val+0x1cc>)
    1e00:	428b      	cmp	r3, r1
    1e02:	d914      	bls.n	1e2e <_sercom_get_async_baud_val+0x1b6>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    1e04:	9b06      	ldr	r3, [sp, #24]
    1e06:	3301      	adds	r3, #1
    1e08:	b2db      	uxtb	r3, r3
    1e0a:	0019      	movs	r1, r3
    1e0c:	9306      	str	r3, [sp, #24]
    1e0e:	0013      	movs	r3, r2
    1e10:	3301      	adds	r3, #1
    1e12:	9307      	str	r3, [sp, #28]
    1e14:	2908      	cmp	r1, #8
    1e16:	d008      	beq.n	1e2a <_sercom_get_async_baud_val+0x1b2>
	uint64_t q = 0, r = 0, bit_shift;
    1e18:	2300      	movs	r3, #0
    1e1a:	9302      	str	r3, [sp, #8]
    1e1c:	2200      	movs	r2, #0
    1e1e:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    1e20:	213f      	movs	r1, #63	; 0x3f
    1e22:	9400      	str	r4, [sp, #0]
    1e24:	9501      	str	r5, [sp, #4]
    1e26:	000f      	movs	r7, r1
    1e28:	e7bd      	b.n	1da6 <_sercom_get_async_baud_val+0x12e>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1e2a:	2240      	movs	r2, #64	; 0x40
    1e2c:	e734      	b.n	1c98 <_sercom_get_async_baud_val+0x20>
    1e2e:	2240      	movs	r2, #64	; 0x40
		if(baud_fp == BAUD_FP_MAX) {
    1e30:	9906      	ldr	r1, [sp, #24]
    1e32:	2908      	cmp	r1, #8
    1e34:	d100      	bne.n	1e38 <_sercom_get_async_baud_val+0x1c0>
    1e36:	e72f      	b.n	1c98 <_sercom_get_async_baud_val+0x20>
		baud_calculated = baud_int | (baud_fp << 13);
    1e38:	034a      	lsls	r2, r1, #13
    1e3a:	431a      	orrs	r2, r3
    1e3c:	e788      	b.n	1d50 <_sercom_get_async_baud_val+0xd8>
    1e3e:	46c0      	nop			; (mov r8, r8)
    1e40:	00003749 	.word	0x00003749
    1e44:	00001fff 	.word	0x00001fff

00001e48 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1e48:	b510      	push	{r4, lr}
    1e4a:	b082      	sub	sp, #8
    1e4c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1e4e:	4b0e      	ldr	r3, [pc, #56]	; (1e88 <sercom_set_gclk_generator+0x40>)
    1e50:	781b      	ldrb	r3, [r3, #0]
    1e52:	2b00      	cmp	r3, #0
    1e54:	d007      	beq.n	1e66 <sercom_set_gclk_generator+0x1e>
    1e56:	2900      	cmp	r1, #0
    1e58:	d105      	bne.n	1e66 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1e5a:	4b0b      	ldr	r3, [pc, #44]	; (1e88 <sercom_set_gclk_generator+0x40>)
    1e5c:	785b      	ldrb	r3, [r3, #1]
    1e5e:	4283      	cmp	r3, r0
    1e60:	d010      	beq.n	1e84 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1e62:	201d      	movs	r0, #29
    1e64:	e00c      	b.n	1e80 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1e66:	a901      	add	r1, sp, #4
    1e68:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1e6a:	2013      	movs	r0, #19
    1e6c:	4b07      	ldr	r3, [pc, #28]	; (1e8c <sercom_set_gclk_generator+0x44>)
    1e6e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1e70:	2013      	movs	r0, #19
    1e72:	4b07      	ldr	r3, [pc, #28]	; (1e90 <sercom_set_gclk_generator+0x48>)
    1e74:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1e76:	4b04      	ldr	r3, [pc, #16]	; (1e88 <sercom_set_gclk_generator+0x40>)
    1e78:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1e7a:	2201      	movs	r2, #1
    1e7c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1e7e:	2000      	movs	r0, #0
}
    1e80:	b002      	add	sp, #8
    1e82:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1e84:	2000      	movs	r0, #0
    1e86:	e7fb      	b.n	1e80 <sercom_set_gclk_generator+0x38>
    1e88:	200000a4 	.word	0x200000a4
    1e8c:	00002c21 	.word	0x00002c21
    1e90:	00002b95 	.word	0x00002b95

00001e94 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1e94:	4b2b      	ldr	r3, [pc, #172]	; (1f44 <_sercom_get_default_pad+0xb0>)
    1e96:	4298      	cmp	r0, r3
    1e98:	d023      	beq.n	1ee2 <_sercom_get_default_pad+0x4e>
    1e9a:	d90f      	bls.n	1ebc <_sercom_get_default_pad+0x28>
    1e9c:	4b2a      	ldr	r3, [pc, #168]	; (1f48 <_sercom_get_default_pad+0xb4>)
    1e9e:	4298      	cmp	r0, r3
    1ea0:	d02f      	beq.n	1f02 <_sercom_get_default_pad+0x6e>
    1ea2:	4b2a      	ldr	r3, [pc, #168]	; (1f4c <_sercom_get_default_pad+0xb8>)
    1ea4:	4298      	cmp	r0, r3
    1ea6:	d142      	bne.n	1f2e <_sercom_get_default_pad+0x9a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ea8:	2901      	cmp	r1, #1
    1eaa:	d03a      	beq.n	1f22 <_sercom_get_default_pad+0x8e>
    1eac:	2900      	cmp	r1, #0
    1eae:	d046      	beq.n	1f3e <_sercom_get_default_pad+0xaa>
    1eb0:	2902      	cmp	r1, #2
    1eb2:	d038      	beq.n	1f26 <_sercom_get_default_pad+0x92>
    1eb4:	2903      	cmp	r1, #3
    1eb6:	d038      	beq.n	1f2a <_sercom_get_default_pad+0x96>
	}

	Assert(false);
	return 0;
    1eb8:	2000      	movs	r0, #0
    1eba:	e039      	b.n	1f30 <_sercom_get_default_pad+0x9c>
	switch ((uintptr_t)sercom_module) {
    1ebc:	4b24      	ldr	r3, [pc, #144]	; (1f50 <_sercom_get_default_pad+0xbc>)
    1ebe:	4298      	cmp	r0, r3
    1ec0:	d135      	bne.n	1f2e <_sercom_get_default_pad+0x9a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ec2:	2901      	cmp	r1, #1
    1ec4:	d007      	beq.n	1ed6 <_sercom_get_default_pad+0x42>
    1ec6:	2900      	cmp	r1, #0
    1ec8:	d033      	beq.n	1f32 <_sercom_get_default_pad+0x9e>
    1eca:	2902      	cmp	r1, #2
    1ecc:	d005      	beq.n	1eda <_sercom_get_default_pad+0x46>
    1ece:	2903      	cmp	r1, #3
    1ed0:	d005      	beq.n	1ede <_sercom_get_default_pad+0x4a>
	return 0;
    1ed2:	2000      	movs	r0, #0
    1ed4:	e02c      	b.n	1f30 <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ed6:	481f      	ldr	r0, [pc, #124]	; (1f54 <_sercom_get_default_pad+0xc0>)
    1ed8:	e02a      	b.n	1f30 <_sercom_get_default_pad+0x9c>
    1eda:	481f      	ldr	r0, [pc, #124]	; (1f58 <_sercom_get_default_pad+0xc4>)
    1edc:	e028      	b.n	1f30 <_sercom_get_default_pad+0x9c>
    1ede:	481f      	ldr	r0, [pc, #124]	; (1f5c <_sercom_get_default_pad+0xc8>)
    1ee0:	e026      	b.n	1f30 <_sercom_get_default_pad+0x9c>
    1ee2:	2901      	cmp	r1, #1
    1ee4:	d007      	beq.n	1ef6 <_sercom_get_default_pad+0x62>
    1ee6:	2900      	cmp	r1, #0
    1ee8:	d025      	beq.n	1f36 <_sercom_get_default_pad+0xa2>
    1eea:	2902      	cmp	r1, #2
    1eec:	d005      	beq.n	1efa <_sercom_get_default_pad+0x66>
    1eee:	2903      	cmp	r1, #3
    1ef0:	d005      	beq.n	1efe <_sercom_get_default_pad+0x6a>
	return 0;
    1ef2:	2000      	movs	r0, #0
    1ef4:	e01c      	b.n	1f30 <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ef6:	481a      	ldr	r0, [pc, #104]	; (1f60 <_sercom_get_default_pad+0xcc>)
    1ef8:	e01a      	b.n	1f30 <_sercom_get_default_pad+0x9c>
    1efa:	481a      	ldr	r0, [pc, #104]	; (1f64 <_sercom_get_default_pad+0xd0>)
    1efc:	e018      	b.n	1f30 <_sercom_get_default_pad+0x9c>
    1efe:	481a      	ldr	r0, [pc, #104]	; (1f68 <_sercom_get_default_pad+0xd4>)
    1f00:	e016      	b.n	1f30 <_sercom_get_default_pad+0x9c>
    1f02:	2901      	cmp	r1, #1
    1f04:	d007      	beq.n	1f16 <_sercom_get_default_pad+0x82>
    1f06:	2900      	cmp	r1, #0
    1f08:	d017      	beq.n	1f3a <_sercom_get_default_pad+0xa6>
    1f0a:	2902      	cmp	r1, #2
    1f0c:	d005      	beq.n	1f1a <_sercom_get_default_pad+0x86>
    1f0e:	2903      	cmp	r1, #3
    1f10:	d005      	beq.n	1f1e <_sercom_get_default_pad+0x8a>
	return 0;
    1f12:	2000      	movs	r0, #0
    1f14:	e00c      	b.n	1f30 <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1f16:	4815      	ldr	r0, [pc, #84]	; (1f6c <_sercom_get_default_pad+0xd8>)
    1f18:	e00a      	b.n	1f30 <_sercom_get_default_pad+0x9c>
    1f1a:	4815      	ldr	r0, [pc, #84]	; (1f70 <_sercom_get_default_pad+0xdc>)
    1f1c:	e008      	b.n	1f30 <_sercom_get_default_pad+0x9c>
    1f1e:	4815      	ldr	r0, [pc, #84]	; (1f74 <_sercom_get_default_pad+0xe0>)
    1f20:	e006      	b.n	1f30 <_sercom_get_default_pad+0x9c>
    1f22:	4815      	ldr	r0, [pc, #84]	; (1f78 <_sercom_get_default_pad+0xe4>)
    1f24:	e004      	b.n	1f30 <_sercom_get_default_pad+0x9c>
    1f26:	4815      	ldr	r0, [pc, #84]	; (1f7c <_sercom_get_default_pad+0xe8>)
    1f28:	e002      	b.n	1f30 <_sercom_get_default_pad+0x9c>
    1f2a:	4815      	ldr	r0, [pc, #84]	; (1f80 <_sercom_get_default_pad+0xec>)
    1f2c:	e000      	b.n	1f30 <_sercom_get_default_pad+0x9c>
	return 0;
    1f2e:	2000      	movs	r0, #0
}
    1f30:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1f32:	4814      	ldr	r0, [pc, #80]	; (1f84 <_sercom_get_default_pad+0xf0>)
    1f34:	e7fc      	b.n	1f30 <_sercom_get_default_pad+0x9c>
    1f36:	2003      	movs	r0, #3
    1f38:	e7fa      	b.n	1f30 <_sercom_get_default_pad+0x9c>
    1f3a:	4813      	ldr	r0, [pc, #76]	; (1f88 <_sercom_get_default_pad+0xf4>)
    1f3c:	e7f8      	b.n	1f30 <_sercom_get_default_pad+0x9c>
    1f3e:	4813      	ldr	r0, [pc, #76]	; (1f8c <_sercom_get_default_pad+0xf8>)
    1f40:	e7f6      	b.n	1f30 <_sercom_get_default_pad+0x9c>
    1f42:	46c0      	nop			; (mov r8, r8)
    1f44:	42000c00 	.word	0x42000c00
    1f48:	42001000 	.word	0x42001000
    1f4c:	42001400 	.word	0x42001400
    1f50:	42000800 	.word	0x42000800
    1f54:	00050003 	.word	0x00050003
    1f58:	00060003 	.word	0x00060003
    1f5c:	00070003 	.word	0x00070003
    1f60:	00010003 	.word	0x00010003
    1f64:	001e0003 	.word	0x001e0003
    1f68:	001f0003 	.word	0x001f0003
    1f6c:	00090003 	.word	0x00090003
    1f70:	000a0003 	.word	0x000a0003
    1f74:	000b0003 	.word	0x000b0003
    1f78:	00110003 	.word	0x00110003
    1f7c:	00120003 	.word	0x00120003
    1f80:	00130003 	.word	0x00130003
    1f84:	00040003 	.word	0x00040003
    1f88:	00080003 	.word	0x00080003
    1f8c:	00100003 	.word	0x00100003

00001f90 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1f90:	b530      	push	{r4, r5, lr}
    1f92:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1f94:	466a      	mov	r2, sp
    1f96:	4b0f      	ldr	r3, [pc, #60]	; (1fd4 <_sercom_get_sercom_inst_index+0x44>)
    1f98:	cb32      	ldmia	r3!, {r1, r4, r5}
    1f9a:	c232      	stmia	r2!, {r1, r4, r5}
    1f9c:	681b      	ldr	r3, [r3, #0]
    1f9e:	6013      	str	r3, [r2, #0]

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1fa0:	0003      	movs	r3, r0
    1fa2:	9a00      	ldr	r2, [sp, #0]
    1fa4:	4282      	cmp	r2, r0
    1fa6:	d011      	beq.n	1fcc <_sercom_get_sercom_inst_index+0x3c>
    1fa8:	9a01      	ldr	r2, [sp, #4]
    1faa:	4282      	cmp	r2, r0
    1fac:	d00a      	beq.n	1fc4 <_sercom_get_sercom_inst_index+0x34>
    1fae:	9a02      	ldr	r2, [sp, #8]
    1fb0:	4282      	cmp	r2, r0
    1fb2:	d009      	beq.n	1fc8 <_sercom_get_sercom_inst_index+0x38>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1fb4:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1fb6:	9a03      	ldr	r2, [sp, #12]
    1fb8:	429a      	cmp	r2, r3
    1fba:	d001      	beq.n	1fc0 <_sercom_get_sercom_inst_index+0x30>
}
    1fbc:	b005      	add	sp, #20
    1fbe:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1fc0:	3003      	adds	r0, #3
    1fc2:	e004      	b.n	1fce <_sercom_get_sercom_inst_index+0x3e>
    1fc4:	2001      	movs	r0, #1
    1fc6:	e002      	b.n	1fce <_sercom_get_sercom_inst_index+0x3e>
    1fc8:	2002      	movs	r0, #2
    1fca:	e000      	b.n	1fce <_sercom_get_sercom_inst_index+0x3e>
    1fcc:	2000      	movs	r0, #0
			return i;
    1fce:	b2c0      	uxtb	r0, r0
    1fd0:	e7f4      	b.n	1fbc <_sercom_get_sercom_inst_index+0x2c>
    1fd2:	46c0      	nop			; (mov r8, r8)
    1fd4:	00005a68 	.word	0x00005a68

00001fd8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fda:	46de      	mov	lr, fp
    1fdc:	4657      	mov	r7, sl
    1fde:	464e      	mov	r6, r9
    1fe0:	4645      	mov	r5, r8
    1fe2:	b5e0      	push	{r5, r6, r7, lr}
    1fe4:	b091      	sub	sp, #68	; 0x44
    1fe6:	0005      	movs	r5, r0
    1fe8:	000c      	movs	r4, r1
    1fea:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1fec:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1fee:	0008      	movs	r0, r1
    1ff0:	4bbb      	ldr	r3, [pc, #748]	; (22e0 <STACK_SIZE+0x2e0>)
    1ff2:	4798      	blx	r3
    1ff4:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1ff6:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1ff8:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1ffa:	07db      	lsls	r3, r3, #31
    1ffc:	d506      	bpl.n	200c <STACK_SIZE+0xc>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1ffe:	b011      	add	sp, #68	; 0x44
    2000:	bc3c      	pop	{r2, r3, r4, r5}
    2002:	4690      	mov	r8, r2
    2004:	4699      	mov	r9, r3
    2006:	46a2      	mov	sl, r4
    2008:	46ab      	mov	fp, r5
    200a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    200c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    200e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2010:	079b      	lsls	r3, r3, #30
    2012:	d4f4      	bmi.n	1ffe <usart_init+0x26>
    2014:	49b3      	ldr	r1, [pc, #716]	; (22e4 <STACK_SIZE+0x2e4>)
    2016:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2018:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    201a:	2301      	movs	r3, #1
    201c:	40bb      	lsls	r3, r7
    201e:	4303      	orrs	r3, r0
    2020:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    2022:	a90f      	add	r1, sp, #60	; 0x3c
    2024:	272d      	movs	r7, #45	; 0x2d
    2026:	5df3      	ldrb	r3, [r6, r7]
    2028:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    202a:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    202c:	b2d3      	uxtb	r3, r2
    202e:	9302      	str	r3, [sp, #8]
    2030:	0018      	movs	r0, r3
    2032:	4bad      	ldr	r3, [pc, #692]	; (22e8 <STACK_SIZE+0x2e8>)
    2034:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2036:	9802      	ldr	r0, [sp, #8]
    2038:	4bac      	ldr	r3, [pc, #688]	; (22ec <STACK_SIZE+0x2ec>)
    203a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    203c:	5df0      	ldrb	r0, [r6, r7]
    203e:	2100      	movs	r1, #0
    2040:	4bab      	ldr	r3, [pc, #684]	; (22f0 <STACK_SIZE+0x2f0>)
    2042:	4798      	blx	r3
	module->character_size = config->character_size;
    2044:	7af3      	ldrb	r3, [r6, #11]
    2046:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    2048:	2324      	movs	r3, #36	; 0x24
    204a:	5cf3      	ldrb	r3, [r6, r3]
    204c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    204e:	2325      	movs	r3, #37	; 0x25
    2050:	5cf3      	ldrb	r3, [r6, r3]
    2052:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    2054:	7ef3      	ldrb	r3, [r6, #27]
    2056:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2058:	7f33      	ldrb	r3, [r6, #28]
    205a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    205c:	682b      	ldr	r3, [r5, #0]
    205e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2060:	0018      	movs	r0, r3
    2062:	4b9f      	ldr	r3, [pc, #636]	; (22e0 <STACK_SIZE+0x2e0>)
    2064:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2066:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    2068:	2200      	movs	r2, #0
    206a:	230e      	movs	r3, #14
    206c:	a906      	add	r1, sp, #24
    206e:	468c      	mov	ip, r1
    2070:	4463      	add	r3, ip
    2072:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    2074:	8a32      	ldrh	r2, [r6, #16]
    2076:	9202      	str	r2, [sp, #8]
    2078:	2380      	movs	r3, #128	; 0x80
    207a:	01db      	lsls	r3, r3, #7
    207c:	429a      	cmp	r2, r3
    207e:	d100      	bne.n	2082 <STACK_SIZE+0x82>
    2080:	e09c      	b.n	21bc <STACK_SIZE+0x1bc>
    2082:	d90f      	bls.n	20a4 <STACK_SIZE+0xa4>
    2084:	23c0      	movs	r3, #192	; 0xc0
    2086:	01db      	lsls	r3, r3, #7
    2088:	9a02      	ldr	r2, [sp, #8]
    208a:	429a      	cmp	r2, r3
    208c:	d100      	bne.n	2090 <STACK_SIZE+0x90>
    208e:	e090      	b.n	21b2 <STACK_SIZE+0x1b2>
    2090:	2380      	movs	r3, #128	; 0x80
    2092:	021b      	lsls	r3, r3, #8
    2094:	429a      	cmp	r2, r3
    2096:	d000      	beq.n	209a <STACK_SIZE+0x9a>
    2098:	e11d      	b.n	22d6 <STACK_SIZE+0x2d6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    209a:	2303      	movs	r3, #3
    209c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    209e:	2300      	movs	r3, #0
    20a0:	9307      	str	r3, [sp, #28]
    20a2:	e008      	b.n	20b6 <STACK_SIZE+0xb6>
	switch (config->sample_rate) {
    20a4:	2380      	movs	r3, #128	; 0x80
    20a6:	019b      	lsls	r3, r3, #6
    20a8:	429a      	cmp	r2, r3
    20aa:	d000      	beq.n	20ae <STACK_SIZE+0xae>
    20ac:	e113      	b.n	22d6 <STACK_SIZE+0x2d6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    20ae:	2310      	movs	r3, #16
    20b0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    20b2:	3b0f      	subs	r3, #15
    20b4:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    20b6:	6833      	ldr	r3, [r6, #0]
    20b8:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    20ba:	68f3      	ldr	r3, [r6, #12]
    20bc:	469b      	mov	fp, r3
		config->sample_adjustment |
    20be:	6973      	ldr	r3, [r6, #20]
    20c0:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    20c2:	7e33      	ldrb	r3, [r6, #24]
    20c4:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    20c6:	2326      	movs	r3, #38	; 0x26
    20c8:	5cf3      	ldrb	r3, [r6, r3]
    20ca:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    20cc:	6873      	ldr	r3, [r6, #4]
    20ce:	4699      	mov	r9, r3
	switch (transfer_mode)
    20d0:	2b00      	cmp	r3, #0
    20d2:	d100      	bne.n	20d6 <STACK_SIZE+0xd6>
    20d4:	e09e      	b.n	2214 <STACK_SIZE+0x214>
    20d6:	2380      	movs	r3, #128	; 0x80
    20d8:	055b      	lsls	r3, r3, #21
    20da:	4599      	cmp	r9, r3
    20dc:	d100      	bne.n	20e0 <STACK_SIZE+0xe0>
    20de:	e082      	b.n	21e6 <STACK_SIZE+0x1e6>
	if(config->encoding_format_enable) {
    20e0:	7e73      	ldrb	r3, [r6, #25]
    20e2:	2b00      	cmp	r3, #0
    20e4:	d002      	beq.n	20ec <STACK_SIZE+0xec>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    20e6:	7eb3      	ldrb	r3, [r6, #26]
    20e8:	4642      	mov	r2, r8
    20ea:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    20ec:	682a      	ldr	r2, [r5, #0]
    20ee:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    20f0:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    20f2:	2b00      	cmp	r3, #0
    20f4:	d1fc      	bne.n	20f0 <STACK_SIZE+0xf0>
	usart_hw->BAUD.reg = baud;
    20f6:	330e      	adds	r3, #14
    20f8:	aa06      	add	r2, sp, #24
    20fa:	4694      	mov	ip, r2
    20fc:	4463      	add	r3, ip
    20fe:	881b      	ldrh	r3, [r3, #0]
    2100:	4642      	mov	r2, r8
    2102:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    2104:	9b05      	ldr	r3, [sp, #20]
    2106:	465a      	mov	r2, fp
    2108:	4313      	orrs	r3, r2
    210a:	9a03      	ldr	r2, [sp, #12]
    210c:	4313      	orrs	r3, r2
    210e:	464a      	mov	r2, r9
    2110:	4313      	orrs	r3, r2
    2112:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2114:	9b04      	ldr	r3, [sp, #16]
    2116:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    2118:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    211a:	4653      	mov	r3, sl
    211c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    211e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    2120:	2327      	movs	r3, #39	; 0x27
    2122:	5cf3      	ldrb	r3, [r6, r3]
    2124:	2b00      	cmp	r3, #0
    2126:	d101      	bne.n	212c <STACK_SIZE+0x12c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2128:	3304      	adds	r3, #4
    212a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    212c:	7e73      	ldrb	r3, [r6, #25]
    212e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2130:	7f32      	ldrb	r2, [r6, #28]
    2132:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2134:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2136:	7f72      	ldrb	r2, [r6, #29]
    2138:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    213a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    213c:	2224      	movs	r2, #36	; 0x24
    213e:	5cb2      	ldrb	r2, [r6, r2]
    2140:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2142:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2144:	2225      	movs	r2, #37	; 0x25
    2146:	5cb2      	ldrb	r2, [r6, r2]
    2148:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    214a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    214c:	7af1      	ldrb	r1, [r6, #11]
    214e:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    2150:	8933      	ldrh	r3, [r6, #8]
    2152:	2bff      	cmp	r3, #255	; 0xff
    2154:	d100      	bne.n	2158 <STACK_SIZE+0x158>
    2156:	e081      	b.n	225c <STACK_SIZE+0x25c>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2158:	2280      	movs	r2, #128	; 0x80
    215a:	0452      	lsls	r2, r2, #17
    215c:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    215e:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    2160:	232c      	movs	r3, #44	; 0x2c
    2162:	5cf3      	ldrb	r3, [r6, r3]
    2164:	2b00      	cmp	r3, #0
    2166:	d103      	bne.n	2170 <STACK_SIZE+0x170>
    2168:	4b62      	ldr	r3, [pc, #392]	; (22f4 <STACK_SIZE+0x2f4>)
    216a:	789b      	ldrb	r3, [r3, #2]
    216c:	079b      	lsls	r3, r3, #30
    216e:	d501      	bpl.n	2174 <STACK_SIZE+0x174>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2170:	2380      	movs	r3, #128	; 0x80
    2172:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    2174:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2176:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2178:	2b00      	cmp	r3, #0
    217a:	d1fc      	bne.n	2176 <STACK_SIZE+0x176>
	usart_hw->CTRLB.reg = ctrlb;
    217c:	4643      	mov	r3, r8
    217e:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2180:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2182:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2184:	2b00      	cmp	r3, #0
    2186:	d1fc      	bne.n	2182 <STACK_SIZE+0x182>
	usart_hw->CTRLA.reg = ctrla;
    2188:	4643      	mov	r3, r8
    218a:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    218c:	ab0e      	add	r3, sp, #56	; 0x38
    218e:	2280      	movs	r2, #128	; 0x80
    2190:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2192:	2200      	movs	r2, #0
    2194:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    2196:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2198:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    219a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    219c:	930a      	str	r3, [sp, #40]	; 0x28
    219e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    21a0:	930b      	str	r3, [sp, #44]	; 0x2c
    21a2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    21a4:	930c      	str	r3, [sp, #48]	; 0x30
    21a6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    21a8:	9302      	str	r3, [sp, #8]
    21aa:	930d      	str	r3, [sp, #52]	; 0x34
    21ac:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    21ae:	ae0a      	add	r6, sp, #40	; 0x28
    21b0:	e063      	b.n	227a <STACK_SIZE+0x27a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    21b2:	2308      	movs	r3, #8
    21b4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    21b6:	3b07      	subs	r3, #7
    21b8:	9307      	str	r3, [sp, #28]
    21ba:	e77c      	b.n	20b6 <STACK_SIZE+0xb6>
	ctrla = (uint32_t)config->data_order |
    21bc:	6833      	ldr	r3, [r6, #0]
    21be:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    21c0:	68f3      	ldr	r3, [r6, #12]
    21c2:	469b      	mov	fp, r3
		config->sample_adjustment |
    21c4:	6973      	ldr	r3, [r6, #20]
    21c6:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    21c8:	7e33      	ldrb	r3, [r6, #24]
    21ca:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    21cc:	2326      	movs	r3, #38	; 0x26
    21ce:	5cf3      	ldrb	r3, [r6, r3]
    21d0:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    21d2:	6873      	ldr	r3, [r6, #4]
    21d4:	4699      	mov	r9, r3
	switch (transfer_mode)
    21d6:	2b00      	cmp	r3, #0
    21d8:	d018      	beq.n	220c <STACK_SIZE+0x20c>
    21da:	2380      	movs	r3, #128	; 0x80
    21dc:	055b      	lsls	r3, r3, #21
    21de:	4599      	cmp	r9, r3
    21e0:	d001      	beq.n	21e6 <STACK_SIZE+0x1e6>
	enum status_code status_code = STATUS_OK;
    21e2:	2000      	movs	r0, #0
    21e4:	e025      	b.n	2232 <STACK_SIZE+0x232>
			if (!config->use_external_clock) {
    21e6:	2327      	movs	r3, #39	; 0x27
    21e8:	5cf3      	ldrb	r3, [r6, r3]
    21ea:	2b00      	cmp	r3, #0
    21ec:	d000      	beq.n	21f0 <STACK_SIZE+0x1f0>
    21ee:	e777      	b.n	20e0 <STACK_SIZE+0xe0>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    21f0:	6a33      	ldr	r3, [r6, #32]
    21f2:	001f      	movs	r7, r3
    21f4:	b2c0      	uxtb	r0, r0
    21f6:	4b40      	ldr	r3, [pc, #256]	; (22f8 <STACK_SIZE+0x2f8>)
    21f8:	4798      	blx	r3
    21fa:	0001      	movs	r1, r0
    21fc:	220e      	movs	r2, #14
    21fe:	ab06      	add	r3, sp, #24
    2200:	469c      	mov	ip, r3
    2202:	4462      	add	r2, ip
    2204:	0038      	movs	r0, r7
    2206:	4b3d      	ldr	r3, [pc, #244]	; (22fc <STACK_SIZE+0x2fc>)
    2208:	4798      	blx	r3
    220a:	e012      	b.n	2232 <STACK_SIZE+0x232>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    220c:	2308      	movs	r3, #8
    220e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2210:	2300      	movs	r3, #0
    2212:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    2214:	2327      	movs	r3, #39	; 0x27
    2216:	5cf3      	ldrb	r3, [r6, r3]
    2218:	2b00      	cmp	r3, #0
    221a:	d00e      	beq.n	223a <STACK_SIZE+0x23a>
				status_code =
    221c:	9b06      	ldr	r3, [sp, #24]
    221e:	9300      	str	r3, [sp, #0]
    2220:	9b07      	ldr	r3, [sp, #28]
    2222:	220e      	movs	r2, #14
    2224:	a906      	add	r1, sp, #24
    2226:	468c      	mov	ip, r1
    2228:	4462      	add	r2, ip
    222a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    222c:	6a30      	ldr	r0, [r6, #32]
    222e:	4f34      	ldr	r7, [pc, #208]	; (2300 <STACK_SIZE+0x300>)
    2230:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    2232:	2800      	cmp	r0, #0
    2234:	d000      	beq.n	2238 <STACK_SIZE+0x238>
    2236:	e6e2      	b.n	1ffe <usart_init+0x26>
    2238:	e752      	b.n	20e0 <STACK_SIZE+0xe0>
						_sercom_get_async_baud_val(config->baudrate,
    223a:	6a33      	ldr	r3, [r6, #32]
    223c:	001f      	movs	r7, r3
    223e:	b2c0      	uxtb	r0, r0
    2240:	4b2d      	ldr	r3, [pc, #180]	; (22f8 <STACK_SIZE+0x2f8>)
    2242:	4798      	blx	r3
    2244:	0001      	movs	r1, r0
				status_code =
    2246:	9b06      	ldr	r3, [sp, #24]
    2248:	9300      	str	r3, [sp, #0]
    224a:	9b07      	ldr	r3, [sp, #28]
    224c:	220e      	movs	r2, #14
    224e:	a806      	add	r0, sp, #24
    2250:	4684      	mov	ip, r0
    2252:	4462      	add	r2, ip
    2254:	0038      	movs	r0, r7
    2256:	4f2a      	ldr	r7, [pc, #168]	; (2300 <STACK_SIZE+0x300>)
    2258:	47b8      	blx	r7
    225a:	e7ea      	b.n	2232 <STACK_SIZE+0x232>
		if(config->lin_slave_enable) {
    225c:	7ef3      	ldrb	r3, [r6, #27]
    225e:	2b00      	cmp	r3, #0
    2260:	d100      	bne.n	2264 <STACK_SIZE+0x264>
    2262:	e77d      	b.n	2160 <STACK_SIZE+0x160>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2264:	2380      	movs	r3, #128	; 0x80
    2266:	04db      	lsls	r3, r3, #19
    2268:	431f      	orrs	r7, r3
    226a:	e779      	b.n	2160 <STACK_SIZE+0x160>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    226c:	0020      	movs	r0, r4
    226e:	4b25      	ldr	r3, [pc, #148]	; (2304 <STACK_SIZE+0x304>)
    2270:	4798      	blx	r3
    2272:	e007      	b.n	2284 <STACK_SIZE+0x284>
    2274:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2276:	2f04      	cmp	r7, #4
    2278:	d00d      	beq.n	2296 <STACK_SIZE+0x296>
    227a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    227c:	00bb      	lsls	r3, r7, #2
    227e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    2280:	2800      	cmp	r0, #0
    2282:	d0f3      	beq.n	226c <STACK_SIZE+0x26c>
		if (current_pinmux != PINMUX_UNUSED) {
    2284:	1c43      	adds	r3, r0, #1
    2286:	d0f5      	beq.n	2274 <STACK_SIZE+0x274>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2288:	a90e      	add	r1, sp, #56	; 0x38
    228a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    228c:	0c00      	lsrs	r0, r0, #16
    228e:	b2c0      	uxtb	r0, r0
    2290:	4b1d      	ldr	r3, [pc, #116]	; (2308 <STACK_SIZE+0x308>)
    2292:	4798      	blx	r3
    2294:	e7ee      	b.n	2274 <STACK_SIZE+0x274>
		module->callback[i]            = NULL;
    2296:	2300      	movs	r3, #0
    2298:	60eb      	str	r3, [r5, #12]
    229a:	612b      	str	r3, [r5, #16]
    229c:	616b      	str	r3, [r5, #20]
    229e:	61ab      	str	r3, [r5, #24]
    22a0:	61eb      	str	r3, [r5, #28]
    22a2:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    22a4:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    22a6:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    22a8:	2200      	movs	r2, #0
    22aa:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    22ac:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    22ae:	3330      	adds	r3, #48	; 0x30
    22b0:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    22b2:	3301      	adds	r3, #1
    22b4:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    22b6:	3301      	adds	r3, #1
    22b8:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    22ba:	3301      	adds	r3, #1
    22bc:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    22be:	6828      	ldr	r0, [r5, #0]
    22c0:	4b07      	ldr	r3, [pc, #28]	; (22e0 <STACK_SIZE+0x2e0>)
    22c2:	4798      	blx	r3
    22c4:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    22c6:	4911      	ldr	r1, [pc, #68]	; (230c <STACK_SIZE+0x30c>)
    22c8:	4b11      	ldr	r3, [pc, #68]	; (2310 <STACK_SIZE+0x310>)
    22ca:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    22cc:	00a4      	lsls	r4, r4, #2
    22ce:	4b11      	ldr	r3, [pc, #68]	; (2314 <STACK_SIZE+0x314>)
    22d0:	50e5      	str	r5, [r4, r3]
	return status_code;
    22d2:	2000      	movs	r0, #0
    22d4:	e693      	b.n	1ffe <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    22d6:	2310      	movs	r3, #16
    22d8:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    22da:	2300      	movs	r3, #0
    22dc:	9307      	str	r3, [sp, #28]
    22de:	e6ea      	b.n	20b6 <STACK_SIZE+0xb6>
    22e0:	00001f91 	.word	0x00001f91
    22e4:	40000400 	.word	0x40000400
    22e8:	00002c21 	.word	0x00002c21
    22ec:	00002b95 	.word	0x00002b95
    22f0:	00001e49 	.word	0x00001e49
    22f4:	41002000 	.word	0x41002000
    22f8:	00002c3d 	.word	0x00002c3d
    22fc:	00001c51 	.word	0x00001c51
    2300:	00001c79 	.word	0x00001c79
    2304:	00001e95 	.word	0x00001e95
    2308:	00002d19 	.word	0x00002d19
    230c:	000023fd 	.word	0x000023fd
    2310:	00002595 	.word	0x00002595
    2314:	20000290 	.word	0x20000290

00002318 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    231a:	0006      	movs	r6, r0
    231c:	000c      	movs	r4, r1
    231e:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2320:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    2322:	4b0a      	ldr	r3, [pc, #40]	; (234c <_usart_write_buffer+0x34>)
    2324:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    2326:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    2328:	b29b      	uxth	r3, r3
    232a:	2b00      	cmp	r3, #0
    232c:	d003      	beq.n	2336 <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    232e:	4b08      	ldr	r3, [pc, #32]	; (2350 <_usart_write_buffer+0x38>)
    2330:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2332:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    2334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    2336:	85f5      	strh	r5, [r6, #46]	; 0x2e
    2338:	4b05      	ldr	r3, [pc, #20]	; (2350 <_usart_write_buffer+0x38>)
    233a:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    233c:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    233e:	2205      	movs	r2, #5
    2340:	2333      	movs	r3, #51	; 0x33
    2342:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    2344:	3b32      	subs	r3, #50	; 0x32
    2346:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    2348:	2000      	movs	r0, #0
    234a:	e7f3      	b.n	2334 <_usart_write_buffer+0x1c>
    234c:	0000269d 	.word	0x0000269d
    2350:	000026dd 	.word	0x000026dd

00002354 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2356:	0004      	movs	r4, r0
    2358:	000d      	movs	r5, r1
    235a:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    235c:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    235e:	4b0f      	ldr	r3, [pc, #60]	; (239c <_usart_read_buffer+0x48>)
    2360:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    2362:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    2364:	b29b      	uxth	r3, r3
    2366:	2b00      	cmp	r3, #0
    2368:	d003      	beq.n	2372 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    236a:	4b0d      	ldr	r3, [pc, #52]	; (23a0 <_usart_read_buffer+0x4c>)
    236c:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    236e:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    2370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    2372:	85a6      	strh	r6, [r4, #44]	; 0x2c
    2374:	4b0a      	ldr	r3, [pc, #40]	; (23a0 <_usart_read_buffer+0x4c>)
    2376:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    2378:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    237a:	2205      	movs	r2, #5
    237c:	2332      	movs	r3, #50	; 0x32
    237e:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    2380:	3b2e      	subs	r3, #46	; 0x2e
    2382:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    2384:	7a23      	ldrb	r3, [r4, #8]
    2386:	2b00      	cmp	r3, #0
    2388:	d001      	beq.n	238e <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    238a:	2320      	movs	r3, #32
    238c:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    238e:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    2390:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    2392:	2b00      	cmp	r3, #0
    2394:	d0ec      	beq.n	2370 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    2396:	2308      	movs	r3, #8
    2398:	75bb      	strb	r3, [r7, #22]
    239a:	e7e9      	b.n	2370 <_usart_read_buffer+0x1c>
    239c:	0000269d 	.word	0x0000269d
    23a0:	000026dd 	.word	0x000026dd

000023a4 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    23a4:	1c93      	adds	r3, r2, #2
    23a6:	009b      	lsls	r3, r3, #2
    23a8:	18c3      	adds	r3, r0, r3
    23aa:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    23ac:	2130      	movs	r1, #48	; 0x30
    23ae:	2301      	movs	r3, #1
    23b0:	4093      	lsls	r3, r2
    23b2:	001a      	movs	r2, r3
    23b4:	5c43      	ldrb	r3, [r0, r1]
    23b6:	4313      	orrs	r3, r2
    23b8:	5443      	strb	r3, [r0, r1]
}
    23ba:	4770      	bx	lr

000023bc <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    23bc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    23be:	2317      	movs	r3, #23
	if (length == 0) {
    23c0:	2a00      	cmp	r2, #0
    23c2:	d101      	bne.n	23c8 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    23c4:	0018      	movs	r0, r3
    23c6:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    23c8:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    23ca:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    23cc:	2c00      	cmp	r4, #0
    23ce:	d0f9      	beq.n	23c4 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    23d0:	4b01      	ldr	r3, [pc, #4]	; (23d8 <usart_write_buffer_job+0x1c>)
    23d2:	4798      	blx	r3
    23d4:	0003      	movs	r3, r0
    23d6:	e7f5      	b.n	23c4 <usart_write_buffer_job+0x8>
    23d8:	00002319 	.word	0x00002319

000023dc <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    23dc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    23de:	2317      	movs	r3, #23
	if (length == 0) {
    23e0:	2a00      	cmp	r2, #0
    23e2:	d101      	bne.n	23e8 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    23e4:	0018      	movs	r0, r3
    23e6:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    23e8:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    23ea:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    23ec:	2c00      	cmp	r4, #0
    23ee:	d0f9      	beq.n	23e4 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    23f0:	4b01      	ldr	r3, [pc, #4]	; (23f8 <usart_read_buffer_job+0x1c>)
    23f2:	4798      	blx	r3
    23f4:	0003      	movs	r3, r0
    23f6:	e7f5      	b.n	23e4 <usart_read_buffer_job+0x8>
    23f8:	00002355 	.word	0x00002355

000023fc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    23fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    23fe:	0080      	lsls	r0, r0, #2
    2400:	4b62      	ldr	r3, [pc, #392]	; (258c <_usart_interrupt_handler+0x190>)
    2402:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2404:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2406:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2408:	2b00      	cmp	r3, #0
    240a:	d1fc      	bne.n	2406 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    240c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    240e:	7da6      	ldrb	r6, [r4, #22]
    2410:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    2412:	2330      	movs	r3, #48	; 0x30
    2414:	5ceb      	ldrb	r3, [r5, r3]
    2416:	2231      	movs	r2, #49	; 0x31
    2418:	5caf      	ldrb	r7, [r5, r2]
    241a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    241c:	07f3      	lsls	r3, r6, #31
    241e:	d522      	bpl.n	2466 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2420:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2422:	b29b      	uxth	r3, r3
    2424:	2b00      	cmp	r3, #0
    2426:	d01c      	beq.n	2462 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2428:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    242a:	7813      	ldrb	r3, [r2, #0]
    242c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    242e:	1c51      	adds	r1, r2, #1
    2430:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2432:	7969      	ldrb	r1, [r5, #5]
    2434:	2901      	cmp	r1, #1
    2436:	d00e      	beq.n	2456 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2438:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    243a:	05db      	lsls	r3, r3, #23
    243c:	0ddb      	lsrs	r3, r3, #23
    243e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2440:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2442:	3b01      	subs	r3, #1
    2444:	b29b      	uxth	r3, r3
    2446:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2448:	2b00      	cmp	r3, #0
    244a:	d10c      	bne.n	2466 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    244c:	3301      	adds	r3, #1
    244e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2450:	3301      	adds	r3, #1
    2452:	75a3      	strb	r3, [r4, #22]
    2454:	e007      	b.n	2466 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2456:	7851      	ldrb	r1, [r2, #1]
    2458:	0209      	lsls	r1, r1, #8
    245a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    245c:	3202      	adds	r2, #2
    245e:	62aa      	str	r2, [r5, #40]	; 0x28
    2460:	e7eb      	b.n	243a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2462:	2301      	movs	r3, #1
    2464:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2466:	07b3      	lsls	r3, r6, #30
    2468:	d506      	bpl.n	2478 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    246a:	2302      	movs	r3, #2
    246c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    246e:	2200      	movs	r2, #0
    2470:	3331      	adds	r3, #49	; 0x31
    2472:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2474:	07fb      	lsls	r3, r7, #31
    2476:	d41a      	bmi.n	24ae <_usart_interrupt_handler+0xb2>

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2478:	0773      	lsls	r3, r6, #29
    247a:	d565      	bpl.n	2548 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    247c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    247e:	b29b      	uxth	r3, r3
    2480:	2b00      	cmp	r3, #0
    2482:	d05f      	beq.n	2544 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2484:	8b63      	ldrh	r3, [r4, #26]
    2486:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2488:	071a      	lsls	r2, r3, #28
    248a:	d414      	bmi.n	24b6 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    248c:	223f      	movs	r2, #63	; 0x3f
    248e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2490:	2b00      	cmp	r3, #0
    2492:	d034      	beq.n	24fe <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2494:	079a      	lsls	r2, r3, #30
    2496:	d511      	bpl.n	24bc <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2498:	221a      	movs	r2, #26
    249a:	2332      	movs	r3, #50	; 0x32
    249c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    249e:	3b30      	subs	r3, #48	; 0x30
    24a0:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    24a2:	077b      	lsls	r3, r7, #29
    24a4:	d550      	bpl.n	2548 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    24a6:	0028      	movs	r0, r5
    24a8:	696b      	ldr	r3, [r5, #20]
    24aa:	4798      	blx	r3
    24ac:	e04c      	b.n	2548 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    24ae:	0028      	movs	r0, r5
    24b0:	68eb      	ldr	r3, [r5, #12]
    24b2:	4798      	blx	r3
    24b4:	e7e0      	b.n	2478 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    24b6:	2237      	movs	r2, #55	; 0x37
    24b8:	4013      	ands	r3, r2
    24ba:	e7e9      	b.n	2490 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    24bc:	075a      	lsls	r2, r3, #29
    24be:	d505      	bpl.n	24cc <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    24c0:	221e      	movs	r2, #30
    24c2:	2332      	movs	r3, #50	; 0x32
    24c4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    24c6:	3b2e      	subs	r3, #46	; 0x2e
    24c8:	8363      	strh	r3, [r4, #26]
    24ca:	e7ea      	b.n	24a2 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    24cc:	07da      	lsls	r2, r3, #31
    24ce:	d505      	bpl.n	24dc <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    24d0:	2213      	movs	r2, #19
    24d2:	2332      	movs	r3, #50	; 0x32
    24d4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    24d6:	3b31      	subs	r3, #49	; 0x31
    24d8:	8363      	strh	r3, [r4, #26]
    24da:	e7e2      	b.n	24a2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    24dc:	06da      	lsls	r2, r3, #27
    24de:	d505      	bpl.n	24ec <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    24e0:	2242      	movs	r2, #66	; 0x42
    24e2:	2332      	movs	r3, #50	; 0x32
    24e4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    24e6:	3b22      	subs	r3, #34	; 0x22
    24e8:	8363      	strh	r3, [r4, #26]
    24ea:	e7da      	b.n	24a2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    24ec:	2220      	movs	r2, #32
    24ee:	421a      	tst	r2, r3
    24f0:	d0d7      	beq.n	24a2 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    24f2:	3221      	adds	r2, #33	; 0x21
    24f4:	2332      	movs	r3, #50	; 0x32
    24f6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    24f8:	3b12      	subs	r3, #18
    24fa:	8363      	strh	r3, [r4, #26]
    24fc:	e7d1      	b.n	24a2 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    24fe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2500:	05db      	lsls	r3, r3, #23
    2502:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2504:	b2da      	uxtb	r2, r3
    2506:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2508:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    250a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    250c:	1c51      	adds	r1, r2, #1
    250e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2510:	7969      	ldrb	r1, [r5, #5]
    2512:	2901      	cmp	r1, #1
    2514:	d010      	beq.n	2538 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2516:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2518:	3b01      	subs	r3, #1
    251a:	b29b      	uxth	r3, r3
    251c:	85ab      	strh	r3, [r5, #44]	; 0x2c
    251e:	2b00      	cmp	r3, #0
    2520:	d112      	bne.n	2548 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2522:	3304      	adds	r3, #4
    2524:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2526:	2200      	movs	r2, #0
    2528:	332e      	adds	r3, #46	; 0x2e
    252a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    252c:	07bb      	lsls	r3, r7, #30
    252e:	d50b      	bpl.n	2548 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2530:	0028      	movs	r0, r5
    2532:	692b      	ldr	r3, [r5, #16]
    2534:	4798      	blx	r3
    2536:	e007      	b.n	2548 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2538:	0a1b      	lsrs	r3, r3, #8
    253a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    253c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    253e:	3301      	adds	r3, #1
    2540:	626b      	str	r3, [r5, #36]	; 0x24
    2542:	e7e8      	b.n	2516 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2544:	2304      	movs	r3, #4
    2546:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2548:	06f3      	lsls	r3, r6, #27
    254a:	d504      	bpl.n	2556 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    254c:	2310      	movs	r3, #16
    254e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2550:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2552:	06fb      	lsls	r3, r7, #27
    2554:	d40e      	bmi.n	2574 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2556:	06b3      	lsls	r3, r6, #26
    2558:	d504      	bpl.n	2564 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    255a:	2320      	movs	r3, #32
    255c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    255e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2560:	073b      	lsls	r3, r7, #28
    2562:	d40b      	bmi.n	257c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2564:	0733      	lsls	r3, r6, #28
    2566:	d504      	bpl.n	2572 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2568:	2308      	movs	r3, #8
    256a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    256c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    256e:	06bb      	lsls	r3, r7, #26
    2570:	d408      	bmi.n	2584 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    2572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2574:	0028      	movs	r0, r5
    2576:	69eb      	ldr	r3, [r5, #28]
    2578:	4798      	blx	r3
    257a:	e7ec      	b.n	2556 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    257c:	0028      	movs	r0, r5
    257e:	69ab      	ldr	r3, [r5, #24]
    2580:	4798      	blx	r3
    2582:	e7ef      	b.n	2564 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2584:	6a2b      	ldr	r3, [r5, #32]
    2586:	0028      	movs	r0, r5
    2588:	4798      	blx	r3
}
    258a:	e7f2      	b.n	2572 <_usart_interrupt_handler+0x176>
    258c:	20000290 	.word	0x20000290

00002590 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2590:	4770      	bx	lr
	...

00002594 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2594:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    2596:	4b0b      	ldr	r3, [pc, #44]	; (25c4 <_sercom_set_handler+0x30>)
    2598:	781b      	ldrb	r3, [r3, #0]
    259a:	2b00      	cmp	r3, #0
    259c:	d10e      	bne.n	25bc <_sercom_set_handler+0x28>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    259e:	4c0a      	ldr	r4, [pc, #40]	; (25c8 <_sercom_set_handler+0x34>)
    25a0:	4d0a      	ldr	r5, [pc, #40]	; (25cc <_sercom_set_handler+0x38>)
    25a2:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
    25a4:	4b0a      	ldr	r3, [pc, #40]	; (25d0 <_sercom_set_handler+0x3c>)
    25a6:	2200      	movs	r2, #0
    25a8:	601a      	str	r2, [r3, #0]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    25aa:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
    25ac:	605a      	str	r2, [r3, #4]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    25ae:	60a5      	str	r5, [r4, #8]
			_sercom_instances[i] = NULL;
    25b0:	609a      	str	r2, [r3, #8]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    25b2:	60e5      	str	r5, [r4, #12]
			_sercom_instances[i] = NULL;
    25b4:	60da      	str	r2, [r3, #12]
		}

		_handler_table_initialized = true;
    25b6:	3201      	adds	r2, #1
    25b8:	4b02      	ldr	r3, [pc, #8]	; (25c4 <_sercom_set_handler+0x30>)
    25ba:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    25bc:	0080      	lsls	r0, r0, #2
    25be:	4b02      	ldr	r3, [pc, #8]	; (25c8 <_sercom_set_handler+0x34>)
    25c0:	50c1      	str	r1, [r0, r3]
}
    25c2:	bd30      	pop	{r4, r5, pc}
    25c4:	200000a6 	.word	0x200000a6
    25c8:	200000a8 	.word	0x200000a8
    25cc:	00002591 	.word	0x00002591
    25d0:	20000290 	.word	0x20000290

000025d4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    25d4:	b510      	push	{r4, lr}
    25d6:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    25d8:	ac01      	add	r4, sp, #4
    25da:	2309      	movs	r3, #9
    25dc:	7023      	strb	r3, [r4, #0]
    25de:	3301      	adds	r3, #1
    25e0:	7063      	strb	r3, [r4, #1]
    25e2:	3301      	adds	r3, #1
    25e4:	70a3      	strb	r3, [r4, #2]
    25e6:	3301      	adds	r3, #1
    25e8:	70e3      	strb	r3, [r4, #3]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    25ea:	4b02      	ldr	r3, [pc, #8]	; (25f4 <_sercom_get_interrupt_vector+0x20>)
    25ec:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    25ee:	5620      	ldrsb	r0, [r4, r0]
}
    25f0:	b002      	add	sp, #8
    25f2:	bd10      	pop	{r4, pc}
    25f4:	00001f91 	.word	0x00001f91

000025f8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    25f8:	b510      	push	{r4, lr}
    25fa:	4b02      	ldr	r3, [pc, #8]	; (2604 <SERCOM0_Handler+0xc>)
    25fc:	681b      	ldr	r3, [r3, #0]
    25fe:	2000      	movs	r0, #0
    2600:	4798      	blx	r3
    2602:	bd10      	pop	{r4, pc}
    2604:	200000a8 	.word	0x200000a8

00002608 <SERCOM1_Handler>:
    2608:	b510      	push	{r4, lr}
    260a:	4b02      	ldr	r3, [pc, #8]	; (2614 <SERCOM1_Handler+0xc>)
    260c:	685b      	ldr	r3, [r3, #4]
    260e:	2001      	movs	r0, #1
    2610:	4798      	blx	r3
    2612:	bd10      	pop	{r4, pc}
    2614:	200000a8 	.word	0x200000a8

00002618 <SERCOM2_Handler>:
    2618:	b510      	push	{r4, lr}
    261a:	4b02      	ldr	r3, [pc, #8]	; (2624 <SERCOM2_Handler+0xc>)
    261c:	689b      	ldr	r3, [r3, #8]
    261e:	2002      	movs	r0, #2
    2620:	4798      	blx	r3
    2622:	bd10      	pop	{r4, pc}
    2624:	200000a8 	.word	0x200000a8

00002628 <SERCOM3_Handler>:
    2628:	b510      	push	{r4, lr}
    262a:	4b02      	ldr	r3, [pc, #8]	; (2634 <SERCOM3_Handler+0xc>)
    262c:	68db      	ldr	r3, [r3, #12]
    262e:	2003      	movs	r0, #3
    2630:	4798      	blx	r3
    2632:	bd10      	pop	{r4, pc}
    2634:	200000a8 	.word	0x200000a8

00002638 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    2638:	b5f0      	push	{r4, r5, r6, r7, lr}
    263a:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    263c:	ac01      	add	r4, sp, #4
    263e:	2301      	movs	r3, #1
    2640:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    2642:	2700      	movs	r7, #0
    2644:	70a7      	strb	r7, [r4, #2]
    
    struct port_config pin_conf;
    port_get_config_defaults(&pin_conf);

    // Configure LEDs as outputs, turn them off 
    pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2646:	7023      	strb	r3, [r4, #0]
    port_pin_set_config(LED_RED_PIN, &pin_conf);
    2648:	0021      	movs	r1, r4
    264a:	200e      	movs	r0, #14
    264c:	4d11      	ldr	r5, [pc, #68]	; (2694 <system_board_init+0x5c>)
    264e:	47a8      	blx	r5
		port_base->OUTCLR.reg = pin_mask;
    2650:	4e11      	ldr	r6, [pc, #68]	; (2698 <system_board_init+0x60>)
    2652:	2380      	movs	r3, #128	; 0x80
    2654:	01db      	lsls	r3, r3, #7
    2656:	6173      	str	r3, [r6, #20]
    port_pin_set_output_level(LED_RED_PIN, LED_RED_INACTIVE);
    
    port_pin_set_config(LED_GREEN_PIN, &pin_conf);
    2658:	0021      	movs	r1, r4
    265a:	200f      	movs	r0, #15
    265c:	47a8      	blx	r5
    265e:	2380      	movs	r3, #128	; 0x80
    2660:	021b      	lsls	r3, r3, #8
    2662:	6173      	str	r3, [r6, #20]
    port_pin_set_output_level(LED_GREEN_PIN, LED_GREEN_INACTIVE);

    // Configure the Enable of LED Stripe as output, turn it on 
    port_pin_set_config(LED_DRIVER_PIN, &pin_conf);
    2664:	0021      	movs	r1, r4
    2666:	2001      	movs	r0, #1
    2668:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    266a:	2302      	movs	r3, #2
    266c:	61b3      	str	r3, [r6, #24]
    port_pin_set_output_level(LED_DRIVER_PIN, LED_DRIVER_ACTIVE);
    
    // Configure the Enable of BT Module as output, turn it on
    port_pin_set_config(BT_ENABLE_PIN, &pin_conf);
    266e:	0021      	movs	r1, r4
    2670:	2003      	movs	r0, #3
    2672:	47a8      	blx	r5
    2674:	2308      	movs	r3, #8
    2676:	61b3      	str	r3, [r6, #24]
    port_pin_set_output_level(BT_ENABLE_PIN, BT_ENABLE_ACTIVE);
    
    // Configure the Charge Complete Pin for the Gas Gauge Module as output, turn it off
    port_pin_set_config(GAUGE_CC_ENABLE_PIN, &pin_conf);
    2678:	0021      	movs	r1, r4
    267a:	200a      	movs	r0, #10
    267c:	47a8      	blx	r5
		port_base->OUTCLR.reg = pin_mask;
    267e:	2380      	movs	r3, #128	; 0x80
    2680:	00db      	lsls	r3, r3, #3
    2682:	6173      	str	r3, [r6, #20]
    port_pin_set_output_level(GAUGE_CC_ENABLE_PIN, GAUGE_CC_ENABLE_INACTIVE);


/* Set buttons as inputs */
pin_conf.direction  = PORT_PIN_DIR_INPUT;
    2684:	7027      	strb	r7, [r4, #0]
pin_conf.input_pull = PORT_PIN_PULL_NONE;
    2686:	7067      	strb	r7, [r4, #1]
port_pin_set_config(INPUT_BCAP_PIN, &pin_conf);
    2688:	0021      	movs	r1, r4
    268a:	2018      	movs	r0, #24
    268c:	47a8      	blx	r5
    268e:	b003      	add	sp, #12
    2690:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2692:	46c0      	nop			; (mov r8, r8)
    2694:	00001325 	.word	0x00001325
    2698:	41004400 	.word	0x41004400

0000269c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    269c:	4b0c      	ldr	r3, [pc, #48]	; (26d0 <cpu_irq_enter_critical+0x34>)
    269e:	681b      	ldr	r3, [r3, #0]
    26a0:	2b00      	cmp	r3, #0
    26a2:	d106      	bne.n	26b2 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    26a4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    26a8:	2b00      	cmp	r3, #0
    26aa:	d007      	beq.n	26bc <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    26ac:	2200      	movs	r2, #0
    26ae:	4b09      	ldr	r3, [pc, #36]	; (26d4 <cpu_irq_enter_critical+0x38>)
    26b0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    26b2:	4a07      	ldr	r2, [pc, #28]	; (26d0 <cpu_irq_enter_critical+0x34>)
    26b4:	6813      	ldr	r3, [r2, #0]
    26b6:	3301      	adds	r3, #1
    26b8:	6013      	str	r3, [r2, #0]
}
    26ba:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    26bc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    26be:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    26c2:	2200      	movs	r2, #0
    26c4:	4b04      	ldr	r3, [pc, #16]	; (26d8 <cpu_irq_enter_critical+0x3c>)
    26c6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    26c8:	3201      	adds	r2, #1
    26ca:	4b02      	ldr	r3, [pc, #8]	; (26d4 <cpu_irq_enter_critical+0x38>)
    26cc:	701a      	strb	r2, [r3, #0]
    26ce:	e7f0      	b.n	26b2 <cpu_irq_enter_critical+0x16>
    26d0:	200000b8 	.word	0x200000b8
    26d4:	200000bc 	.word	0x200000bc
    26d8:	20000014 	.word	0x20000014

000026dc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    26dc:	4b08      	ldr	r3, [pc, #32]	; (2700 <cpu_irq_leave_critical+0x24>)
    26de:	681a      	ldr	r2, [r3, #0]
    26e0:	3a01      	subs	r2, #1
    26e2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    26e4:	681b      	ldr	r3, [r3, #0]
    26e6:	2b00      	cmp	r3, #0
    26e8:	d109      	bne.n	26fe <cpu_irq_leave_critical+0x22>
    26ea:	4b06      	ldr	r3, [pc, #24]	; (2704 <cpu_irq_leave_critical+0x28>)
    26ec:	781b      	ldrb	r3, [r3, #0]
    26ee:	2b00      	cmp	r3, #0
    26f0:	d005      	beq.n	26fe <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    26f2:	2201      	movs	r2, #1
    26f4:	4b04      	ldr	r3, [pc, #16]	; (2708 <cpu_irq_leave_critical+0x2c>)
    26f6:	701a      	strb	r2, [r3, #0]
    26f8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    26fc:	b662      	cpsie	i
	}
}
    26fe:	4770      	bx	lr
    2700:	200000b8 	.word	0x200000b8
    2704:	200000bc 	.word	0x200000bc
    2708:	20000014 	.word	0x20000014

0000270c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    270c:	b510      	push	{r4, lr}
	switch (clock_source) {
    270e:	2808      	cmp	r0, #8
    2710:	d803      	bhi.n	271a <system_clock_source_get_hz+0xe>
    2712:	0080      	lsls	r0, r0, #2
    2714:	4b1b      	ldr	r3, [pc, #108]	; (2784 <system_clock_source_get_hz+0x78>)
    2716:	581b      	ldr	r3, [r3, r0]
    2718:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    271a:	2000      	movs	r0, #0
    271c:	e030      	b.n	2780 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    271e:	4b1a      	ldr	r3, [pc, #104]	; (2788 <system_clock_source_get_hz+0x7c>)
    2720:	6918      	ldr	r0, [r3, #16]
    2722:	e02d      	b.n	2780 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2724:	4b19      	ldr	r3, [pc, #100]	; (278c <system_clock_source_get_hz+0x80>)
    2726:	6a1b      	ldr	r3, [r3, #32]
    2728:	059b      	lsls	r3, r3, #22
    272a:	0f9b      	lsrs	r3, r3, #30
    272c:	4818      	ldr	r0, [pc, #96]	; (2790 <system_clock_source_get_hz+0x84>)
    272e:	40d8      	lsrs	r0, r3
    2730:	e026      	b.n	2780 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    2732:	4b15      	ldr	r3, [pc, #84]	; (2788 <system_clock_source_get_hz+0x7c>)
    2734:	6958      	ldr	r0, [r3, #20]
    2736:	e023      	b.n	2780 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2738:	4b13      	ldr	r3, [pc, #76]	; (2788 <system_clock_source_get_hz+0x7c>)
    273a:	681b      	ldr	r3, [r3, #0]
			return 0;
    273c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    273e:	079b      	lsls	r3, r3, #30
    2740:	d51e      	bpl.n	2780 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2742:	4912      	ldr	r1, [pc, #72]	; (278c <system_clock_source_get_hz+0x80>)
    2744:	2210      	movs	r2, #16
    2746:	68cb      	ldr	r3, [r1, #12]
    2748:	421a      	tst	r2, r3
    274a:	d0fc      	beq.n	2746 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    274c:	4b0e      	ldr	r3, [pc, #56]	; (2788 <system_clock_source_get_hz+0x7c>)
    274e:	681b      	ldr	r3, [r3, #0]
    2750:	075b      	lsls	r3, r3, #29
    2752:	d401      	bmi.n	2758 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    2754:	480f      	ldr	r0, [pc, #60]	; (2794 <system_clock_source_get_hz+0x88>)
    2756:	e013      	b.n	2780 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2758:	2000      	movs	r0, #0
    275a:	4b0f      	ldr	r3, [pc, #60]	; (2798 <system_clock_source_get_hz+0x8c>)
    275c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    275e:	4b0a      	ldr	r3, [pc, #40]	; (2788 <system_clock_source_get_hz+0x7c>)
    2760:	689b      	ldr	r3, [r3, #8]
    2762:	041b      	lsls	r3, r3, #16
    2764:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2766:	4358      	muls	r0, r3
    2768:	e00a      	b.n	2780 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    276a:	2350      	movs	r3, #80	; 0x50
    276c:	4a07      	ldr	r2, [pc, #28]	; (278c <system_clock_source_get_hz+0x80>)
    276e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2770:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2772:	075b      	lsls	r3, r3, #29
    2774:	d504      	bpl.n	2780 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    2776:	4b04      	ldr	r3, [pc, #16]	; (2788 <system_clock_source_get_hz+0x7c>)
    2778:	68d8      	ldr	r0, [r3, #12]
    277a:	e001      	b.n	2780 <system_clock_source_get_hz+0x74>
		return 32768UL;
    277c:	2080      	movs	r0, #128	; 0x80
    277e:	0200      	lsls	r0, r0, #8
	}
}
    2780:	bd10      	pop	{r4, pc}
    2782:	46c0      	nop			; (mov r8, r8)
    2784:	00005a78 	.word	0x00005a78
    2788:	200000c0 	.word	0x200000c0
    278c:	40000800 	.word	0x40000800
    2790:	007a1200 	.word	0x007a1200
    2794:	02dc6c00 	.word	0x02dc6c00
    2798:	00002c3d 	.word	0x00002c3d

0000279c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    279c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    279e:	490c      	ldr	r1, [pc, #48]	; (27d0 <system_clock_source_osc8m_set_config+0x34>)
    27a0:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    27a2:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    27a4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    27a6:	7840      	ldrb	r0, [r0, #1]
    27a8:	2201      	movs	r2, #1
    27aa:	4010      	ands	r0, r2
    27ac:	0180      	lsls	r0, r0, #6
    27ae:	2640      	movs	r6, #64	; 0x40
    27b0:	43b3      	bics	r3, r6
    27b2:	4303      	orrs	r3, r0
    27b4:	402a      	ands	r2, r5
    27b6:	01d2      	lsls	r2, r2, #7
    27b8:	2080      	movs	r0, #128	; 0x80
    27ba:	4383      	bics	r3, r0
    27bc:	4313      	orrs	r3, r2
    27be:	2203      	movs	r2, #3
    27c0:	4022      	ands	r2, r4
    27c2:	0212      	lsls	r2, r2, #8
    27c4:	4803      	ldr	r0, [pc, #12]	; (27d4 <system_clock_source_osc8m_set_config+0x38>)
    27c6:	4003      	ands	r3, r0
    27c8:	4313      	orrs	r3, r2
    27ca:	620b      	str	r3, [r1, #32]
}
    27cc:	bd70      	pop	{r4, r5, r6, pc}
    27ce:	46c0      	nop			; (mov r8, r8)
    27d0:	40000800 	.word	0x40000800
    27d4:	fffffcff 	.word	0xfffffcff

000027d8 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    27d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    27da:	46ce      	mov	lr, r9
    27dc:	4647      	mov	r7, r8
    27de:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    27e0:	4b19      	ldr	r3, [pc, #100]	; (2848 <system_clock_source_osc32k_set_config+0x70>)
    27e2:	4699      	mov	r9, r3
    27e4:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    27e6:	7841      	ldrb	r1, [r0, #1]
    27e8:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    27ea:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    27ec:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    27ee:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    27f0:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    27f2:	7880      	ldrb	r0, [r0, #2]
    27f4:	2101      	movs	r1, #1
    27f6:	4008      	ands	r0, r1
    27f8:	0080      	lsls	r0, r0, #2
    27fa:	2204      	movs	r2, #4
    27fc:	4393      	bics	r3, r2
    27fe:	4303      	orrs	r3, r0
    2800:	4660      	mov	r0, ip
    2802:	4008      	ands	r0, r1
    2804:	00c0      	lsls	r0, r0, #3
    2806:	3204      	adds	r2, #4
    2808:	4393      	bics	r3, r2
    280a:	4303      	orrs	r3, r0
    280c:	0038      	movs	r0, r7
    280e:	4008      	ands	r0, r1
    2810:	0180      	lsls	r0, r0, #6
    2812:	2740      	movs	r7, #64	; 0x40
    2814:	43bb      	bics	r3, r7
    2816:	4303      	orrs	r3, r0
    2818:	0030      	movs	r0, r6
    281a:	4008      	ands	r0, r1
    281c:	01c0      	lsls	r0, r0, #7
    281e:	2680      	movs	r6, #128	; 0x80
    2820:	43b3      	bics	r3, r6
    2822:	4303      	orrs	r3, r0
    2824:	2007      	movs	r0, #7
    2826:	4005      	ands	r5, r0
    2828:	022d      	lsls	r5, r5, #8
    282a:	4808      	ldr	r0, [pc, #32]	; (284c <system_clock_source_osc32k_set_config+0x74>)
    282c:	4003      	ands	r3, r0
    282e:	432b      	orrs	r3, r5
    2830:	4021      	ands	r1, r4
    2832:	0309      	lsls	r1, r1, #12
    2834:	4806      	ldr	r0, [pc, #24]	; (2850 <system_clock_source_osc32k_set_config+0x78>)
    2836:	4003      	ands	r3, r0
    2838:	430b      	orrs	r3, r1
    283a:	464a      	mov	r2, r9
    283c:	6193      	str	r3, [r2, #24]
}
    283e:	bc0c      	pop	{r2, r3}
    2840:	4690      	mov	r8, r2
    2842:	4699      	mov	r9, r3
    2844:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2846:	46c0      	nop			; (mov r8, r8)
    2848:	40000800 	.word	0x40000800
    284c:	fffff8ff 	.word	0xfffff8ff
    2850:	ffffefff 	.word	0xffffefff

00002854 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2854:	2808      	cmp	r0, #8
    2856:	d803      	bhi.n	2860 <system_clock_source_enable+0xc>
    2858:	0080      	lsls	r0, r0, #2
    285a:	4b25      	ldr	r3, [pc, #148]	; (28f0 <system_clock_source_enable+0x9c>)
    285c:	581b      	ldr	r3, [r3, r0]
    285e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2860:	2017      	movs	r0, #23
    2862:	e044      	b.n	28ee <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2864:	4a23      	ldr	r2, [pc, #140]	; (28f4 <system_clock_source_enable+0xa0>)
    2866:	6a13      	ldr	r3, [r2, #32]
    2868:	2102      	movs	r1, #2
    286a:	430b      	orrs	r3, r1
    286c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    286e:	2000      	movs	r0, #0
    2870:	e03d      	b.n	28ee <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2872:	4a20      	ldr	r2, [pc, #128]	; (28f4 <system_clock_source_enable+0xa0>)
    2874:	6993      	ldr	r3, [r2, #24]
    2876:	2102      	movs	r1, #2
    2878:	430b      	orrs	r3, r1
    287a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    287c:	2000      	movs	r0, #0
		break;
    287e:	e036      	b.n	28ee <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2880:	4a1c      	ldr	r2, [pc, #112]	; (28f4 <system_clock_source_enable+0xa0>)
    2882:	8a13      	ldrh	r3, [r2, #16]
    2884:	2102      	movs	r1, #2
    2886:	430b      	orrs	r3, r1
    2888:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    288a:	2000      	movs	r0, #0
		break;
    288c:	e02f      	b.n	28ee <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    288e:	4a19      	ldr	r2, [pc, #100]	; (28f4 <system_clock_source_enable+0xa0>)
    2890:	8a93      	ldrh	r3, [r2, #20]
    2892:	2102      	movs	r1, #2
    2894:	430b      	orrs	r3, r1
    2896:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2898:	2000      	movs	r0, #0
		break;
    289a:	e028      	b.n	28ee <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    289c:	4916      	ldr	r1, [pc, #88]	; (28f8 <system_clock_source_enable+0xa4>)
    289e:	680b      	ldr	r3, [r1, #0]
    28a0:	2202      	movs	r2, #2
    28a2:	4313      	orrs	r3, r2
    28a4:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    28a6:	4b13      	ldr	r3, [pc, #76]	; (28f4 <system_clock_source_enable+0xa0>)
    28a8:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    28aa:	0019      	movs	r1, r3
    28ac:	320e      	adds	r2, #14
    28ae:	68cb      	ldr	r3, [r1, #12]
    28b0:	421a      	tst	r2, r3
    28b2:	d0fc      	beq.n	28ae <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    28b4:	4a10      	ldr	r2, [pc, #64]	; (28f8 <system_clock_source_enable+0xa4>)
    28b6:	6891      	ldr	r1, [r2, #8]
    28b8:	4b0e      	ldr	r3, [pc, #56]	; (28f4 <system_clock_source_enable+0xa0>)
    28ba:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    28bc:	6852      	ldr	r2, [r2, #4]
    28be:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    28c0:	2200      	movs	r2, #0
    28c2:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    28c4:	0019      	movs	r1, r3
    28c6:	3210      	adds	r2, #16
    28c8:	68cb      	ldr	r3, [r1, #12]
    28ca:	421a      	tst	r2, r3
    28cc:	d0fc      	beq.n	28c8 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    28ce:	4b0a      	ldr	r3, [pc, #40]	; (28f8 <system_clock_source_enable+0xa4>)
    28d0:	681b      	ldr	r3, [r3, #0]
    28d2:	b29b      	uxth	r3, r3
    28d4:	4a07      	ldr	r2, [pc, #28]	; (28f4 <system_clock_source_enable+0xa0>)
    28d6:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    28d8:	2000      	movs	r0, #0
    28da:	e008      	b.n	28ee <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    28dc:	4905      	ldr	r1, [pc, #20]	; (28f4 <system_clock_source_enable+0xa0>)
    28de:	2244      	movs	r2, #68	; 0x44
    28e0:	5c8b      	ldrb	r3, [r1, r2]
    28e2:	2002      	movs	r0, #2
    28e4:	4303      	orrs	r3, r0
    28e6:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    28e8:	2000      	movs	r0, #0
		break;
    28ea:	e000      	b.n	28ee <system_clock_source_enable+0x9a>
		return STATUS_OK;
    28ec:	2000      	movs	r0, #0
}
    28ee:	4770      	bx	lr
    28f0:	00005a9c 	.word	0x00005a9c
    28f4:	40000800 	.word	0x40000800
    28f8:	200000c0 	.word	0x200000c0

000028fc <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    28fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    28fe:	b087      	sub	sp, #28
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2900:	22c2      	movs	r2, #194	; 0xc2
    2902:	00d2      	lsls	r2, r2, #3
    2904:	4b2c      	ldr	r3, [pc, #176]	; (29b8 <system_clock_init+0xbc>)
    2906:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2908:	4a2c      	ldr	r2, [pc, #176]	; (29bc <system_clock_init+0xc0>)
    290a:	6853      	ldr	r3, [r2, #4]
    290c:	211e      	movs	r1, #30
    290e:	438b      	bics	r3, r1
    2910:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    2912:	2301      	movs	r3, #1
    2914:	466a      	mov	r2, sp
    2916:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2918:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    291a:	4d29      	ldr	r5, [pc, #164]	; (29c0 <system_clock_init+0xc4>)
    291c:	b2e0      	uxtb	r0, r4
    291e:	4669      	mov	r1, sp
    2920:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2922:	3401      	adds	r4, #1
    2924:	2c25      	cmp	r4, #37	; 0x25
    2926:	d1f9      	bne.n	291c <system_clock_init+0x20>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    2928:	4b26      	ldr	r3, [pc, #152]	; (29c4 <system_clock_init+0xc8>)
    292a:	681b      	ldr	r3, [r3, #0]
	SYSCTRL->OSC32K.bit.CALIB =
    292c:	04db      	lsls	r3, r3, #19
    292e:	4922      	ldr	r1, [pc, #136]	; (29b8 <system_clock_init+0xbc>)
    2930:	698a      	ldr	r2, [r1, #24]
    2932:	0e5b      	lsrs	r3, r3, #25
    2934:	041b      	lsls	r3, r3, #16
    2936:	4824      	ldr	r0, [pc, #144]	; (29c8 <system_clock_init+0xcc>)
    2938:	4002      	ands	r2, r0
    293a:	4313      	orrs	r3, r2
    293c:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    293e:	a804      	add	r0, sp, #16
    2940:	2501      	movs	r5, #1
    2942:	7045      	strb	r5, [r0, #1]
	config->enable_32khz_output = true;
    2944:	7085      	strb	r5, [r0, #2]
	config->run_in_standby      = false;
    2946:	2400      	movs	r4, #0
    2948:	70c4      	strb	r4, [r0, #3]
	config->on_demand           = true;
    294a:	7105      	strb	r5, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    294c:	2307      	movs	r3, #7
    294e:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    2950:	7144      	strb	r4, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    2952:	4b1e      	ldr	r3, [pc, #120]	; (29cc <system_clock_init+0xd0>)
    2954:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    2956:	2004      	movs	r0, #4
    2958:	4e1d      	ldr	r6, [pc, #116]	; (29d0 <system_clock_init+0xd4>)
    295a:	47b0      	blx	r6
	config->run_in_standby  = false;
    295c:	a803      	add	r0, sp, #12
    295e:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    2960:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2962:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2964:	4b1b      	ldr	r3, [pc, #108]	; (29d4 <system_clock_init+0xd8>)
    2966:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2968:	2006      	movs	r0, #6
    296a:	47b0      	blx	r6


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    296c:	4b1a      	ldr	r3, [pc, #104]	; (29d8 <system_clock_init+0xdc>)
    296e:	4798      	blx	r3
	config->high_when_disabled = false;
    2970:	466b      	mov	r3, sp
    2972:	705c      	strb	r4, [r3, #1]
	config->run_in_standby     = false;
    2974:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    2976:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2978:	2304      	movs	r3, #4
    297a:	466a      	mov	r2, sp
    297c:	7013      	strb	r3, [r2, #0]
    297e:	331c      	adds	r3, #28
    2980:	9301      	str	r3, [sp, #4]
    2982:	4669      	mov	r1, sp
    2984:	2002      	movs	r0, #2
    2986:	4f15      	ldr	r7, [pc, #84]	; (29dc <system_clock_init+0xe0>)
    2988:	47b8      	blx	r7
    298a:	2002      	movs	r0, #2
    298c:	4e14      	ldr	r6, [pc, #80]	; (29e0 <system_clock_init+0xe4>)
    298e:	47b0      	blx	r6
	PM->CPUSEL.reg = (uint32_t)divider;
    2990:	4b14      	ldr	r3, [pc, #80]	; (29e4 <system_clock_init+0xe8>)
    2992:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2994:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2996:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    2998:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    299a:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    299c:	466b      	mov	r3, sp
    299e:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    29a0:	2306      	movs	r3, #6
    29a2:	466a      	mov	r2, sp
    29a4:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    29a6:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    29a8:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    29aa:	4669      	mov	r1, sp
    29ac:	2000      	movs	r0, #0
    29ae:	47b8      	blx	r7
    29b0:	2000      	movs	r0, #0
    29b2:	47b0      	blx	r6
#endif
}
    29b4:	b007      	add	sp, #28
    29b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29b8:	40000800 	.word	0x40000800
    29bc:	41004000 	.word	0x41004000
    29c0:	00002c21 	.word	0x00002c21
    29c4:	00806024 	.word	0x00806024
    29c8:	ff80ffff 	.word	0xff80ffff
    29cc:	000027d9 	.word	0x000027d9
    29d0:	00002855 	.word	0x00002855
    29d4:	0000279d 	.word	0x0000279d
    29d8:	000029e9 	.word	0x000029e9
    29dc:	00002a0d 	.word	0x00002a0d
    29e0:	00002ac5 	.word	0x00002ac5
    29e4:	40000400 	.word	0x40000400

000029e8 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    29e8:	4a06      	ldr	r2, [pc, #24]	; (2a04 <system_gclk_init+0x1c>)
    29ea:	6993      	ldr	r3, [r2, #24]
    29ec:	2108      	movs	r1, #8
    29ee:	430b      	orrs	r3, r1
    29f0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    29f2:	2201      	movs	r2, #1
    29f4:	4b04      	ldr	r3, [pc, #16]	; (2a08 <system_gclk_init+0x20>)
    29f6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    29f8:	0019      	movs	r1, r3
    29fa:	780b      	ldrb	r3, [r1, #0]
    29fc:	4213      	tst	r3, r2
    29fe:	d1fc      	bne.n	29fa <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2a00:	4770      	bx	lr
    2a02:	46c0      	nop			; (mov r8, r8)
    2a04:	40000400 	.word	0x40000400
    2a08:	40000c00 	.word	0x40000c00

00002a0c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2a0c:	b570      	push	{r4, r5, r6, lr}
    2a0e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2a10:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2a12:	780d      	ldrb	r5, [r1, #0]
    2a14:	022d      	lsls	r5, r5, #8
    2a16:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2a18:	784b      	ldrb	r3, [r1, #1]
    2a1a:	2b00      	cmp	r3, #0
    2a1c:	d002      	beq.n	2a24 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2a1e:	2380      	movs	r3, #128	; 0x80
    2a20:	02db      	lsls	r3, r3, #11
    2a22:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2a24:	7a4b      	ldrb	r3, [r1, #9]
    2a26:	2b00      	cmp	r3, #0
    2a28:	d002      	beq.n	2a30 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2a2a:	2380      	movs	r3, #128	; 0x80
    2a2c:	031b      	lsls	r3, r3, #12
    2a2e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2a30:	6848      	ldr	r0, [r1, #4]
    2a32:	2801      	cmp	r0, #1
    2a34:	d910      	bls.n	2a58 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2a36:	1e43      	subs	r3, r0, #1
    2a38:	4218      	tst	r0, r3
    2a3a:	d134      	bne.n	2aa6 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2a3c:	2802      	cmp	r0, #2
    2a3e:	d930      	bls.n	2aa2 <system_gclk_gen_set_config+0x96>
    2a40:	2302      	movs	r3, #2
    2a42:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2a44:	3201      	adds	r2, #1
						mask <<= 1) {
    2a46:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2a48:	4298      	cmp	r0, r3
    2a4a:	d8fb      	bhi.n	2a44 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2a4c:	0212      	lsls	r2, r2, #8
    2a4e:	4332      	orrs	r2, r6
    2a50:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2a52:	2380      	movs	r3, #128	; 0x80
    2a54:	035b      	lsls	r3, r3, #13
    2a56:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2a58:	7a0b      	ldrb	r3, [r1, #8]
    2a5a:	2b00      	cmp	r3, #0
    2a5c:	d002      	beq.n	2a64 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2a5e:	2380      	movs	r3, #128	; 0x80
    2a60:	039b      	lsls	r3, r3, #14
    2a62:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2a64:	4a13      	ldr	r2, [pc, #76]	; (2ab4 <system_gclk_gen_set_config+0xa8>)
    2a66:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2a68:	b25b      	sxtb	r3, r3
    2a6a:	2b00      	cmp	r3, #0
    2a6c:	dbfb      	blt.n	2a66 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    2a6e:	4b12      	ldr	r3, [pc, #72]	; (2ab8 <system_gclk_gen_set_config+0xac>)
    2a70:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2a72:	4b12      	ldr	r3, [pc, #72]	; (2abc <system_gclk_gen_set_config+0xb0>)
    2a74:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2a76:	4a0f      	ldr	r2, [pc, #60]	; (2ab4 <system_gclk_gen_set_config+0xa8>)
    2a78:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2a7a:	b25b      	sxtb	r3, r3
    2a7c:	2b00      	cmp	r3, #0
    2a7e:	dbfb      	blt.n	2a78 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2a80:	4b0c      	ldr	r3, [pc, #48]	; (2ab4 <system_gclk_gen_set_config+0xa8>)
    2a82:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2a84:	001a      	movs	r2, r3
    2a86:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2a88:	b25b      	sxtb	r3, r3
    2a8a:	2b00      	cmp	r3, #0
    2a8c:	dbfb      	blt.n	2a86 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2a8e:	4a09      	ldr	r2, [pc, #36]	; (2ab4 <system_gclk_gen_set_config+0xa8>)
    2a90:	6853      	ldr	r3, [r2, #4]
    2a92:	2180      	movs	r1, #128	; 0x80
    2a94:	0249      	lsls	r1, r1, #9
    2a96:	400b      	ands	r3, r1
    2a98:	431d      	orrs	r5, r3
    2a9a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    2a9c:	4b08      	ldr	r3, [pc, #32]	; (2ac0 <system_gclk_gen_set_config+0xb4>)
    2a9e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2aa0:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    2aa2:	2200      	movs	r2, #0
    2aa4:	e7d2      	b.n	2a4c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2aa6:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    2aa8:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2aaa:	2380      	movs	r3, #128	; 0x80
    2aac:	029b      	lsls	r3, r3, #10
    2aae:	431d      	orrs	r5, r3
    2ab0:	e7d2      	b.n	2a58 <system_gclk_gen_set_config+0x4c>
    2ab2:	46c0      	nop			; (mov r8, r8)
    2ab4:	40000c00 	.word	0x40000c00
    2ab8:	0000269d 	.word	0x0000269d
    2abc:	40000c08 	.word	0x40000c08
    2ac0:	000026dd 	.word	0x000026dd

00002ac4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2ac4:	b510      	push	{r4, lr}
    2ac6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2ac8:	4a0b      	ldr	r2, [pc, #44]	; (2af8 <system_gclk_gen_enable+0x34>)
    2aca:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2acc:	b25b      	sxtb	r3, r3
    2ace:	2b00      	cmp	r3, #0
    2ad0:	dbfb      	blt.n	2aca <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    2ad2:	4b0a      	ldr	r3, [pc, #40]	; (2afc <system_gclk_gen_enable+0x38>)
    2ad4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2ad6:	4b0a      	ldr	r3, [pc, #40]	; (2b00 <system_gclk_gen_enable+0x3c>)
    2ad8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2ada:	4a07      	ldr	r2, [pc, #28]	; (2af8 <system_gclk_gen_enable+0x34>)
    2adc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2ade:	b25b      	sxtb	r3, r3
    2ae0:	2b00      	cmp	r3, #0
    2ae2:	dbfb      	blt.n	2adc <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2ae4:	4a04      	ldr	r2, [pc, #16]	; (2af8 <system_gclk_gen_enable+0x34>)
    2ae6:	6851      	ldr	r1, [r2, #4]
    2ae8:	2380      	movs	r3, #128	; 0x80
    2aea:	025b      	lsls	r3, r3, #9
    2aec:	430b      	orrs	r3, r1
    2aee:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2af0:	4b04      	ldr	r3, [pc, #16]	; (2b04 <system_gclk_gen_enable+0x40>)
    2af2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2af4:	bd10      	pop	{r4, pc}
    2af6:	46c0      	nop			; (mov r8, r8)
    2af8:	40000c00 	.word	0x40000c00
    2afc:	0000269d 	.word	0x0000269d
    2b00:	40000c04 	.word	0x40000c04
    2b04:	000026dd 	.word	0x000026dd

00002b08 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2b08:	b570      	push	{r4, r5, r6, lr}
    2b0a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2b0c:	4a1a      	ldr	r2, [pc, #104]	; (2b78 <system_gclk_gen_get_hz+0x70>)
    2b0e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2b10:	b25b      	sxtb	r3, r3
    2b12:	2b00      	cmp	r3, #0
    2b14:	dbfb      	blt.n	2b0e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    2b16:	4b19      	ldr	r3, [pc, #100]	; (2b7c <system_gclk_gen_get_hz+0x74>)
    2b18:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2b1a:	4b19      	ldr	r3, [pc, #100]	; (2b80 <system_gclk_gen_get_hz+0x78>)
    2b1c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2b1e:	4a16      	ldr	r2, [pc, #88]	; (2b78 <system_gclk_gen_get_hz+0x70>)
    2b20:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2b22:	b25b      	sxtb	r3, r3
    2b24:	2b00      	cmp	r3, #0
    2b26:	dbfb      	blt.n	2b20 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2b28:	4e13      	ldr	r6, [pc, #76]	; (2b78 <system_gclk_gen_get_hz+0x70>)
    2b2a:	6870      	ldr	r0, [r6, #4]
    2b2c:	04c0      	lsls	r0, r0, #19
    2b2e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2b30:	4b14      	ldr	r3, [pc, #80]	; (2b84 <system_gclk_gen_get_hz+0x7c>)
    2b32:	4798      	blx	r3
    2b34:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2b36:	4b12      	ldr	r3, [pc, #72]	; (2b80 <system_gclk_gen_get_hz+0x78>)
    2b38:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2b3a:	6876      	ldr	r6, [r6, #4]
    2b3c:	02f6      	lsls	r6, r6, #11
    2b3e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2b40:	4b11      	ldr	r3, [pc, #68]	; (2b88 <system_gclk_gen_get_hz+0x80>)
    2b42:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2b44:	4a0c      	ldr	r2, [pc, #48]	; (2b78 <system_gclk_gen_get_hz+0x70>)
    2b46:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2b48:	b25b      	sxtb	r3, r3
    2b4a:	2b00      	cmp	r3, #0
    2b4c:	dbfb      	blt.n	2b46 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2b4e:	4b0a      	ldr	r3, [pc, #40]	; (2b78 <system_gclk_gen_get_hz+0x70>)
    2b50:	689c      	ldr	r4, [r3, #8]
    2b52:	0224      	lsls	r4, r4, #8
    2b54:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2b56:	4b0d      	ldr	r3, [pc, #52]	; (2b8c <system_gclk_gen_get_hz+0x84>)
    2b58:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2b5a:	2e00      	cmp	r6, #0
    2b5c:	d107      	bne.n	2b6e <system_gclk_gen_get_hz+0x66>
    2b5e:	2c01      	cmp	r4, #1
    2b60:	d907      	bls.n	2b72 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    2b62:	0021      	movs	r1, r4
    2b64:	0028      	movs	r0, r5
    2b66:	4b0a      	ldr	r3, [pc, #40]	; (2b90 <system_gclk_gen_get_hz+0x88>)
    2b68:	4798      	blx	r3
    2b6a:	0005      	movs	r5, r0
    2b6c:	e001      	b.n	2b72 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2b6e:	3401      	adds	r4, #1
    2b70:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    2b72:	0028      	movs	r0, r5
    2b74:	bd70      	pop	{r4, r5, r6, pc}
    2b76:	46c0      	nop			; (mov r8, r8)
    2b78:	40000c00 	.word	0x40000c00
    2b7c:	0000269d 	.word	0x0000269d
    2b80:	40000c04 	.word	0x40000c04
    2b84:	0000270d 	.word	0x0000270d
    2b88:	40000c08 	.word	0x40000c08
    2b8c:	000026dd 	.word	0x000026dd
    2b90:	0000345d 	.word	0x0000345d

00002b94 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2b94:	b510      	push	{r4, lr}
    2b96:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2b98:	4b06      	ldr	r3, [pc, #24]	; (2bb4 <system_gclk_chan_enable+0x20>)
    2b9a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2b9c:	4b06      	ldr	r3, [pc, #24]	; (2bb8 <system_gclk_chan_enable+0x24>)
    2b9e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2ba0:	4a06      	ldr	r2, [pc, #24]	; (2bbc <system_gclk_chan_enable+0x28>)
    2ba2:	8853      	ldrh	r3, [r2, #2]
    2ba4:	2180      	movs	r1, #128	; 0x80
    2ba6:	01c9      	lsls	r1, r1, #7
    2ba8:	430b      	orrs	r3, r1
    2baa:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2bac:	4b04      	ldr	r3, [pc, #16]	; (2bc0 <system_gclk_chan_enable+0x2c>)
    2bae:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2bb0:	bd10      	pop	{r4, pc}
    2bb2:	46c0      	nop			; (mov r8, r8)
    2bb4:	0000269d 	.word	0x0000269d
    2bb8:	40000c02 	.word	0x40000c02
    2bbc:	40000c00 	.word	0x40000c00
    2bc0:	000026dd 	.word	0x000026dd

00002bc4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2bc4:	b510      	push	{r4, lr}
    2bc6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2bc8:	4b0f      	ldr	r3, [pc, #60]	; (2c08 <system_gclk_chan_disable+0x44>)
    2bca:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2bcc:	4b0f      	ldr	r3, [pc, #60]	; (2c0c <system_gclk_chan_disable+0x48>)
    2bce:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2bd0:	4a0f      	ldr	r2, [pc, #60]	; (2c10 <system_gclk_chan_disable+0x4c>)
    2bd2:	8853      	ldrh	r3, [r2, #2]
    2bd4:	051b      	lsls	r3, r3, #20
    2bd6:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2bd8:	8853      	ldrh	r3, [r2, #2]
    2bda:	490e      	ldr	r1, [pc, #56]	; (2c14 <system_gclk_chan_disable+0x50>)
    2bdc:	400b      	ands	r3, r1
    2bde:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2be0:	8853      	ldrh	r3, [r2, #2]
    2be2:	490d      	ldr	r1, [pc, #52]	; (2c18 <system_gclk_chan_disable+0x54>)
    2be4:	400b      	ands	r3, r1
    2be6:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2be8:	0011      	movs	r1, r2
    2bea:	2280      	movs	r2, #128	; 0x80
    2bec:	01d2      	lsls	r2, r2, #7
    2bee:	884b      	ldrh	r3, [r1, #2]
    2bf0:	4213      	tst	r3, r2
    2bf2:	d1fc      	bne.n	2bee <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2bf4:	4906      	ldr	r1, [pc, #24]	; (2c10 <system_gclk_chan_disable+0x4c>)
    2bf6:	884a      	ldrh	r2, [r1, #2]
    2bf8:	0203      	lsls	r3, r0, #8
    2bfa:	4806      	ldr	r0, [pc, #24]	; (2c14 <system_gclk_chan_disable+0x50>)
    2bfc:	4002      	ands	r2, r0
    2bfe:	4313      	orrs	r3, r2
    2c00:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    2c02:	4b06      	ldr	r3, [pc, #24]	; (2c1c <system_gclk_chan_disable+0x58>)
    2c04:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2c06:	bd10      	pop	{r4, pc}
    2c08:	0000269d 	.word	0x0000269d
    2c0c:	40000c02 	.word	0x40000c02
    2c10:	40000c00 	.word	0x40000c00
    2c14:	fffff0ff 	.word	0xfffff0ff
    2c18:	ffffbfff 	.word	0xffffbfff
    2c1c:	000026dd 	.word	0x000026dd

00002c20 <system_gclk_chan_set_config>:
{
    2c20:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2c22:	780c      	ldrb	r4, [r1, #0]
    2c24:	0224      	lsls	r4, r4, #8
    2c26:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2c28:	4b02      	ldr	r3, [pc, #8]	; (2c34 <system_gclk_chan_set_config+0x14>)
    2c2a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2c2c:	b2a4      	uxth	r4, r4
    2c2e:	4b02      	ldr	r3, [pc, #8]	; (2c38 <system_gclk_chan_set_config+0x18>)
    2c30:	805c      	strh	r4, [r3, #2]
}
    2c32:	bd10      	pop	{r4, pc}
    2c34:	00002bc5 	.word	0x00002bc5
    2c38:	40000c00 	.word	0x40000c00

00002c3c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2c3c:	b510      	push	{r4, lr}
    2c3e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2c40:	4b06      	ldr	r3, [pc, #24]	; (2c5c <system_gclk_chan_get_hz+0x20>)
    2c42:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2c44:	4b06      	ldr	r3, [pc, #24]	; (2c60 <system_gclk_chan_get_hz+0x24>)
    2c46:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2c48:	4b06      	ldr	r3, [pc, #24]	; (2c64 <system_gclk_chan_get_hz+0x28>)
    2c4a:	885c      	ldrh	r4, [r3, #2]
    2c4c:	0524      	lsls	r4, r4, #20
    2c4e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2c50:	4b05      	ldr	r3, [pc, #20]	; (2c68 <system_gclk_chan_get_hz+0x2c>)
    2c52:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2c54:	0020      	movs	r0, r4
    2c56:	4b05      	ldr	r3, [pc, #20]	; (2c6c <system_gclk_chan_get_hz+0x30>)
    2c58:	4798      	blx	r3
}
    2c5a:	bd10      	pop	{r4, pc}
    2c5c:	0000269d 	.word	0x0000269d
    2c60:	40000c02 	.word	0x40000c02
    2c64:	40000c00 	.word	0x40000c00
    2c68:	000026dd 	.word	0x000026dd
    2c6c:	00002b09 	.word	0x00002b09

00002c70 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2c70:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2c72:	78d3      	ldrb	r3, [r2, #3]
    2c74:	2b00      	cmp	r3, #0
    2c76:	d135      	bne.n	2ce4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2c78:	7813      	ldrb	r3, [r2, #0]
    2c7a:	2b80      	cmp	r3, #128	; 0x80
    2c7c:	d029      	beq.n	2cd2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2c7e:	061b      	lsls	r3, r3, #24
    2c80:	2480      	movs	r4, #128	; 0x80
    2c82:	0264      	lsls	r4, r4, #9
    2c84:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2c86:	7854      	ldrb	r4, [r2, #1]
    2c88:	2502      	movs	r5, #2
    2c8a:	43ac      	bics	r4, r5
    2c8c:	d106      	bne.n	2c9c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2c8e:	7894      	ldrb	r4, [r2, #2]
    2c90:	2c00      	cmp	r4, #0
    2c92:	d120      	bne.n	2cd6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2c94:	2480      	movs	r4, #128	; 0x80
    2c96:	02a4      	lsls	r4, r4, #10
    2c98:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2c9a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2c9c:	7854      	ldrb	r4, [r2, #1]
    2c9e:	3c01      	subs	r4, #1
    2ca0:	2c01      	cmp	r4, #1
    2ca2:	d91c      	bls.n	2cde <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2ca4:	040d      	lsls	r5, r1, #16
    2ca6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2ca8:	24a0      	movs	r4, #160	; 0xa0
    2caa:	05e4      	lsls	r4, r4, #23
    2cac:	432c      	orrs	r4, r5
    2cae:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2cb0:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2cb2:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2cb4:	24d0      	movs	r4, #208	; 0xd0
    2cb6:	0624      	lsls	r4, r4, #24
    2cb8:	432c      	orrs	r4, r5
    2cba:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2cbc:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2cbe:	78d4      	ldrb	r4, [r2, #3]
    2cc0:	2c00      	cmp	r4, #0
    2cc2:	d122      	bne.n	2d0a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2cc4:	035b      	lsls	r3, r3, #13
    2cc6:	d51c      	bpl.n	2d02 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2cc8:	7893      	ldrb	r3, [r2, #2]
    2cca:	2b01      	cmp	r3, #1
    2ccc:	d01e      	beq.n	2d0c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2cce:	6141      	str	r1, [r0, #20]
    2cd0:	e017      	b.n	2d02 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2cd2:	2300      	movs	r3, #0
    2cd4:	e7d7      	b.n	2c86 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2cd6:	24c0      	movs	r4, #192	; 0xc0
    2cd8:	02e4      	lsls	r4, r4, #11
    2cda:	4323      	orrs	r3, r4
    2cdc:	e7dd      	b.n	2c9a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2cde:	4c0d      	ldr	r4, [pc, #52]	; (2d14 <_system_pinmux_config+0xa4>)
    2ce0:	4023      	ands	r3, r4
    2ce2:	e7df      	b.n	2ca4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2ce4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2ce6:	040c      	lsls	r4, r1, #16
    2ce8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2cea:	23a0      	movs	r3, #160	; 0xa0
    2cec:	05db      	lsls	r3, r3, #23
    2cee:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2cf0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2cf2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2cf4:	23d0      	movs	r3, #208	; 0xd0
    2cf6:	061b      	lsls	r3, r3, #24
    2cf8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2cfa:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2cfc:	78d3      	ldrb	r3, [r2, #3]
    2cfe:	2b00      	cmp	r3, #0
    2d00:	d103      	bne.n	2d0a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2d02:	7853      	ldrb	r3, [r2, #1]
    2d04:	3b01      	subs	r3, #1
    2d06:	2b01      	cmp	r3, #1
    2d08:	d902      	bls.n	2d10 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2d0a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2d0c:	6181      	str	r1, [r0, #24]
    2d0e:	e7f8      	b.n	2d02 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2d10:	6081      	str	r1, [r0, #8]
}
    2d12:	e7fa      	b.n	2d0a <_system_pinmux_config+0x9a>
    2d14:	fffbffff 	.word	0xfffbffff

00002d18 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2d18:	b510      	push	{r4, lr}
    2d1a:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2d1c:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2d1e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2d20:	2900      	cmp	r1, #0
    2d22:	d104      	bne.n	2d2e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2d24:	0943      	lsrs	r3, r0, #5
    2d26:	01db      	lsls	r3, r3, #7
    2d28:	4905      	ldr	r1, [pc, #20]	; (2d40 <system_pinmux_pin_set_config+0x28>)
    2d2a:	468c      	mov	ip, r1
    2d2c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2d2e:	241f      	movs	r4, #31
    2d30:	4020      	ands	r0, r4
    2d32:	2101      	movs	r1, #1
    2d34:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2d36:	0018      	movs	r0, r3
    2d38:	4b02      	ldr	r3, [pc, #8]	; (2d44 <system_pinmux_pin_set_config+0x2c>)
    2d3a:	4798      	blx	r3
}
    2d3c:	bd10      	pop	{r4, pc}
    2d3e:	46c0      	nop			; (mov r8, r8)
    2d40:	41004400 	.word	0x41004400
    2d44:	00002c71 	.word	0x00002c71

00002d48 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2d48:	4770      	bx	lr
	...

00002d4c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2d4c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2d4e:	4b05      	ldr	r3, [pc, #20]	; (2d64 <system_init+0x18>)
    2d50:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2d52:	4b05      	ldr	r3, [pc, #20]	; (2d68 <system_init+0x1c>)
    2d54:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2d56:	4b05      	ldr	r3, [pc, #20]	; (2d6c <system_init+0x20>)
    2d58:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2d5a:	4b05      	ldr	r3, [pc, #20]	; (2d70 <system_init+0x24>)
    2d5c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2d5e:	4b05      	ldr	r3, [pc, #20]	; (2d74 <system_init+0x28>)
    2d60:	4798      	blx	r3
}
    2d62:	bd10      	pop	{r4, pc}
    2d64:	000028fd 	.word	0x000028fd
    2d68:	00002639 	.word	0x00002639
    2d6c:	00002d49 	.word	0x00002d49
    2d70:	00000181 	.word	0x00000181
    2d74:	00002d49 	.word	0x00002d49

00002d78 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2d78:	e7fe      	b.n	2d78 <Dummy_Handler>
	...

00002d7c <Reset_Handler>:
{
    2d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    2d7e:	4a2a      	ldr	r2, [pc, #168]	; (2e28 <Reset_Handler+0xac>)
    2d80:	4b2a      	ldr	r3, [pc, #168]	; (2e2c <Reset_Handler+0xb0>)
    2d82:	429a      	cmp	r2, r3
    2d84:	d011      	beq.n	2daa <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2d86:	001a      	movs	r2, r3
    2d88:	4b29      	ldr	r3, [pc, #164]	; (2e30 <Reset_Handler+0xb4>)
    2d8a:	429a      	cmp	r2, r3
    2d8c:	d20d      	bcs.n	2daa <Reset_Handler+0x2e>
    2d8e:	4a29      	ldr	r2, [pc, #164]	; (2e34 <Reset_Handler+0xb8>)
    2d90:	3303      	adds	r3, #3
    2d92:	1a9b      	subs	r3, r3, r2
    2d94:	089b      	lsrs	r3, r3, #2
    2d96:	3301      	adds	r3, #1
    2d98:	009b      	lsls	r3, r3, #2
    2d9a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2d9c:	4823      	ldr	r0, [pc, #140]	; (2e2c <Reset_Handler+0xb0>)
    2d9e:	4922      	ldr	r1, [pc, #136]	; (2e28 <Reset_Handler+0xac>)
    2da0:	588c      	ldr	r4, [r1, r2]
    2da2:	5084      	str	r4, [r0, r2]
    2da4:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2da6:	429a      	cmp	r2, r3
    2da8:	d1fa      	bne.n	2da0 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2daa:	4a23      	ldr	r2, [pc, #140]	; (2e38 <Reset_Handler+0xbc>)
    2dac:	4b23      	ldr	r3, [pc, #140]	; (2e3c <Reset_Handler+0xc0>)
    2dae:	429a      	cmp	r2, r3
    2db0:	d20a      	bcs.n	2dc8 <Reset_Handler+0x4c>
    2db2:	43d3      	mvns	r3, r2
    2db4:	4921      	ldr	r1, [pc, #132]	; (2e3c <Reset_Handler+0xc0>)
    2db6:	185b      	adds	r3, r3, r1
    2db8:	2103      	movs	r1, #3
    2dba:	438b      	bics	r3, r1
    2dbc:	3304      	adds	r3, #4
    2dbe:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2dc0:	2100      	movs	r1, #0
    2dc2:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2dc4:	4293      	cmp	r3, r2
    2dc6:	d1fc      	bne.n	2dc2 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2dc8:	4a1d      	ldr	r2, [pc, #116]	; (2e40 <Reset_Handler+0xc4>)
    2dca:	21ff      	movs	r1, #255	; 0xff
    2dcc:	4b1d      	ldr	r3, [pc, #116]	; (2e44 <Reset_Handler+0xc8>)
    2dce:	438b      	bics	r3, r1
    2dd0:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2dd2:	39fd      	subs	r1, #253	; 0xfd
    2dd4:	2390      	movs	r3, #144	; 0x90
    2dd6:	005b      	lsls	r3, r3, #1
    2dd8:	4a1b      	ldr	r2, [pc, #108]	; (2e48 <Reset_Handler+0xcc>)
    2dda:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2ddc:	4a1b      	ldr	r2, [pc, #108]	; (2e4c <Reset_Handler+0xd0>)
    2dde:	78d3      	ldrb	r3, [r2, #3]
    2de0:	2503      	movs	r5, #3
    2de2:	43ab      	bics	r3, r5
    2de4:	2402      	movs	r4, #2
    2de6:	4323      	orrs	r3, r4
    2de8:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2dea:	78d3      	ldrb	r3, [r2, #3]
    2dec:	270c      	movs	r7, #12
    2dee:	43bb      	bics	r3, r7
    2df0:	2608      	movs	r6, #8
    2df2:	4333      	orrs	r3, r6
    2df4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2df6:	4b16      	ldr	r3, [pc, #88]	; (2e50 <Reset_Handler+0xd4>)
    2df8:	7b98      	ldrb	r0, [r3, #14]
    2dfa:	2230      	movs	r2, #48	; 0x30
    2dfc:	4390      	bics	r0, r2
    2dfe:	2220      	movs	r2, #32
    2e00:	4310      	orrs	r0, r2
    2e02:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2e04:	7b99      	ldrb	r1, [r3, #14]
    2e06:	43b9      	bics	r1, r7
    2e08:	4331      	orrs	r1, r6
    2e0a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2e0c:	7b9a      	ldrb	r2, [r3, #14]
    2e0e:	43aa      	bics	r2, r5
    2e10:	4322      	orrs	r2, r4
    2e12:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2e14:	4a0f      	ldr	r2, [pc, #60]	; (2e54 <Reset_Handler+0xd8>)
    2e16:	6853      	ldr	r3, [r2, #4]
    2e18:	2180      	movs	r1, #128	; 0x80
    2e1a:	430b      	orrs	r3, r1
    2e1c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2e1e:	4b0e      	ldr	r3, [pc, #56]	; (2e58 <Reset_Handler+0xdc>)
    2e20:	4798      	blx	r3
        main();
    2e22:	4b0e      	ldr	r3, [pc, #56]	; (2e5c <Reset_Handler+0xe0>)
    2e24:	4798      	blx	r3
    2e26:	e7fe      	b.n	2e26 <Reset_Handler+0xaa>
    2e28:	00005c18 	.word	0x00005c18
    2e2c:	20000000 	.word	0x20000000
    2e30:	2000007c 	.word	0x2000007c
    2e34:	20000004 	.word	0x20000004
    2e38:	2000007c 	.word	0x2000007c
    2e3c:	200002a4 	.word	0x200002a4
    2e40:	e000ed00 	.word	0xe000ed00
    2e44:	00000000 	.word	0x00000000
    2e48:	41007000 	.word	0x41007000
    2e4c:	41005000 	.word	0x41005000
    2e50:	41004800 	.word	0x41004800
    2e54:	41004000 	.word	0x41004000
    2e58:	00005065 	.word	0x00005065
    2e5c:	0000328d 	.word	0x0000328d

00002e60 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2e60:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2e62:	4a06      	ldr	r2, [pc, #24]	; (2e7c <_sbrk+0x1c>)
    2e64:	6812      	ldr	r2, [r2, #0]
    2e66:	2a00      	cmp	r2, #0
    2e68:	d004      	beq.n	2e74 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2e6a:	4a04      	ldr	r2, [pc, #16]	; (2e7c <_sbrk+0x1c>)
    2e6c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2e6e:	18c3      	adds	r3, r0, r3
    2e70:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2e72:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2e74:	4902      	ldr	r1, [pc, #8]	; (2e80 <_sbrk+0x20>)
    2e76:	4a01      	ldr	r2, [pc, #4]	; (2e7c <_sbrk+0x1c>)
    2e78:	6011      	str	r1, [r2, #0]
    2e7a:	e7f6      	b.n	2e6a <_sbrk+0xa>
    2e7c:	200000d8 	.word	0x200000d8
    2e80:	200022a8 	.word	0x200022a8

00002e84 <change_light_mode>:
//=============================================================================
//! \brief  Update the light struct
//=============================================================================
void change_light_mode(E_LIGHT_MODE new_mode)
{
    light_state.mode = new_mode;
    2e84:	4b01      	ldr	r3, [pc, #4]	; (2e8c <change_light_mode+0x8>)
    2e86:	7018      	strb	r0, [r3, #0]
}
    2e88:	4770      	bx	lr
    2e8a:	46c0      	nop			; (mov r8, r8)
    2e8c:	20000178 	.word	0x20000178

00002e90 <change_light_freq>:

void change_light_freq(E_LIGHT_FREQ new_freq)
{
    light_state.freq = new_freq;
    2e90:	4b01      	ldr	r3, [pc, #4]	; (2e98 <change_light_freq+0x8>)
    2e92:	7058      	strb	r0, [r3, #1]
}
    2e94:	4770      	bx	lr
    2e96:	46c0      	nop			; (mov r8, r8)
    2e98:	20000178 	.word	0x20000178

00002e9c <change_light_bright>:

void change_light_bright(uint16_t perthousand)
{
    light_state.led_max_bright = perthousand;
    2e9c:	4b01      	ldr	r3, [pc, #4]	; (2ea4 <change_light_bright+0x8>)
    2e9e:	80d8      	strh	r0, [r3, #6]
}
    2ea0:	4770      	bx	lr
    2ea2:	46c0      	nop			; (mov r8, r8)
    2ea4:	20000178 	.word	0x20000178

00002ea8 <change_light_threshold>:

void change_light_threshold(uint16_t new_threshold)
{
    light_state.low_power_threshold = new_threshold;
    2ea8:	4b01      	ldr	r3, [pc, #4]	; (2eb0 <change_light_threshold+0x8>)
    2eaa:	8058      	strh	r0, [r3, #2]
}
    2eac:	4770      	bx	lr
    2eae:	46c0      	nop			; (mov r8, r8)
    2eb0:	20000178 	.word	0x20000178

00002eb4 <enter_low_power_mode>:
    light_state.mode = new_mode;
    2eb4:	4b0a      	ldr	r3, [pc, #40]	; (2ee0 <enter_low_power_mode+0x2c>)
    2eb6:	2201      	movs	r2, #1
    2eb8:	701a      	strb	r2, [r3, #0]
    light_state.led_max_bright = perthousand;
    2eba:	21dc      	movs	r1, #220	; 0xdc
    2ebc:	31ff      	adds	r1, #255	; 0xff
    2ebe:	80d9      	strh	r1, [r3, #6]
//=============================================================================
void enter_low_power_mode()
{    
    change_light_mode(E_LIGHT_ON);
    change_light_bright(LIGHT_MAX / 2);
	light_state.led_low_power_time = LOW_POWER_LIGHT_ON_TIME;
    2ec0:	21fa      	movs	r1, #250	; 0xfa
    2ec2:	0089      	lsls	r1, r1, #2
    2ec4:	8119      	strh	r1, [r3, #8]
    
    low_power_timer = get_tick;
    2ec6:	4907      	ldr	r1, [pc, #28]	; (2ee4 <enter_low_power_mode+0x30>)
    2ec8:	4b07      	ldr	r3, [pc, #28]	; (2ee8 <enter_low_power_mode+0x34>)
    2eca:	6019      	str	r1, [r3, #0]
    
    batt_reached_low_power = true;
    2ecc:	4b07      	ldr	r3, [pc, #28]	; (2eec <enter_low_power_mode+0x38>)
    2ece:	701a      	strb	r2, [r3, #0]
	if (bt_connected)
    2ed0:	4b07      	ldr	r3, [pc, #28]	; (2ef0 <enter_low_power_mode+0x3c>)
    2ed2:	781b      	ldrb	r3, [r3, #0]
    2ed4:	2b00      	cmp	r3, #0
    2ed6:	d001      	beq.n	2edc <enter_low_power_mode+0x28>
	{
		low_power_update_app = true;
    2ed8:	4b06      	ldr	r3, [pc, #24]	; (2ef4 <enter_low_power_mode+0x40>)
    2eda:	701a      	strb	r2, [r3, #0]
	}
}
    2edc:	4770      	bx	lr
    2ede:	46c0      	nop			; (mov r8, r8)
    2ee0:	20000178 	.word	0x20000178
    2ee4:	00000be5 	.word	0x00000be5
    2ee8:	200001bc 	.word	0x200001bc
    2eec:	20000168 	.word	0x20000168
    2ef0:	200001f7 	.word	0x200001f7
    2ef4:	20000184 	.word	0x20000184

00002ef8 <exit_low_power_mode>:

void exit_low_power_mode()
{
    //change_light_bright(LIGHT_MAX);
    
    batt_reached_low_power = false;
    2ef8:	2200      	movs	r2, #0
    2efa:	4b05      	ldr	r3, [pc, #20]	; (2f10 <exit_low_power_mode+0x18>)
    2efc:	701a      	strb	r2, [r3, #0]
    if (bt_connected)
    2efe:	4b05      	ldr	r3, [pc, #20]	; (2f14 <exit_low_power_mode+0x1c>)
    2f00:	781b      	ldrb	r3, [r3, #0]
    2f02:	2b00      	cmp	r3, #0
    2f04:	d002      	beq.n	2f0c <exit_low_power_mode+0x14>
    {
	    low_power_update_app = true;
    2f06:	3201      	adds	r2, #1
    2f08:	4b03      	ldr	r3, [pc, #12]	; (2f18 <exit_low_power_mode+0x20>)
    2f0a:	701a      	strb	r2, [r3, #0]
    }
}
    2f0c:	4770      	bx	lr
    2f0e:	46c0      	nop			; (mov r8, r8)
    2f10:	20000168 	.word	0x20000168
    2f14:	200001f7 	.word	0x200001f7
    2f18:	20000184 	.word	0x20000184

00002f1c <manage_low_power_light>:

void manage_low_power_light()
{    
    2f1c:	b510      	push	{r4, lr}
    if (tick_elapsed(low_power_timer) % light_state.led_low_power_time == 0)
    2f1e:	4b16      	ldr	r3, [pc, #88]	; (2f78 <manage_low_power_light+0x5c>)
    2f20:	6818      	ldr	r0, [r3, #0]
    2f22:	4b16      	ldr	r3, [pc, #88]	; (2f7c <manage_low_power_light+0x60>)
    2f24:	4798      	blx	r3
    2f26:	4b16      	ldr	r3, [pc, #88]	; (2f80 <manage_low_power_light+0x64>)
    2f28:	8919      	ldrh	r1, [r3, #8]
    2f2a:	4b16      	ldr	r3, [pc, #88]	; (2f84 <manage_low_power_light+0x68>)
    2f2c:	4798      	blx	r3
    2f2e:	2900      	cmp	r1, #0
    2f30:	d10c      	bne.n	2f4c <manage_low_power_light+0x30>
    {        
        if (light_state.mode == E_LIGHT_ON)
    2f32:	4b13      	ldr	r3, [pc, #76]	; (2f80 <manage_low_power_light+0x64>)
    2f34:	781b      	ldrb	r3, [r3, #0]
    2f36:	2b01      	cmp	r3, #1
    2f38:	d009      	beq.n	2f4e <manage_low_power_light+0x32>
			change_light_freq(E_LIGHT_FAST);
			change_light_bright(LIGHT_MAX / 2);
			light_state.led_rising = false;
			light_state.led_low_power_time = LOW_POWER_LIGHT_STROBE_TIME;
        }
        else if (light_state.mode == E_LIGHT_STROBE)
    2f3a:	2b03      	cmp	r3, #3
    2f3c:	d015      	beq.n	2f6a <manage_low_power_light+0x4e>
        {
            change_light_mode(E_LIGHT_ON);
			light_state.led_low_power_time = LOW_POWER_LIGHT_ON_TIME;
        }
		
		low_power_timer = get_tick();
    2f3e:	4b12      	ldr	r3, [pc, #72]	; (2f88 <manage_low_power_light+0x6c>)
    2f40:	4798      	blx	r3
    2f42:	4b0d      	ldr	r3, [pc, #52]	; (2f78 <manage_low_power_light+0x5c>)
    2f44:	6018      	str	r0, [r3, #0]
		delay_ms(1);
    2f46:	2001      	movs	r0, #1
    2f48:	4b10      	ldr	r3, [pc, #64]	; (2f8c <manage_low_power_light+0x70>)
    2f4a:	4798      	blx	r3
    }
}
    2f4c:	bd10      	pop	{r4, pc}
    light_state.mode = new_mode;
    2f4e:	4b0c      	ldr	r3, [pc, #48]	; (2f80 <manage_low_power_light+0x64>)
    2f50:	2203      	movs	r2, #3
    2f52:	701a      	strb	r2, [r3, #0]
    light_state.freq = new_freq;
    2f54:	3202      	adds	r2, #2
    2f56:	705a      	strb	r2, [r3, #1]
    light_state.led_max_bright = perthousand;
    2f58:	22dc      	movs	r2, #220	; 0xdc
    2f5a:	32ff      	adds	r2, #255	; 0xff
    2f5c:	80da      	strh	r2, [r3, #6]
			light_state.led_rising = false;
    2f5e:	2200      	movs	r2, #0
    2f60:	729a      	strb	r2, [r3, #10]
			light_state.led_low_power_time = LOW_POWER_LIGHT_STROBE_TIME;
    2f62:	32f5      	adds	r2, #245	; 0xf5
    2f64:	32ff      	adds	r2, #255	; 0xff
    2f66:	811a      	strh	r2, [r3, #8]
    2f68:	e7e9      	b.n	2f3e <manage_low_power_light+0x22>
    light_state.mode = new_mode;
    2f6a:	4b05      	ldr	r3, [pc, #20]	; (2f80 <manage_low_power_light+0x64>)
    2f6c:	2201      	movs	r2, #1
    2f6e:	701a      	strb	r2, [r3, #0]
			light_state.led_low_power_time = LOW_POWER_LIGHT_ON_TIME;
    2f70:	22fa      	movs	r2, #250	; 0xfa
    2f72:	0092      	lsls	r2, r2, #2
    2f74:	811a      	strh	r2, [r3, #8]
    2f76:	e7e2      	b.n	2f3e <manage_low_power_light+0x22>
    2f78:	200001bc 	.word	0x200001bc
    2f7c:	00000bf1 	.word	0x00000bf1
    2f80:	20000178 	.word	0x20000178
    2f84:	00003569 	.word	0x00003569
    2f88:	00000be5 	.word	0x00000be5
    2f8c:	00000579 	.word	0x00000579

00002f90 <update_bright>:
//=============================================================================
bool update_bright()
{   
    bool cycle_complete = false;
         
    if (light_state.led_rising)
    2f90:	4b0f      	ldr	r3, [pc, #60]	; (2fd0 <update_bright+0x40>)
    2f92:	7a98      	ldrb	r0, [r3, #10]
    2f94:	2800      	cmp	r0, #0
    2f96:	d00c      	beq.n	2fb2 <update_bright+0x22>
    {
        light_state.led_bright++;
    2f98:	001a      	movs	r2, r3
    2f9a:	889b      	ldrh	r3, [r3, #4]
    2f9c:	3301      	adds	r3, #1
    2f9e:	b29b      	uxth	r3, r3
    2fa0:	8093      	strh	r3, [r2, #4]
        
        if (light_state.led_bright >= light_state.led_max_bright-1)
    2fa2:	88d2      	ldrh	r2, [r2, #6]
    2fa4:	3a01      	subs	r2, #1
    2fa6:	4293      	cmp	r3, r2
    2fa8:	db0f      	blt.n	2fca <update_bright+0x3a>
        {
            light_state.led_rising = false;
    2faa:	2200      	movs	r2, #0
    2fac:	4b08      	ldr	r3, [pc, #32]	; (2fd0 <update_bright+0x40>)
    2fae:	729a      	strb	r2, [r3, #10]
    2fb0:	e00a      	b.n	2fc8 <update_bright+0x38>
            cycle_complete = true;
        }
    }
    else
    {
        light_state.led_bright--;
    2fb2:	4a07      	ldr	r2, [pc, #28]	; (2fd0 <update_bright+0x40>)
    2fb4:	8893      	ldrh	r3, [r2, #4]
    2fb6:	3b01      	subs	r3, #1
    2fb8:	b29b      	uxth	r3, r3
    2fba:	8093      	strh	r3, [r2, #4]
        
        if (light_state.led_bright <= LIGHT_MIN-1)
    2fbc:	2b63      	cmp	r3, #99	; 0x63
    2fbe:	d803      	bhi.n	2fc8 <update_bright+0x38>
        {
            light_state.led_rising = true;
    2fc0:	2201      	movs	r2, #1
    2fc2:	4b03      	ldr	r3, [pc, #12]	; (2fd0 <update_bright+0x40>)
    2fc4:	729a      	strb	r2, [r3, #10]
            cycle_complete = true;
    2fc6:	2001      	movs	r0, #1
        }
    }
    
    return cycle_complete;
}
    2fc8:	4770      	bx	lr
    bool cycle_complete = false;
    2fca:	2000      	movs	r0, #0
    2fcc:	e7fc      	b.n	2fc8 <update_bright+0x38>
    2fce:	46c0      	nop			; (mov r8, r8)
    2fd0:	20000178 	.word	0x20000178

00002fd4 <turn_lights>:
//=============================================================================
//! \brief Turn ON/OFF the LED Stripe
//! \param[in] bool on The on/off - TRUE = ON | FALSE = OFF
//=============================================================================
void turn_lights(bool on)
{
    2fd4:	b510      	push	{r4, lr}
    if (on)
    2fd6:	2800      	cmp	r0, #0
    2fd8:	d103      	bne.n	2fe2 <turn_lights+0xe>
    {
        set_led_bright_perthousand(light_state.led_max_bright);
    }
    else
    {
        set_led_bright_perthousand(0);
    2fda:	2000      	movs	r0, #0
    2fdc:	4b03      	ldr	r3, [pc, #12]	; (2fec <turn_lights+0x18>)
    2fde:	4798      	blx	r3
    }
}
    2fe0:	bd10      	pop	{r4, pc}
        set_led_bright_perthousand(light_state.led_max_bright);
    2fe2:	4b03      	ldr	r3, [pc, #12]	; (2ff0 <turn_lights+0x1c>)
    2fe4:	88d8      	ldrh	r0, [r3, #6]
    2fe6:	4b01      	ldr	r3, [pc, #4]	; (2fec <turn_lights+0x18>)
    2fe8:	4798      	blx	r3
    2fea:	e7f9      	b.n	2fe0 <turn_lights+0xc>
    2fec:	000009a9 	.word	0x000009a9
    2ff0:	20000178 	.word	0x20000178

00002ff4 <drive_light>:
{
    2ff4:	b510      	push	{r4, lr}
    if (light_state.mode == E_LIGHT_ON)
    2ff6:	4b18      	ldr	r3, [pc, #96]	; (3058 <drive_light+0x64>)
    2ff8:	781b      	ldrb	r3, [r3, #0]
    2ffa:	2b01      	cmp	r3, #1
    2ffc:	d01e      	beq.n	303c <drive_light+0x48>
    else if (light_state.mode == E_LIGHT_OFF)
    2ffe:	2b00      	cmp	r3, #0
    3000:	d020      	beq.n	3044 <drive_light+0x50>
        if (tick_elapsed(led_timer) % (light_state.freq * 5) == 0)
    3002:	4b16      	ldr	r3, [pc, #88]	; (305c <drive_light+0x68>)
    3004:	6818      	ldr	r0, [r3, #0]
    3006:	4b16      	ldr	r3, [pc, #88]	; (3060 <drive_light+0x6c>)
    3008:	4798      	blx	r3
    300a:	4b13      	ldr	r3, [pc, #76]	; (3058 <drive_light+0x64>)
    300c:	785b      	ldrb	r3, [r3, #1]
    300e:	0099      	lsls	r1, r3, #2
    3010:	18c9      	adds	r1, r1, r3
    3012:	4b14      	ldr	r3, [pc, #80]	; (3064 <drive_light+0x70>)
    3014:	4798      	blx	r3
    3016:	2900      	cmp	r1, #0
    3018:	d117      	bne.n	304a <drive_light+0x56>
            led_timer = get_tick();
    301a:	4b13      	ldr	r3, [pc, #76]	; (3068 <drive_light+0x74>)
    301c:	4798      	blx	r3
    301e:	4b0f      	ldr	r3, [pc, #60]	; (305c <drive_light+0x68>)
    3020:	6018      	str	r0, [r3, #0]
            if (light_state.mode == E_LIGHT_FADE)
    3022:	4b0d      	ldr	r3, [pc, #52]	; (3058 <drive_light+0x64>)
    3024:	781b      	ldrb	r3, [r3, #0]
    3026:	2b02      	cmp	r3, #2
    3028:	d010      	beq.n	304c <drive_light+0x58>
            if (update_bright())
    302a:	4b10      	ldr	r3, [pc, #64]	; (306c <drive_light+0x78>)
    302c:	4798      	blx	r3
    302e:	2800      	cmp	r0, #0
    3030:	d00b      	beq.n	304a <drive_light+0x56>
                turn_lights(light_state.led_rising);
    3032:	4b09      	ldr	r3, [pc, #36]	; (3058 <drive_light+0x64>)
    3034:	7a98      	ldrb	r0, [r3, #10]
    3036:	4b0e      	ldr	r3, [pc, #56]	; (3070 <drive_light+0x7c>)
    3038:	4798      	blx	r3
}
    303a:	e006      	b.n	304a <drive_light+0x56>
        turn_lights(true);
    303c:	2001      	movs	r0, #1
    303e:	4b0c      	ldr	r3, [pc, #48]	; (3070 <drive_light+0x7c>)
    3040:	4798      	blx	r3
    3042:	e002      	b.n	304a <drive_light+0x56>
        turn_lights(false);
    3044:	2000      	movs	r0, #0
    3046:	4b0a      	ldr	r3, [pc, #40]	; (3070 <drive_light+0x7c>)
    3048:	4798      	blx	r3
}
    304a:	bd10      	pop	{r4, pc}
                set_led_bright_perthousand(light_state.led_bright);
    304c:	4b02      	ldr	r3, [pc, #8]	; (3058 <drive_light+0x64>)
    304e:	8898      	ldrh	r0, [r3, #4]
    3050:	4b08      	ldr	r3, [pc, #32]	; (3074 <drive_light+0x80>)
    3052:	4798      	blx	r3
    3054:	e7e9      	b.n	302a <drive_light+0x36>
    3056:	46c0      	nop			; (mov r8, r8)
    3058:	20000178 	.word	0x20000178
    305c:	200001c4 	.word	0x200001c4
    3060:	00000bf1 	.word	0x00000bf1
    3064:	00003569 	.word	0x00003569
    3068:	00000be5 	.word	0x00000be5
    306c:	00002f91 	.word	0x00002f91
    3070:	00002fd5 	.word	0x00002fd5
    3074:	000009a9 	.word	0x000009a9

00003078 <bt_poll_check>:
//=============================================================================
void bt_poll_check()
{
    //poll_requested turns false into OCTO_USART.c file
    //If it stills true, the board didn't received the response
    if (poll_requested) 
    3078:	4b0a      	ldr	r3, [pc, #40]	; (30a4 <bt_poll_check+0x2c>)
    307a:	781b      	ldrb	r3, [r3, #0]
    307c:	2b00      	cmp	r3, #0
    307e:	d103      	bne.n	3088 <bt_poll_check+0x10>
        port_pin_toggle_output_level(LED_RED_PIN);
        port_pin_toggle_output_level(LED_GREEN_PIN);
    }
    else 
    {
        poll_requested = true;
    3080:	2201      	movs	r2, #1
    3082:	4b08      	ldr	r3, [pc, #32]	; (30a4 <bt_poll_check+0x2c>)
    3084:	701a      	strb	r2, [r3, #0]
    }
}
    3086:	4770      	bx	lr
        bt_connected = false;
    3088:	2300      	movs	r3, #0
    308a:	4a07      	ldr	r2, [pc, #28]	; (30a8 <bt_poll_check+0x30>)
    308c:	7013      	strb	r3, [r2, #0]
        poll_requested = false;
    308e:	4a05      	ldr	r2, [pc, #20]	; (30a4 <bt_poll_check+0x2c>)
    3090:	7013      	strb	r3, [r2, #0]
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    3092:	4b06      	ldr	r3, [pc, #24]	; (30ac <bt_poll_check+0x34>)
    3094:	2280      	movs	r2, #128	; 0x80
    3096:	01d2      	lsls	r2, r2, #7
    3098:	61da      	str	r2, [r3, #28]
    309a:	2280      	movs	r2, #128	; 0x80
    309c:	0212      	lsls	r2, r2, #8
    309e:	61da      	str	r2, [r3, #28]
    30a0:	e7f1      	b.n	3086 <bt_poll_check+0xe>
    30a2:	46c0      	nop			; (mov r8, r8)
    30a4:	200001cc 	.word	0x200001cc
    30a8:	200001f7 	.word	0x200001f7
    30ac:	41004400 	.word	0x41004400

000030b0 <get_battery_percent>:

//=============================================================================
//! \brief Get the Battery info
//=============================================================================
uint32_t get_battery_percent()
{   
    30b0:	b500      	push	{lr}
    30b2:	b083      	sub	sp, #12
    uint32_t adc_reading = 0, reading = 0;
    30b4:	2300      	movs	r3, #0
    30b6:	9301      	str	r3, [sp, #4]
    30b8:	9300      	str	r3, [sp, #0]
    uint8_t batt_value = 0;
    
    turn_off_adc();
    30ba:	4b19      	ldr	r3, [pc, #100]	; (3120 <get_battery_percent+0x70>)
    30bc:	4798      	blx	r3
    configure_adc_VMPPT();
    30be:	4b19      	ldr	r3, [pc, #100]	; (3124 <get_battery_percent+0x74>)
    30c0:	4798      	blx	r3
    
    get_value_VMPPT(&adc_reading, &reading);
    30c2:	4669      	mov	r1, sp
    30c4:	a801      	add	r0, sp, #4
    30c6:	4b18      	ldr	r3, [pc, #96]	; (3128 <get_battery_percent+0x78>)
    30c8:	4798      	blx	r3
    
    if (reading > BATT_MAX)
    30ca:	4b18      	ldr	r3, [pc, #96]	; (312c <get_battery_percent+0x7c>)
    30cc:	9a00      	ldr	r2, [sp, #0]
    30ce:	429a      	cmp	r2, r3
    30d0:	d913      	bls.n	30fa <get_battery_percent+0x4a>
    {
        if (!batt_reached_max)
    30d2:	4b17      	ldr	r3, [pc, #92]	; (3130 <get_battery_percent+0x80>)
    30d4:	781b      	ldrb	r3, [r3, #0]
    30d6:	2b00      	cmp	r3, #0
    30d8:	d002      	beq.n	30e0 <get_battery_percent+0x30>
        }
    }
    
    
    return reading;
}
    30da:	9800      	ldr	r0, [sp, #0]
    30dc:	b003      	add	sp, #12
    30de:	bd00      	pop	{pc}
            batt_reached_max = true;
    30e0:	3301      	adds	r3, #1
    30e2:	4a13      	ldr	r2, [pc, #76]	; (3130 <get_battery_percent+0x80>)
    30e4:	7013      	strb	r3, [r2, #0]
            pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    30e6:	4913      	ldr	r1, [pc, #76]	; (3134 <get_battery_percent+0x84>)
    30e8:	700b      	strb	r3, [r1, #0]
            port_pin_set_config(GAUGE_CC_ENABLE_PIN, &pin_conf);
    30ea:	200a      	movs	r0, #10
    30ec:	4b12      	ldr	r3, [pc, #72]	; (3138 <get_battery_percent+0x88>)
    30ee:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    30f0:	2280      	movs	r2, #128	; 0x80
    30f2:	00d2      	lsls	r2, r2, #3
    30f4:	4b11      	ldr	r3, [pc, #68]	; (313c <get_battery_percent+0x8c>)
    30f6:	619a      	str	r2, [r3, #24]
    30f8:	e7ef      	b.n	30da <get_battery_percent+0x2a>
        if (batt_reached_max)
    30fa:	4b0d      	ldr	r3, [pc, #52]	; (3130 <get_battery_percent+0x80>)
    30fc:	781b      	ldrb	r3, [r3, #0]
    30fe:	2b00      	cmp	r3, #0
    3100:	d0eb      	beq.n	30da <get_battery_percent+0x2a>
            batt_reached_max = false;
    3102:	2200      	movs	r2, #0
    3104:	4b0a      	ldr	r3, [pc, #40]	; (3130 <get_battery_percent+0x80>)
    3106:	701a      	strb	r2, [r3, #0]
            pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    3108:	490a      	ldr	r1, [pc, #40]	; (3134 <get_battery_percent+0x84>)
    310a:	2301      	movs	r3, #1
    310c:	700b      	strb	r3, [r1, #0]
            port_pin_set_config(GAUGE_CC_ENABLE_PIN, &pin_conf);
    310e:	200a      	movs	r0, #10
    3110:	4b09      	ldr	r3, [pc, #36]	; (3138 <get_battery_percent+0x88>)
    3112:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    3114:	2280      	movs	r2, #128	; 0x80
    3116:	00d2      	lsls	r2, r2, #3
    3118:	4b08      	ldr	r3, [pc, #32]	; (313c <get_battery_percent+0x8c>)
    311a:	615a      	str	r2, [r3, #20]
    311c:	e7dd      	b.n	30da <get_battery_percent+0x2a>
    311e:	46c0      	nop			; (mov r8, r8)
    3120:	000008a5 	.word	0x000008a5
    3124:	00000845 	.word	0x00000845
    3128:	000008d9 	.word	0x000008d9
    312c:	000010f4 	.word	0x000010f4
    3130:	20000174 	.word	0x20000174
    3134:	200001f4 	.word	0x200001f4
    3138:	00001325 	.word	0x00001325
    313c:	41004400 	.word	0x41004400

00003140 <get_gauge_percent>:

//=============================================================================
//! \brief Get the Gas Gauge's Battery percent info
//=============================================================================
uint32_t get_gauge_percent()
{
    3140:	b500      	push	{lr}
    3142:	b083      	sub	sp, #12
    uint32_t i2c_reading = 0, percent = 0;
    3144:	2300      	movs	r3, #0
    3146:	9301      	str	r3, [sp, #4]
    3148:	9300      	str	r3, [sp, #0]
    
    gas_gauge_read(&i2c_reading, &percent);
    314a:	4669      	mov	r1, sp
    314c:	a801      	add	r0, sp, #4
    314e:	4b02      	ldr	r3, [pc, #8]	; (3158 <get_gauge_percent+0x18>)
    3150:	4798      	blx	r3
    
    return percent;
    3152:	9800      	ldr	r0, [sp, #0]
    3154:	b003      	add	sp, #12
    3156:	bd00      	pop	{pc}
    3158:	00000b15 	.word	0x00000b15

0000315c <configure_OCTO_peripheral>:
{
    315c:	b570      	push	{r4, r5, r6, lr}
    315e:	b082      	sub	sp, #8
    delay_init();
    3160:	4b2c      	ldr	r3, [pc, #176]	; (3214 <configure_OCTO_peripheral+0xb8>)
    3162:	4798      	blx	r3
	cpu_irq_enable();
    3164:	2501      	movs	r5, #1
    3166:	4b2c      	ldr	r3, [pc, #176]	; (3218 <configure_OCTO_peripheral+0xbc>)
    3168:	701d      	strb	r5, [r3, #0]
    316a:	f3bf 8f5f 	dmb	sy
    316e:	b662      	cpsie	i
	port_base->OUTTGL.reg = pin_mask;
    3170:	2280      	movs	r2, #128	; 0x80
    3172:	0212      	lsls	r2, r2, #8
    3174:	4b29      	ldr	r3, [pc, #164]	; (321c <configure_OCTO_peripheral+0xc0>)
    3176:	61da      	str	r2, [r3, #28]
	battery_level = 0;
    3178:	4e29      	ldr	r6, [pc, #164]	; (3220 <configure_OCTO_peripheral+0xc4>)
    317a:	2400      	movs	r4, #0
    317c:	6034      	str	r4, [r6, #0]
	bcap_touch_counter = 0;
    317e:	4b29      	ldr	r3, [pc, #164]	; (3224 <configure_OCTO_peripheral+0xc8>)
    3180:	601c      	str	r4, [r3, #0]
	bcap_notouch_counter = 0;
    3182:	4b29      	ldr	r3, [pc, #164]	; (3228 <configure_OCTO_peripheral+0xcc>)
    3184:	601c      	str	r4, [r3, #0]
	bcap_low = 0;
    3186:	4b29      	ldr	r3, [pc, #164]	; (322c <configure_OCTO_peripheral+0xd0>)
    3188:	601c      	str	r4, [r3, #0]
	bcap_high = 0x000FFFFF;
    318a:	4a29      	ldr	r2, [pc, #164]	; (3230 <configure_OCTO_peripheral+0xd4>)
    318c:	4b29      	ldr	r3, [pc, #164]	; (3234 <configure_OCTO_peripheral+0xd8>)
    318e:	601a      	str	r2, [r3, #0]
	bcap_limit_temp = 0;
    3190:	4b29      	ldr	r3, [pc, #164]	; (3238 <configure_OCTO_peripheral+0xdc>)
    3192:	601c      	str	r4, [r3, #0]
	bcap_calibrate_counter = 0;
    3194:	4b29      	ldr	r3, [pc, #164]	; (323c <configure_OCTO_peripheral+0xe0>)
    3196:	601c      	str	r4, [r3, #0]
	low_power_update_app = false;
    3198:	4b29      	ldr	r3, [pc, #164]	; (3240 <configure_OCTO_peripheral+0xe4>)
    319a:	701c      	strb	r4, [r3, #0]
	bcap_enable = true;
    319c:	4b29      	ldr	r3, [pc, #164]	; (3244 <configure_OCTO_peripheral+0xe8>)
    319e:	701d      	strb	r5, [r3, #0]
	bcap_update_app = false;
    31a0:	4b29      	ldr	r3, [pc, #164]	; (3248 <configure_OCTO_peripheral+0xec>)
    31a2:	701c      	strb	r4, [r3, #0]
	batt_reached_max = false;
    31a4:	4b29      	ldr	r3, [pc, #164]	; (324c <configure_OCTO_peripheral+0xf0>)
    31a6:	701c      	strb	r4, [r3, #0]
	batt_reached_low_power = true;	//If starts as false it doesn't work :)
    31a8:	4b29      	ldr	r3, [pc, #164]	; (3250 <configure_OCTO_peripheral+0xf4>)
    31aa:	701d      	strb	r5, [r3, #0]
	sos_mode = false;
    31ac:	4b29      	ldr	r3, [pc, #164]	; (3254 <configure_OCTO_peripheral+0xf8>)
    31ae:	701c      	strb	r4, [r3, #0]
	activated = false;
    31b0:	4b29      	ldr	r3, [pc, #164]	; (3258 <configure_OCTO_peripheral+0xfc>)
    31b2:	701c      	strb	r4, [r3, #0]
    configure_usart();
    31b4:	4b29      	ldr	r3, [pc, #164]	; (325c <configure_OCTO_peripheral+0x100>)
    31b6:	4798      	blx	r3
    configure_usart_callbacks();
    31b8:	4b29      	ldr	r3, [pc, #164]	; (3260 <configure_OCTO_peripheral+0x104>)
    31ba:	4798      	blx	r3
    configure_dac();
    31bc:	4b29      	ldr	r3, [pc, #164]	; (3264 <configure_OCTO_peripheral+0x108>)
    31be:	4798      	blx	r3
    light_bcap_previous_mode = E_LIGHT_ON;
    31c0:	4b29      	ldr	r3, [pc, #164]	; (3268 <configure_OCTO_peripheral+0x10c>)
    31c2:	701d      	strb	r5, [r3, #0]
    light_state.mode = E_LIGHT_OFF;
    31c4:	4b29      	ldr	r3, [pc, #164]	; (326c <configure_OCTO_peripheral+0x110>)
    31c6:	701c      	strb	r4, [r3, #0]
    light_state.freq = E_LIGHT_MEDIUM;
    31c8:	2203      	movs	r2, #3
    31ca:	705a      	strb	r2, [r3, #1]
    light_state.low_power_threshold = 10;
    31cc:	3207      	adds	r2, #7
    31ce:	805a      	strh	r2, [r3, #2]
    light_state.led_rising = false;
    31d0:	729c      	strb	r4, [r3, #10]
    light_state.led_bright = LIGHT_MIN;
    31d2:	325a      	adds	r2, #90	; 0x5a
    31d4:	809a      	strh	r2, [r3, #4]
    light_state.led_max_bright = LIGHT_MAX/2;
    31d6:	22dc      	movs	r2, #220	; 0xdc
    31d8:	32ff      	adds	r2, #255	; 0xff
    31da:	80da      	strh	r2, [r3, #6]
	light_state.led_low_power_time = LOW_POWER_LIGHT_ON_TIME;
    31dc:	22fa      	movs	r2, #250	; 0xfa
    31de:	0092      	lsls	r2, r2, #2
    31e0:	811a      	strh	r2, [r3, #8]
    configure_rtc_count();
    31e2:	4b23      	ldr	r3, [pc, #140]	; (3270 <configure_OCTO_peripheral+0x114>)
    31e4:	4798      	blx	r3
    uint32_t adc_reading = 0, reading = 0;
    31e6:	9401      	str	r4, [sp, #4]
    31e8:	9400      	str	r4, [sp, #0]
    configure_adc_VMPPT();
    31ea:	4b22      	ldr	r3, [pc, #136]	; (3274 <configure_OCTO_peripheral+0x118>)
    31ec:	4798      	blx	r3
    get_value_VMPPT(&adc_reading, &reading);
    31ee:	4669      	mov	r1, sp
    31f0:	a801      	add	r0, sp, #4
    31f2:	4b21      	ldr	r3, [pc, #132]	; (3278 <configure_OCTO_peripheral+0x11c>)
    31f4:	4798      	blx	r3
	battery_level = get_gauge_percent();
    31f6:	4b21      	ldr	r3, [pc, #132]	; (327c <configure_OCTO_peripheral+0x120>)
    31f8:	4798      	blx	r3
    31fa:	6030      	str	r0, [r6, #0]
	config->direction  = PORT_PIN_DIR_INPUT;
    31fc:	4b20      	ldr	r3, [pc, #128]	; (3280 <configure_OCTO_peripheral+0x124>)
    31fe:	701c      	strb	r4, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3200:	705d      	strb	r5, [r3, #1]
	config->powersave  = false;
    3202:	709c      	strb	r4, [r3, #2]
    configure_gas_gauge(battery_level);
    3204:	4b1f      	ldr	r3, [pc, #124]	; (3284 <configure_OCTO_peripheral+0x128>)
    3206:	4798      	blx	r3
    if (gas_gauge_read(&adc_reading, &reading))
    3208:	4669      	mov	r1, sp
    320a:	a801      	add	r0, sp, #4
    320c:	4b1e      	ldr	r3, [pc, #120]	; (3288 <configure_OCTO_peripheral+0x12c>)
    320e:	4798      	blx	r3
}
    3210:	b002      	add	sp, #8
    3212:	bd70      	pop	{r4, r5, r6, pc}
    3214:	00000539 	.word	0x00000539
    3218:	20000014 	.word	0x20000014
    321c:	41004400 	.word	0x41004400
    3220:	20000170 	.word	0x20000170
    3224:	2000012c 	.word	0x2000012c
    3228:	200001ec 	.word	0x200001ec
    322c:	200001f8 	.word	0x200001f8
    3230:	000fffff 	.word	0x000fffff
    3234:	20000164 	.word	0x20000164
    3238:	2000016c 	.word	0x2000016c
    323c:	200001c8 	.word	0x200001c8
    3240:	20000184 	.word	0x20000184
    3244:	20000129 	.word	0x20000129
    3248:	200001cd 	.word	0x200001cd
    324c:	20000174 	.word	0x20000174
    3250:	20000168 	.word	0x20000168
    3254:	200001c1 	.word	0x200001c1
    3258:	20000169 	.word	0x20000169
    325c:	00000225 	.word	0x00000225
    3260:	000002f9 	.word	0x000002f9
    3264:	00000971 	.word	0x00000971
    3268:	20000128 	.word	0x20000128
    326c:	20000178 	.word	0x20000178
    3270:	00000b81 	.word	0x00000b81
    3274:	00000845 	.word	0x00000845
    3278:	000008d9 	.word	0x000008d9
    327c:	00003141 	.word	0x00003141
    3280:	200001f4 	.word	0x200001f4
    3284:	00000a61 	.word	0x00000a61
    3288:	00000b15 	.word	0x00000b15

0000328c <main>:
{
    328c:	b570      	push	{r4, r5, r6, lr}
    328e:	b082      	sub	sp, #8
    system_init();
    3290:	4b53      	ldr	r3, [pc, #332]	; (33e0 <main+0x154>)
    3292:	4798      	blx	r3
	configure_OCTO_peripheral();
    3294:	4b53      	ldr	r3, [pc, #332]	; (33e4 <main+0x158>)
    3296:	4798      	blx	r3
        drive_light();
    3298:	4e53      	ldr	r6, [pc, #332]	; (33e8 <main+0x15c>)
        bt_usart_receive_job();
    329a:	4d54      	ldr	r5, [pc, #336]	; (33ec <main+0x160>)
        if (batt_reached_low_power)
    329c:	4c54      	ldr	r4, [pc, #336]	; (33f0 <main+0x164>)
    329e:	e02c      	b.n	32fa <main+0x6e>
            manage_low_power_light();
    32a0:	4b54      	ldr	r3, [pc, #336]	; (33f4 <main+0x168>)
    32a2:	4798      	blx	r3
    32a4:	e02e      	b.n	3304 <main+0x78>
                    enter_low_power_mode();
    32a6:	4b54      	ldr	r3, [pc, #336]	; (33f8 <main+0x16c>)
    32a8:	4798      	blx	r3
    32aa:	e048      	b.n	333e <main+0xb2>
            else if (batt_reached_low_power)
    32ac:	4b50      	ldr	r3, [pc, #320]	; (33f0 <main+0x164>)
    32ae:	781b      	ldrb	r3, [r3, #0]
    32b0:	2b00      	cmp	r3, #0
    32b2:	d044      	beq.n	333e <main+0xb2>
                exit_low_power_mode();
    32b4:	4b51      	ldr	r3, [pc, #324]	; (33fc <main+0x170>)
    32b6:	4798      	blx	r3
    32b8:	e041      	b.n	333e <main+0xb2>
                    low_power_update_app = false;
    32ba:	2200      	movs	r2, #0
    32bc:	4b50      	ldr	r3, [pc, #320]	; (3400 <main+0x174>)
    32be:	701a      	strb	r2, [r3, #0]
                    sprintf(light_update, "<U;P=%1u;>", batt_reached_low_power);
    32c0:	4b4b      	ldr	r3, [pc, #300]	; (33f0 <main+0x164>)
    32c2:	781a      	ldrb	r2, [r3, #0]
    32c4:	494f      	ldr	r1, [pc, #316]	; (3404 <main+0x178>)
    32c6:	4668      	mov	r0, sp
    32c8:	4b4f      	ldr	r3, [pc, #316]	; (3408 <main+0x17c>)
    32ca:	4798      	blx	r3
                    bt_usart_write_job(light_update, 8);
    32cc:	2108      	movs	r1, #8
    32ce:	4668      	mov	r0, sp
    32d0:	4b4e      	ldr	r3, [pc, #312]	; (340c <main+0x180>)
    32d2:	4798      	blx	r3
    32d4:	e00b      	b.n	32ee <main+0x62>
                    get_battery_percent();
    32d6:	4b4e      	ldr	r3, [pc, #312]	; (3410 <main+0x184>)
    32d8:	4798      	blx	r3
                    sprintf(buf, "<B=%3u;>", battery_level);
    32da:	4b4e      	ldr	r3, [pc, #312]	; (3414 <main+0x188>)
    32dc:	681a      	ldr	r2, [r3, #0]
    32de:	494e      	ldr	r1, [pc, #312]	; (3418 <main+0x18c>)
    32e0:	4668      	mov	r0, sp
    32e2:	4b49      	ldr	r3, [pc, #292]	; (3408 <main+0x17c>)
    32e4:	4798      	blx	r3
                    bt_usart_write_job(buf, 8); //13 //20
    32e6:	2108      	movs	r1, #8
    32e8:	4668      	mov	r0, sp
    32ea:	4b48      	ldr	r3, [pc, #288]	; (340c <main+0x180>)
    32ec:	4798      	blx	r3
                bt_poll_check();
    32ee:	4b4b      	ldr	r3, [pc, #300]	; (341c <main+0x190>)
    32f0:	4798      	blx	r3
        if (bcap_enable)
    32f2:	4b4b      	ldr	r3, [pc, #300]	; (3420 <main+0x194>)
    32f4:	781b      	ldrb	r3, [r3, #0]
    32f6:	2b00      	cmp	r3, #0
    32f8:	d13b      	bne.n	3372 <main+0xe6>
        drive_light();
    32fa:	47b0      	blx	r6
        bt_usart_receive_job();
    32fc:	47a8      	blx	r5
        if (batt_reached_low_power)
    32fe:	7823      	ldrb	r3, [r4, #0]
    3300:	2b00      	cmp	r3, #0
    3302:	d1cd      	bne.n	32a0 <main+0x14>
        if (tick_elapsed(bt_timer) % 2000 == 0) //1000 ~= 2 secs
    3304:	4b47      	ldr	r3, [pc, #284]	; (3424 <main+0x198>)
    3306:	6818      	ldr	r0, [r3, #0]
    3308:	4b47      	ldr	r3, [pc, #284]	; (3428 <main+0x19c>)
    330a:	4798      	blx	r3
    330c:	21fa      	movs	r1, #250	; 0xfa
    330e:	00c9      	lsls	r1, r1, #3
    3310:	4b46      	ldr	r3, [pc, #280]	; (342c <main+0x1a0>)
    3312:	4798      	blx	r3
    3314:	2900      	cmp	r1, #0
    3316:	d1ec      	bne.n	32f2 <main+0x66>
            bt_timer = get_tick();
    3318:	4b45      	ldr	r3, [pc, #276]	; (3430 <main+0x1a4>)
    331a:	4798      	blx	r3
    331c:	4b41      	ldr	r3, [pc, #260]	; (3424 <main+0x198>)
    331e:	6018      	str	r0, [r3, #0]
            delay_ms(1);
    3320:	2001      	movs	r0, #1
    3322:	4b44      	ldr	r3, [pc, #272]	; (3434 <main+0x1a8>)
    3324:	4798      	blx	r3
            battery_level = get_gauge_percent();
    3326:	4b44      	ldr	r3, [pc, #272]	; (3438 <main+0x1ac>)
    3328:	4798      	blx	r3
    332a:	4b3a      	ldr	r3, [pc, #232]	; (3414 <main+0x188>)
    332c:	6018      	str	r0, [r3, #0]
            if (battery_level <= light_state.low_power_threshold)
    332e:	4b43      	ldr	r3, [pc, #268]	; (343c <main+0x1b0>)
    3330:	885b      	ldrh	r3, [r3, #2]
    3332:	4298      	cmp	r0, r3
    3334:	d8ba      	bhi.n	32ac <main+0x20>
                if (!batt_reached_low_power)
    3336:	4b2e      	ldr	r3, [pc, #184]	; (33f0 <main+0x164>)
    3338:	781b      	ldrb	r3, [r3, #0]
    333a:	2b00      	cmp	r3, #0
    333c:	d0b3      	beq.n	32a6 <main+0x1a>
            if (bt_connected)
    333e:	4b40      	ldr	r3, [pc, #256]	; (3440 <main+0x1b4>)
    3340:	781b      	ldrb	r3, [r3, #0]
    3342:	2b00      	cmp	r3, #0
    3344:	d0d5      	beq.n	32f2 <main+0x66>
                if (low_power_update_app)
    3346:	4b2e      	ldr	r3, [pc, #184]	; (3400 <main+0x174>)
    3348:	781b      	ldrb	r3, [r3, #0]
    334a:	2b00      	cmp	r3, #0
    334c:	d1b5      	bne.n	32ba <main+0x2e>
                else if (bcap_update_app)
    334e:	4b3d      	ldr	r3, [pc, #244]	; (3444 <main+0x1b8>)
    3350:	781b      	ldrb	r3, [r3, #0]
    3352:	2b00      	cmp	r3, #0
    3354:	d0bf      	beq.n	32d6 <main+0x4a>
                    bcap_update_app = false;
    3356:	2200      	movs	r2, #0
    3358:	4b3a      	ldr	r3, [pc, #232]	; (3444 <main+0x1b8>)
    335a:	701a      	strb	r2, [r3, #0]
                    sprintf(light_update, "<U;L=%1u;>", light_state.mode);
    335c:	4b37      	ldr	r3, [pc, #220]	; (343c <main+0x1b0>)
    335e:	781a      	ldrb	r2, [r3, #0]
    3360:	4939      	ldr	r1, [pc, #228]	; (3448 <main+0x1bc>)
    3362:	4668      	mov	r0, sp
    3364:	4b28      	ldr	r3, [pc, #160]	; (3408 <main+0x17c>)
    3366:	4798      	blx	r3
                    bt_usart_write_job(light_update, 8);
    3368:	2108      	movs	r1, #8
    336a:	4668      	mov	r0, sp
    336c:	4b27      	ldr	r3, [pc, #156]	; (340c <main+0x180>)
    336e:	4798      	blx	r3
    3370:	e7bd      	b.n	32ee <main+0x62>
            if (tick_elapsed(bcap_timer) % 100 == 0)
    3372:	4b36      	ldr	r3, [pc, #216]	; (344c <main+0x1c0>)
    3374:	6818      	ldr	r0, [r3, #0]
    3376:	4b2c      	ldr	r3, [pc, #176]	; (3428 <main+0x19c>)
    3378:	4798      	blx	r3
    337a:	2164      	movs	r1, #100	; 0x64
    337c:	4b2b      	ldr	r3, [pc, #172]	; (342c <main+0x1a0>)
    337e:	4798      	blx	r3
    3380:	2900      	cmp	r1, #0
    3382:	d1ba      	bne.n	32fa <main+0x6e>
                bcap_timer = get_tick();
    3384:	4b2a      	ldr	r3, [pc, #168]	; (3430 <main+0x1a4>)
    3386:	4798      	blx	r3
    3388:	4b30      	ldr	r3, [pc, #192]	; (344c <main+0x1c0>)
    338a:	6018      	str	r0, [r3, #0]
                delay_ms(1);
    338c:	2001      	movs	r0, #1
    338e:	4b29      	ldr	r3, [pc, #164]	; (3434 <main+0x1a8>)
    3390:	4798      	blx	r3
	base->OUTCLR.reg = mask & ~level;
}

inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
    3392:	4b2f      	ldr	r3, [pc, #188]	; (3450 <main+0x1c4>)
    3394:	6a1b      	ldr	r3, [r3, #32]
                if (ioport_get_pin_level(INPUT_BCAP_PIN) == INPUT_BCAP_ACTIVE)
    3396:	01db      	lsls	r3, r3, #7
    3398:	d51e      	bpl.n	33d8 <main+0x14c>
                    if (bcap_touch_counter < BCAP_THRESOLD_COUNTER * 2)
    339a:	4b2e      	ldr	r3, [pc, #184]	; (3454 <main+0x1c8>)
    339c:	681b      	ldr	r3, [r3, #0]
    339e:	2b27      	cmp	r3, #39	; 0x27
    33a0:	d8ab      	bhi.n	32fa <main+0x6e>
                        bcap_touch_counter++;
    33a2:	3301      	adds	r3, #1
    33a4:	4a2b      	ldr	r2, [pc, #172]	; (3454 <main+0x1c8>)
    33a6:	6013      	str	r3, [r2, #0]
                        if (bcap_touch_counter == BCAP_THRESOLD_COUNTER)
    33a8:	2b14      	cmp	r3, #20
    33aa:	d1a6      	bne.n	32fa <main+0x6e>
                            if (bt_connected)
    33ac:	4b24      	ldr	r3, [pc, #144]	; (3440 <main+0x1b4>)
    33ae:	781b      	ldrb	r3, [r3, #0]
    33b0:	2b00      	cmp	r3, #0
    33b2:	d002      	beq.n	33ba <main+0x12e>
								bcap_update_app = true;	
    33b4:	2201      	movs	r2, #1
    33b6:	4b23      	ldr	r3, [pc, #140]	; (3444 <main+0x1b8>)
    33b8:	701a      	strb	r2, [r3, #0]
                            if (light_state.mode == E_LIGHT_OFF)
    33ba:	4b20      	ldr	r3, [pc, #128]	; (343c <main+0x1b0>)
    33bc:	781b      	ldrb	r3, [r3, #0]
    33be:	2b00      	cmp	r3, #0
    33c0:	d104      	bne.n	33cc <main+0x140>
                                change_light_mode(light_bcap_previous_mode);
    33c2:	4b25      	ldr	r3, [pc, #148]	; (3458 <main+0x1cc>)
    light_state.mode = new_mode;
    33c4:	781a      	ldrb	r2, [r3, #0]
    33c6:	4b1d      	ldr	r3, [pc, #116]	; (343c <main+0x1b0>)
    33c8:	701a      	strb	r2, [r3, #0]
    33ca:	e796      	b.n	32fa <main+0x6e>
                                light_bcap_previous_mode = light_state.mode;
    33cc:	4a22      	ldr	r2, [pc, #136]	; (3458 <main+0x1cc>)
    33ce:	7013      	strb	r3, [r2, #0]
    light_state.mode = new_mode;
    33d0:	2200      	movs	r2, #0
    33d2:	4b1a      	ldr	r3, [pc, #104]	; (343c <main+0x1b0>)
    33d4:	701a      	strb	r2, [r3, #0]
    33d6:	e790      	b.n	32fa <main+0x6e>
                    bcap_touch_counter = 0;
    33d8:	2200      	movs	r2, #0
    33da:	4b1e      	ldr	r3, [pc, #120]	; (3454 <main+0x1c8>)
    33dc:	601a      	str	r2, [r3, #0]
    33de:	e78c      	b.n	32fa <main+0x6e>
    33e0:	00002d4d 	.word	0x00002d4d
    33e4:	0000315d 	.word	0x0000315d
    33e8:	00002ff5 	.word	0x00002ff5
    33ec:	00000345 	.word	0x00000345
    33f0:	20000168 	.word	0x20000168
    33f4:	00002f1d 	.word	0x00002f1d
    33f8:	00002eb5 	.word	0x00002eb5
    33fc:	00002ef9 	.word	0x00002ef9
    3400:	20000184 	.word	0x20000184
    3404:	00005ac0 	.word	0x00005ac0
    3408:	000050c1 	.word	0x000050c1
    340c:	0000032d 	.word	0x0000032d
    3410:	000030b1 	.word	0x000030b1
    3414:	20000170 	.word	0x20000170
    3418:	00005ad8 	.word	0x00005ad8
    341c:	00003079 	.word	0x00003079
    3420:	20000129 	.word	0x20000129
    3424:	200001f0 	.word	0x200001f0
    3428:	00000bf1 	.word	0x00000bf1
    342c:	00003569 	.word	0x00003569
    3430:	00000be5 	.word	0x00000be5
    3434:	00000579 	.word	0x00000579
    3438:	00003141 	.word	0x00003141
    343c:	20000178 	.word	0x20000178
    3440:	200001f7 	.word	0x200001f7
    3444:	200001cd 	.word	0x200001cd
    3448:	00005acc 	.word	0x00005acc
    344c:	200001e4 	.word	0x200001e4
    3450:	41004400 	.word	0x41004400
    3454:	2000012c 	.word	0x2000012c
    3458:	20000128 	.word	0x20000128

0000345c <__udivsi3>:
    345c:	2200      	movs	r2, #0
    345e:	0843      	lsrs	r3, r0, #1
    3460:	428b      	cmp	r3, r1
    3462:	d374      	bcc.n	354e <__udivsi3+0xf2>
    3464:	0903      	lsrs	r3, r0, #4
    3466:	428b      	cmp	r3, r1
    3468:	d35f      	bcc.n	352a <__udivsi3+0xce>
    346a:	0a03      	lsrs	r3, r0, #8
    346c:	428b      	cmp	r3, r1
    346e:	d344      	bcc.n	34fa <__udivsi3+0x9e>
    3470:	0b03      	lsrs	r3, r0, #12
    3472:	428b      	cmp	r3, r1
    3474:	d328      	bcc.n	34c8 <__udivsi3+0x6c>
    3476:	0c03      	lsrs	r3, r0, #16
    3478:	428b      	cmp	r3, r1
    347a:	d30d      	bcc.n	3498 <__udivsi3+0x3c>
    347c:	22ff      	movs	r2, #255	; 0xff
    347e:	0209      	lsls	r1, r1, #8
    3480:	ba12      	rev	r2, r2
    3482:	0c03      	lsrs	r3, r0, #16
    3484:	428b      	cmp	r3, r1
    3486:	d302      	bcc.n	348e <__udivsi3+0x32>
    3488:	1212      	asrs	r2, r2, #8
    348a:	0209      	lsls	r1, r1, #8
    348c:	d065      	beq.n	355a <__udivsi3+0xfe>
    348e:	0b03      	lsrs	r3, r0, #12
    3490:	428b      	cmp	r3, r1
    3492:	d319      	bcc.n	34c8 <__udivsi3+0x6c>
    3494:	e000      	b.n	3498 <__udivsi3+0x3c>
    3496:	0a09      	lsrs	r1, r1, #8
    3498:	0bc3      	lsrs	r3, r0, #15
    349a:	428b      	cmp	r3, r1
    349c:	d301      	bcc.n	34a2 <__udivsi3+0x46>
    349e:	03cb      	lsls	r3, r1, #15
    34a0:	1ac0      	subs	r0, r0, r3
    34a2:	4152      	adcs	r2, r2
    34a4:	0b83      	lsrs	r3, r0, #14
    34a6:	428b      	cmp	r3, r1
    34a8:	d301      	bcc.n	34ae <__udivsi3+0x52>
    34aa:	038b      	lsls	r3, r1, #14
    34ac:	1ac0      	subs	r0, r0, r3
    34ae:	4152      	adcs	r2, r2
    34b0:	0b43      	lsrs	r3, r0, #13
    34b2:	428b      	cmp	r3, r1
    34b4:	d301      	bcc.n	34ba <__udivsi3+0x5e>
    34b6:	034b      	lsls	r3, r1, #13
    34b8:	1ac0      	subs	r0, r0, r3
    34ba:	4152      	adcs	r2, r2
    34bc:	0b03      	lsrs	r3, r0, #12
    34be:	428b      	cmp	r3, r1
    34c0:	d301      	bcc.n	34c6 <__udivsi3+0x6a>
    34c2:	030b      	lsls	r3, r1, #12
    34c4:	1ac0      	subs	r0, r0, r3
    34c6:	4152      	adcs	r2, r2
    34c8:	0ac3      	lsrs	r3, r0, #11
    34ca:	428b      	cmp	r3, r1
    34cc:	d301      	bcc.n	34d2 <__udivsi3+0x76>
    34ce:	02cb      	lsls	r3, r1, #11
    34d0:	1ac0      	subs	r0, r0, r3
    34d2:	4152      	adcs	r2, r2
    34d4:	0a83      	lsrs	r3, r0, #10
    34d6:	428b      	cmp	r3, r1
    34d8:	d301      	bcc.n	34de <__udivsi3+0x82>
    34da:	028b      	lsls	r3, r1, #10
    34dc:	1ac0      	subs	r0, r0, r3
    34de:	4152      	adcs	r2, r2
    34e0:	0a43      	lsrs	r3, r0, #9
    34e2:	428b      	cmp	r3, r1
    34e4:	d301      	bcc.n	34ea <__udivsi3+0x8e>
    34e6:	024b      	lsls	r3, r1, #9
    34e8:	1ac0      	subs	r0, r0, r3
    34ea:	4152      	adcs	r2, r2
    34ec:	0a03      	lsrs	r3, r0, #8
    34ee:	428b      	cmp	r3, r1
    34f0:	d301      	bcc.n	34f6 <__udivsi3+0x9a>
    34f2:	020b      	lsls	r3, r1, #8
    34f4:	1ac0      	subs	r0, r0, r3
    34f6:	4152      	adcs	r2, r2
    34f8:	d2cd      	bcs.n	3496 <__udivsi3+0x3a>
    34fa:	09c3      	lsrs	r3, r0, #7
    34fc:	428b      	cmp	r3, r1
    34fe:	d301      	bcc.n	3504 <__udivsi3+0xa8>
    3500:	01cb      	lsls	r3, r1, #7
    3502:	1ac0      	subs	r0, r0, r3
    3504:	4152      	adcs	r2, r2
    3506:	0983      	lsrs	r3, r0, #6
    3508:	428b      	cmp	r3, r1
    350a:	d301      	bcc.n	3510 <__udivsi3+0xb4>
    350c:	018b      	lsls	r3, r1, #6
    350e:	1ac0      	subs	r0, r0, r3
    3510:	4152      	adcs	r2, r2
    3512:	0943      	lsrs	r3, r0, #5
    3514:	428b      	cmp	r3, r1
    3516:	d301      	bcc.n	351c <__udivsi3+0xc0>
    3518:	014b      	lsls	r3, r1, #5
    351a:	1ac0      	subs	r0, r0, r3
    351c:	4152      	adcs	r2, r2
    351e:	0903      	lsrs	r3, r0, #4
    3520:	428b      	cmp	r3, r1
    3522:	d301      	bcc.n	3528 <__udivsi3+0xcc>
    3524:	010b      	lsls	r3, r1, #4
    3526:	1ac0      	subs	r0, r0, r3
    3528:	4152      	adcs	r2, r2
    352a:	08c3      	lsrs	r3, r0, #3
    352c:	428b      	cmp	r3, r1
    352e:	d301      	bcc.n	3534 <__udivsi3+0xd8>
    3530:	00cb      	lsls	r3, r1, #3
    3532:	1ac0      	subs	r0, r0, r3
    3534:	4152      	adcs	r2, r2
    3536:	0883      	lsrs	r3, r0, #2
    3538:	428b      	cmp	r3, r1
    353a:	d301      	bcc.n	3540 <__udivsi3+0xe4>
    353c:	008b      	lsls	r3, r1, #2
    353e:	1ac0      	subs	r0, r0, r3
    3540:	4152      	adcs	r2, r2
    3542:	0843      	lsrs	r3, r0, #1
    3544:	428b      	cmp	r3, r1
    3546:	d301      	bcc.n	354c <__udivsi3+0xf0>
    3548:	004b      	lsls	r3, r1, #1
    354a:	1ac0      	subs	r0, r0, r3
    354c:	4152      	adcs	r2, r2
    354e:	1a41      	subs	r1, r0, r1
    3550:	d200      	bcs.n	3554 <__udivsi3+0xf8>
    3552:	4601      	mov	r1, r0
    3554:	4152      	adcs	r2, r2
    3556:	4610      	mov	r0, r2
    3558:	4770      	bx	lr
    355a:	e7ff      	b.n	355c <__udivsi3+0x100>
    355c:	b501      	push	{r0, lr}
    355e:	2000      	movs	r0, #0
    3560:	f000 f8f0 	bl	3744 <__aeabi_idiv0>
    3564:	bd02      	pop	{r1, pc}
    3566:	46c0      	nop			; (mov r8, r8)

00003568 <__aeabi_uidivmod>:
    3568:	2900      	cmp	r1, #0
    356a:	d0f7      	beq.n	355c <__udivsi3+0x100>
    356c:	e776      	b.n	345c <__udivsi3>
    356e:	4770      	bx	lr

00003570 <__divsi3>:
    3570:	4603      	mov	r3, r0
    3572:	430b      	orrs	r3, r1
    3574:	d47f      	bmi.n	3676 <__divsi3+0x106>
    3576:	2200      	movs	r2, #0
    3578:	0843      	lsrs	r3, r0, #1
    357a:	428b      	cmp	r3, r1
    357c:	d374      	bcc.n	3668 <__divsi3+0xf8>
    357e:	0903      	lsrs	r3, r0, #4
    3580:	428b      	cmp	r3, r1
    3582:	d35f      	bcc.n	3644 <__divsi3+0xd4>
    3584:	0a03      	lsrs	r3, r0, #8
    3586:	428b      	cmp	r3, r1
    3588:	d344      	bcc.n	3614 <__divsi3+0xa4>
    358a:	0b03      	lsrs	r3, r0, #12
    358c:	428b      	cmp	r3, r1
    358e:	d328      	bcc.n	35e2 <__divsi3+0x72>
    3590:	0c03      	lsrs	r3, r0, #16
    3592:	428b      	cmp	r3, r1
    3594:	d30d      	bcc.n	35b2 <__divsi3+0x42>
    3596:	22ff      	movs	r2, #255	; 0xff
    3598:	0209      	lsls	r1, r1, #8
    359a:	ba12      	rev	r2, r2
    359c:	0c03      	lsrs	r3, r0, #16
    359e:	428b      	cmp	r3, r1
    35a0:	d302      	bcc.n	35a8 <__divsi3+0x38>
    35a2:	1212      	asrs	r2, r2, #8
    35a4:	0209      	lsls	r1, r1, #8
    35a6:	d065      	beq.n	3674 <__divsi3+0x104>
    35a8:	0b03      	lsrs	r3, r0, #12
    35aa:	428b      	cmp	r3, r1
    35ac:	d319      	bcc.n	35e2 <__divsi3+0x72>
    35ae:	e000      	b.n	35b2 <__divsi3+0x42>
    35b0:	0a09      	lsrs	r1, r1, #8
    35b2:	0bc3      	lsrs	r3, r0, #15
    35b4:	428b      	cmp	r3, r1
    35b6:	d301      	bcc.n	35bc <__divsi3+0x4c>
    35b8:	03cb      	lsls	r3, r1, #15
    35ba:	1ac0      	subs	r0, r0, r3
    35bc:	4152      	adcs	r2, r2
    35be:	0b83      	lsrs	r3, r0, #14
    35c0:	428b      	cmp	r3, r1
    35c2:	d301      	bcc.n	35c8 <__divsi3+0x58>
    35c4:	038b      	lsls	r3, r1, #14
    35c6:	1ac0      	subs	r0, r0, r3
    35c8:	4152      	adcs	r2, r2
    35ca:	0b43      	lsrs	r3, r0, #13
    35cc:	428b      	cmp	r3, r1
    35ce:	d301      	bcc.n	35d4 <__divsi3+0x64>
    35d0:	034b      	lsls	r3, r1, #13
    35d2:	1ac0      	subs	r0, r0, r3
    35d4:	4152      	adcs	r2, r2
    35d6:	0b03      	lsrs	r3, r0, #12
    35d8:	428b      	cmp	r3, r1
    35da:	d301      	bcc.n	35e0 <__divsi3+0x70>
    35dc:	030b      	lsls	r3, r1, #12
    35de:	1ac0      	subs	r0, r0, r3
    35e0:	4152      	adcs	r2, r2
    35e2:	0ac3      	lsrs	r3, r0, #11
    35e4:	428b      	cmp	r3, r1
    35e6:	d301      	bcc.n	35ec <__divsi3+0x7c>
    35e8:	02cb      	lsls	r3, r1, #11
    35ea:	1ac0      	subs	r0, r0, r3
    35ec:	4152      	adcs	r2, r2
    35ee:	0a83      	lsrs	r3, r0, #10
    35f0:	428b      	cmp	r3, r1
    35f2:	d301      	bcc.n	35f8 <__divsi3+0x88>
    35f4:	028b      	lsls	r3, r1, #10
    35f6:	1ac0      	subs	r0, r0, r3
    35f8:	4152      	adcs	r2, r2
    35fa:	0a43      	lsrs	r3, r0, #9
    35fc:	428b      	cmp	r3, r1
    35fe:	d301      	bcc.n	3604 <__divsi3+0x94>
    3600:	024b      	lsls	r3, r1, #9
    3602:	1ac0      	subs	r0, r0, r3
    3604:	4152      	adcs	r2, r2
    3606:	0a03      	lsrs	r3, r0, #8
    3608:	428b      	cmp	r3, r1
    360a:	d301      	bcc.n	3610 <__divsi3+0xa0>
    360c:	020b      	lsls	r3, r1, #8
    360e:	1ac0      	subs	r0, r0, r3
    3610:	4152      	adcs	r2, r2
    3612:	d2cd      	bcs.n	35b0 <__divsi3+0x40>
    3614:	09c3      	lsrs	r3, r0, #7
    3616:	428b      	cmp	r3, r1
    3618:	d301      	bcc.n	361e <__divsi3+0xae>
    361a:	01cb      	lsls	r3, r1, #7
    361c:	1ac0      	subs	r0, r0, r3
    361e:	4152      	adcs	r2, r2
    3620:	0983      	lsrs	r3, r0, #6
    3622:	428b      	cmp	r3, r1
    3624:	d301      	bcc.n	362a <__divsi3+0xba>
    3626:	018b      	lsls	r3, r1, #6
    3628:	1ac0      	subs	r0, r0, r3
    362a:	4152      	adcs	r2, r2
    362c:	0943      	lsrs	r3, r0, #5
    362e:	428b      	cmp	r3, r1
    3630:	d301      	bcc.n	3636 <__divsi3+0xc6>
    3632:	014b      	lsls	r3, r1, #5
    3634:	1ac0      	subs	r0, r0, r3
    3636:	4152      	adcs	r2, r2
    3638:	0903      	lsrs	r3, r0, #4
    363a:	428b      	cmp	r3, r1
    363c:	d301      	bcc.n	3642 <__divsi3+0xd2>
    363e:	010b      	lsls	r3, r1, #4
    3640:	1ac0      	subs	r0, r0, r3
    3642:	4152      	adcs	r2, r2
    3644:	08c3      	lsrs	r3, r0, #3
    3646:	428b      	cmp	r3, r1
    3648:	d301      	bcc.n	364e <__divsi3+0xde>
    364a:	00cb      	lsls	r3, r1, #3
    364c:	1ac0      	subs	r0, r0, r3
    364e:	4152      	adcs	r2, r2
    3650:	0883      	lsrs	r3, r0, #2
    3652:	428b      	cmp	r3, r1
    3654:	d301      	bcc.n	365a <__divsi3+0xea>
    3656:	008b      	lsls	r3, r1, #2
    3658:	1ac0      	subs	r0, r0, r3
    365a:	4152      	adcs	r2, r2
    365c:	0843      	lsrs	r3, r0, #1
    365e:	428b      	cmp	r3, r1
    3660:	d301      	bcc.n	3666 <__divsi3+0xf6>
    3662:	004b      	lsls	r3, r1, #1
    3664:	1ac0      	subs	r0, r0, r3
    3666:	4152      	adcs	r2, r2
    3668:	1a41      	subs	r1, r0, r1
    366a:	d200      	bcs.n	366e <__divsi3+0xfe>
    366c:	4601      	mov	r1, r0
    366e:	4152      	adcs	r2, r2
    3670:	4610      	mov	r0, r2
    3672:	4770      	bx	lr
    3674:	e05d      	b.n	3732 <__divsi3+0x1c2>
    3676:	0fca      	lsrs	r2, r1, #31
    3678:	d000      	beq.n	367c <__divsi3+0x10c>
    367a:	4249      	negs	r1, r1
    367c:	1003      	asrs	r3, r0, #32
    367e:	d300      	bcc.n	3682 <__divsi3+0x112>
    3680:	4240      	negs	r0, r0
    3682:	4053      	eors	r3, r2
    3684:	2200      	movs	r2, #0
    3686:	469c      	mov	ip, r3
    3688:	0903      	lsrs	r3, r0, #4
    368a:	428b      	cmp	r3, r1
    368c:	d32d      	bcc.n	36ea <__divsi3+0x17a>
    368e:	0a03      	lsrs	r3, r0, #8
    3690:	428b      	cmp	r3, r1
    3692:	d312      	bcc.n	36ba <__divsi3+0x14a>
    3694:	22fc      	movs	r2, #252	; 0xfc
    3696:	0189      	lsls	r1, r1, #6
    3698:	ba12      	rev	r2, r2
    369a:	0a03      	lsrs	r3, r0, #8
    369c:	428b      	cmp	r3, r1
    369e:	d30c      	bcc.n	36ba <__divsi3+0x14a>
    36a0:	0189      	lsls	r1, r1, #6
    36a2:	1192      	asrs	r2, r2, #6
    36a4:	428b      	cmp	r3, r1
    36a6:	d308      	bcc.n	36ba <__divsi3+0x14a>
    36a8:	0189      	lsls	r1, r1, #6
    36aa:	1192      	asrs	r2, r2, #6
    36ac:	428b      	cmp	r3, r1
    36ae:	d304      	bcc.n	36ba <__divsi3+0x14a>
    36b0:	0189      	lsls	r1, r1, #6
    36b2:	d03a      	beq.n	372a <__divsi3+0x1ba>
    36b4:	1192      	asrs	r2, r2, #6
    36b6:	e000      	b.n	36ba <__divsi3+0x14a>
    36b8:	0989      	lsrs	r1, r1, #6
    36ba:	09c3      	lsrs	r3, r0, #7
    36bc:	428b      	cmp	r3, r1
    36be:	d301      	bcc.n	36c4 <__divsi3+0x154>
    36c0:	01cb      	lsls	r3, r1, #7
    36c2:	1ac0      	subs	r0, r0, r3
    36c4:	4152      	adcs	r2, r2
    36c6:	0983      	lsrs	r3, r0, #6
    36c8:	428b      	cmp	r3, r1
    36ca:	d301      	bcc.n	36d0 <__divsi3+0x160>
    36cc:	018b      	lsls	r3, r1, #6
    36ce:	1ac0      	subs	r0, r0, r3
    36d0:	4152      	adcs	r2, r2
    36d2:	0943      	lsrs	r3, r0, #5
    36d4:	428b      	cmp	r3, r1
    36d6:	d301      	bcc.n	36dc <__divsi3+0x16c>
    36d8:	014b      	lsls	r3, r1, #5
    36da:	1ac0      	subs	r0, r0, r3
    36dc:	4152      	adcs	r2, r2
    36de:	0903      	lsrs	r3, r0, #4
    36e0:	428b      	cmp	r3, r1
    36e2:	d301      	bcc.n	36e8 <__divsi3+0x178>
    36e4:	010b      	lsls	r3, r1, #4
    36e6:	1ac0      	subs	r0, r0, r3
    36e8:	4152      	adcs	r2, r2
    36ea:	08c3      	lsrs	r3, r0, #3
    36ec:	428b      	cmp	r3, r1
    36ee:	d301      	bcc.n	36f4 <__divsi3+0x184>
    36f0:	00cb      	lsls	r3, r1, #3
    36f2:	1ac0      	subs	r0, r0, r3
    36f4:	4152      	adcs	r2, r2
    36f6:	0883      	lsrs	r3, r0, #2
    36f8:	428b      	cmp	r3, r1
    36fa:	d301      	bcc.n	3700 <__divsi3+0x190>
    36fc:	008b      	lsls	r3, r1, #2
    36fe:	1ac0      	subs	r0, r0, r3
    3700:	4152      	adcs	r2, r2
    3702:	d2d9      	bcs.n	36b8 <__divsi3+0x148>
    3704:	0843      	lsrs	r3, r0, #1
    3706:	428b      	cmp	r3, r1
    3708:	d301      	bcc.n	370e <__divsi3+0x19e>
    370a:	004b      	lsls	r3, r1, #1
    370c:	1ac0      	subs	r0, r0, r3
    370e:	4152      	adcs	r2, r2
    3710:	1a41      	subs	r1, r0, r1
    3712:	d200      	bcs.n	3716 <__divsi3+0x1a6>
    3714:	4601      	mov	r1, r0
    3716:	4663      	mov	r3, ip
    3718:	4152      	adcs	r2, r2
    371a:	105b      	asrs	r3, r3, #1
    371c:	4610      	mov	r0, r2
    371e:	d301      	bcc.n	3724 <__divsi3+0x1b4>
    3720:	4240      	negs	r0, r0
    3722:	2b00      	cmp	r3, #0
    3724:	d500      	bpl.n	3728 <__divsi3+0x1b8>
    3726:	4249      	negs	r1, r1
    3728:	4770      	bx	lr
    372a:	4663      	mov	r3, ip
    372c:	105b      	asrs	r3, r3, #1
    372e:	d300      	bcc.n	3732 <__divsi3+0x1c2>
    3730:	4240      	negs	r0, r0
    3732:	b501      	push	{r0, lr}
    3734:	2000      	movs	r0, #0
    3736:	f000 f805 	bl	3744 <__aeabi_idiv0>
    373a:	bd02      	pop	{r1, pc}

0000373c <__aeabi_idivmod>:
    373c:	2900      	cmp	r1, #0
    373e:	d0f8      	beq.n	3732 <__divsi3+0x1c2>
    3740:	e716      	b.n	3570 <__divsi3>
    3742:	4770      	bx	lr

00003744 <__aeabi_idiv0>:
    3744:	4770      	bx	lr
    3746:	46c0      	nop			; (mov r8, r8)

00003748 <__aeabi_lmul>:
    3748:	b5f0      	push	{r4, r5, r6, r7, lr}
    374a:	46ce      	mov	lr, r9
    374c:	4647      	mov	r7, r8
    374e:	0415      	lsls	r5, r2, #16
    3750:	0c2d      	lsrs	r5, r5, #16
    3752:	002e      	movs	r6, r5
    3754:	b580      	push	{r7, lr}
    3756:	0407      	lsls	r7, r0, #16
    3758:	0c14      	lsrs	r4, r2, #16
    375a:	0c3f      	lsrs	r7, r7, #16
    375c:	4699      	mov	r9, r3
    375e:	0c03      	lsrs	r3, r0, #16
    3760:	437e      	muls	r6, r7
    3762:	435d      	muls	r5, r3
    3764:	4367      	muls	r7, r4
    3766:	4363      	muls	r3, r4
    3768:	197f      	adds	r7, r7, r5
    376a:	0c34      	lsrs	r4, r6, #16
    376c:	19e4      	adds	r4, r4, r7
    376e:	469c      	mov	ip, r3
    3770:	42a5      	cmp	r5, r4
    3772:	d903      	bls.n	377c <__aeabi_lmul+0x34>
    3774:	2380      	movs	r3, #128	; 0x80
    3776:	025b      	lsls	r3, r3, #9
    3778:	4698      	mov	r8, r3
    377a:	44c4      	add	ip, r8
    377c:	464b      	mov	r3, r9
    377e:	4351      	muls	r1, r2
    3780:	4343      	muls	r3, r0
    3782:	0436      	lsls	r6, r6, #16
    3784:	0c36      	lsrs	r6, r6, #16
    3786:	0c25      	lsrs	r5, r4, #16
    3788:	0424      	lsls	r4, r4, #16
    378a:	4465      	add	r5, ip
    378c:	19a4      	adds	r4, r4, r6
    378e:	1859      	adds	r1, r3, r1
    3790:	1949      	adds	r1, r1, r5
    3792:	0020      	movs	r0, r4
    3794:	bc0c      	pop	{r2, r3}
    3796:	4690      	mov	r8, r2
    3798:	4699      	mov	r9, r3
    379a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000379c <__aeabi_dadd>:
    379c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    379e:	4645      	mov	r5, r8
    37a0:	46de      	mov	lr, fp
    37a2:	4657      	mov	r7, sl
    37a4:	464e      	mov	r6, r9
    37a6:	030c      	lsls	r4, r1, #12
    37a8:	b5e0      	push	{r5, r6, r7, lr}
    37aa:	004e      	lsls	r6, r1, #1
    37ac:	0fc9      	lsrs	r1, r1, #31
    37ae:	4688      	mov	r8, r1
    37b0:	000d      	movs	r5, r1
    37b2:	0a61      	lsrs	r1, r4, #9
    37b4:	0f44      	lsrs	r4, r0, #29
    37b6:	430c      	orrs	r4, r1
    37b8:	00c7      	lsls	r7, r0, #3
    37ba:	0319      	lsls	r1, r3, #12
    37bc:	0058      	lsls	r0, r3, #1
    37be:	0fdb      	lsrs	r3, r3, #31
    37c0:	469b      	mov	fp, r3
    37c2:	0a4b      	lsrs	r3, r1, #9
    37c4:	0f51      	lsrs	r1, r2, #29
    37c6:	430b      	orrs	r3, r1
    37c8:	0d76      	lsrs	r6, r6, #21
    37ca:	0d40      	lsrs	r0, r0, #21
    37cc:	0019      	movs	r1, r3
    37ce:	00d2      	lsls	r2, r2, #3
    37d0:	45d8      	cmp	r8, fp
    37d2:	d100      	bne.n	37d6 <__aeabi_dadd+0x3a>
    37d4:	e0ae      	b.n	3934 <__aeabi_dadd+0x198>
    37d6:	1a35      	subs	r5, r6, r0
    37d8:	2d00      	cmp	r5, #0
    37da:	dc00      	bgt.n	37de <__aeabi_dadd+0x42>
    37dc:	e0f6      	b.n	39cc <__aeabi_dadd+0x230>
    37de:	2800      	cmp	r0, #0
    37e0:	d10f      	bne.n	3802 <__aeabi_dadd+0x66>
    37e2:	4313      	orrs	r3, r2
    37e4:	d100      	bne.n	37e8 <__aeabi_dadd+0x4c>
    37e6:	e0db      	b.n	39a0 <__aeabi_dadd+0x204>
    37e8:	1e6b      	subs	r3, r5, #1
    37ea:	2b00      	cmp	r3, #0
    37ec:	d000      	beq.n	37f0 <__aeabi_dadd+0x54>
    37ee:	e137      	b.n	3a60 <__aeabi_dadd+0x2c4>
    37f0:	1aba      	subs	r2, r7, r2
    37f2:	4297      	cmp	r7, r2
    37f4:	41bf      	sbcs	r7, r7
    37f6:	1a64      	subs	r4, r4, r1
    37f8:	427f      	negs	r7, r7
    37fa:	1be4      	subs	r4, r4, r7
    37fc:	2601      	movs	r6, #1
    37fe:	0017      	movs	r7, r2
    3800:	e024      	b.n	384c <__aeabi_dadd+0xb0>
    3802:	4bc6      	ldr	r3, [pc, #792]	; (3b1c <__aeabi_dadd+0x380>)
    3804:	429e      	cmp	r6, r3
    3806:	d04d      	beq.n	38a4 <__aeabi_dadd+0x108>
    3808:	2380      	movs	r3, #128	; 0x80
    380a:	041b      	lsls	r3, r3, #16
    380c:	4319      	orrs	r1, r3
    380e:	2d38      	cmp	r5, #56	; 0x38
    3810:	dd00      	ble.n	3814 <__aeabi_dadd+0x78>
    3812:	e107      	b.n	3a24 <__aeabi_dadd+0x288>
    3814:	2d1f      	cmp	r5, #31
    3816:	dd00      	ble.n	381a <__aeabi_dadd+0x7e>
    3818:	e138      	b.n	3a8c <__aeabi_dadd+0x2f0>
    381a:	2020      	movs	r0, #32
    381c:	1b43      	subs	r3, r0, r5
    381e:	469a      	mov	sl, r3
    3820:	000b      	movs	r3, r1
    3822:	4650      	mov	r0, sl
    3824:	4083      	lsls	r3, r0
    3826:	4699      	mov	r9, r3
    3828:	0013      	movs	r3, r2
    382a:	4648      	mov	r0, r9
    382c:	40eb      	lsrs	r3, r5
    382e:	4318      	orrs	r0, r3
    3830:	0003      	movs	r3, r0
    3832:	4650      	mov	r0, sl
    3834:	4082      	lsls	r2, r0
    3836:	1e50      	subs	r0, r2, #1
    3838:	4182      	sbcs	r2, r0
    383a:	40e9      	lsrs	r1, r5
    383c:	431a      	orrs	r2, r3
    383e:	1aba      	subs	r2, r7, r2
    3840:	1a61      	subs	r1, r4, r1
    3842:	4297      	cmp	r7, r2
    3844:	41a4      	sbcs	r4, r4
    3846:	0017      	movs	r7, r2
    3848:	4264      	negs	r4, r4
    384a:	1b0c      	subs	r4, r1, r4
    384c:	0223      	lsls	r3, r4, #8
    384e:	d562      	bpl.n	3916 <__aeabi_dadd+0x17a>
    3850:	0264      	lsls	r4, r4, #9
    3852:	0a65      	lsrs	r5, r4, #9
    3854:	2d00      	cmp	r5, #0
    3856:	d100      	bne.n	385a <__aeabi_dadd+0xbe>
    3858:	e0df      	b.n	3a1a <__aeabi_dadd+0x27e>
    385a:	0028      	movs	r0, r5
    385c:	f001 fbe4 	bl	5028 <__clzsi2>
    3860:	0003      	movs	r3, r0
    3862:	3b08      	subs	r3, #8
    3864:	2b1f      	cmp	r3, #31
    3866:	dd00      	ble.n	386a <__aeabi_dadd+0xce>
    3868:	e0d2      	b.n	3a10 <__aeabi_dadd+0x274>
    386a:	2220      	movs	r2, #32
    386c:	003c      	movs	r4, r7
    386e:	1ad2      	subs	r2, r2, r3
    3870:	409d      	lsls	r5, r3
    3872:	40d4      	lsrs	r4, r2
    3874:	409f      	lsls	r7, r3
    3876:	4325      	orrs	r5, r4
    3878:	429e      	cmp	r6, r3
    387a:	dd00      	ble.n	387e <__aeabi_dadd+0xe2>
    387c:	e0c4      	b.n	3a08 <__aeabi_dadd+0x26c>
    387e:	1b9e      	subs	r6, r3, r6
    3880:	1c73      	adds	r3, r6, #1
    3882:	2b1f      	cmp	r3, #31
    3884:	dd00      	ble.n	3888 <__aeabi_dadd+0xec>
    3886:	e0f1      	b.n	3a6c <__aeabi_dadd+0x2d0>
    3888:	2220      	movs	r2, #32
    388a:	0038      	movs	r0, r7
    388c:	0029      	movs	r1, r5
    388e:	1ad2      	subs	r2, r2, r3
    3890:	40d8      	lsrs	r0, r3
    3892:	4091      	lsls	r1, r2
    3894:	4097      	lsls	r7, r2
    3896:	002c      	movs	r4, r5
    3898:	4301      	orrs	r1, r0
    389a:	1e78      	subs	r0, r7, #1
    389c:	4187      	sbcs	r7, r0
    389e:	40dc      	lsrs	r4, r3
    38a0:	2600      	movs	r6, #0
    38a2:	430f      	orrs	r7, r1
    38a4:	077b      	lsls	r3, r7, #29
    38a6:	d009      	beq.n	38bc <__aeabi_dadd+0x120>
    38a8:	230f      	movs	r3, #15
    38aa:	403b      	ands	r3, r7
    38ac:	2b04      	cmp	r3, #4
    38ae:	d005      	beq.n	38bc <__aeabi_dadd+0x120>
    38b0:	1d3b      	adds	r3, r7, #4
    38b2:	42bb      	cmp	r3, r7
    38b4:	41bf      	sbcs	r7, r7
    38b6:	427f      	negs	r7, r7
    38b8:	19e4      	adds	r4, r4, r7
    38ba:	001f      	movs	r7, r3
    38bc:	0223      	lsls	r3, r4, #8
    38be:	d52c      	bpl.n	391a <__aeabi_dadd+0x17e>
    38c0:	4b96      	ldr	r3, [pc, #600]	; (3b1c <__aeabi_dadd+0x380>)
    38c2:	3601      	adds	r6, #1
    38c4:	429e      	cmp	r6, r3
    38c6:	d100      	bne.n	38ca <__aeabi_dadd+0x12e>
    38c8:	e09a      	b.n	3a00 <__aeabi_dadd+0x264>
    38ca:	4645      	mov	r5, r8
    38cc:	4b94      	ldr	r3, [pc, #592]	; (3b20 <__aeabi_dadd+0x384>)
    38ce:	08ff      	lsrs	r7, r7, #3
    38d0:	401c      	ands	r4, r3
    38d2:	0760      	lsls	r0, r4, #29
    38d4:	0576      	lsls	r6, r6, #21
    38d6:	0264      	lsls	r4, r4, #9
    38d8:	4307      	orrs	r7, r0
    38da:	0b24      	lsrs	r4, r4, #12
    38dc:	0d76      	lsrs	r6, r6, #21
    38de:	2100      	movs	r1, #0
    38e0:	0324      	lsls	r4, r4, #12
    38e2:	0b23      	lsrs	r3, r4, #12
    38e4:	0d0c      	lsrs	r4, r1, #20
    38e6:	4a8f      	ldr	r2, [pc, #572]	; (3b24 <__aeabi_dadd+0x388>)
    38e8:	0524      	lsls	r4, r4, #20
    38ea:	431c      	orrs	r4, r3
    38ec:	4014      	ands	r4, r2
    38ee:	0533      	lsls	r3, r6, #20
    38f0:	4323      	orrs	r3, r4
    38f2:	005b      	lsls	r3, r3, #1
    38f4:	07ed      	lsls	r5, r5, #31
    38f6:	085b      	lsrs	r3, r3, #1
    38f8:	432b      	orrs	r3, r5
    38fa:	0038      	movs	r0, r7
    38fc:	0019      	movs	r1, r3
    38fe:	bc3c      	pop	{r2, r3, r4, r5}
    3900:	4690      	mov	r8, r2
    3902:	4699      	mov	r9, r3
    3904:	46a2      	mov	sl, r4
    3906:	46ab      	mov	fp, r5
    3908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    390a:	4664      	mov	r4, ip
    390c:	4304      	orrs	r4, r0
    390e:	d100      	bne.n	3912 <__aeabi_dadd+0x176>
    3910:	e211      	b.n	3d36 <__aeabi_dadd+0x59a>
    3912:	0004      	movs	r4, r0
    3914:	4667      	mov	r7, ip
    3916:	077b      	lsls	r3, r7, #29
    3918:	d1c6      	bne.n	38a8 <__aeabi_dadd+0x10c>
    391a:	4645      	mov	r5, r8
    391c:	0760      	lsls	r0, r4, #29
    391e:	08ff      	lsrs	r7, r7, #3
    3920:	4307      	orrs	r7, r0
    3922:	08e4      	lsrs	r4, r4, #3
    3924:	4b7d      	ldr	r3, [pc, #500]	; (3b1c <__aeabi_dadd+0x380>)
    3926:	429e      	cmp	r6, r3
    3928:	d030      	beq.n	398c <__aeabi_dadd+0x1f0>
    392a:	0324      	lsls	r4, r4, #12
    392c:	0576      	lsls	r6, r6, #21
    392e:	0b24      	lsrs	r4, r4, #12
    3930:	0d76      	lsrs	r6, r6, #21
    3932:	e7d4      	b.n	38de <__aeabi_dadd+0x142>
    3934:	1a33      	subs	r3, r6, r0
    3936:	469a      	mov	sl, r3
    3938:	2b00      	cmp	r3, #0
    393a:	dd78      	ble.n	3a2e <__aeabi_dadd+0x292>
    393c:	2800      	cmp	r0, #0
    393e:	d031      	beq.n	39a4 <__aeabi_dadd+0x208>
    3940:	4876      	ldr	r0, [pc, #472]	; (3b1c <__aeabi_dadd+0x380>)
    3942:	4286      	cmp	r6, r0
    3944:	d0ae      	beq.n	38a4 <__aeabi_dadd+0x108>
    3946:	2080      	movs	r0, #128	; 0x80
    3948:	0400      	lsls	r0, r0, #16
    394a:	4301      	orrs	r1, r0
    394c:	4653      	mov	r3, sl
    394e:	2b38      	cmp	r3, #56	; 0x38
    3950:	dc00      	bgt.n	3954 <__aeabi_dadd+0x1b8>
    3952:	e0e9      	b.n	3b28 <__aeabi_dadd+0x38c>
    3954:	430a      	orrs	r2, r1
    3956:	1e51      	subs	r1, r2, #1
    3958:	418a      	sbcs	r2, r1
    395a:	2100      	movs	r1, #0
    395c:	19d2      	adds	r2, r2, r7
    395e:	42ba      	cmp	r2, r7
    3960:	41bf      	sbcs	r7, r7
    3962:	1909      	adds	r1, r1, r4
    3964:	427c      	negs	r4, r7
    3966:	0017      	movs	r7, r2
    3968:	190c      	adds	r4, r1, r4
    396a:	0223      	lsls	r3, r4, #8
    396c:	d5d3      	bpl.n	3916 <__aeabi_dadd+0x17a>
    396e:	4b6b      	ldr	r3, [pc, #428]	; (3b1c <__aeabi_dadd+0x380>)
    3970:	3601      	adds	r6, #1
    3972:	429e      	cmp	r6, r3
    3974:	d100      	bne.n	3978 <__aeabi_dadd+0x1dc>
    3976:	e13a      	b.n	3bee <__aeabi_dadd+0x452>
    3978:	2001      	movs	r0, #1
    397a:	4b69      	ldr	r3, [pc, #420]	; (3b20 <__aeabi_dadd+0x384>)
    397c:	401c      	ands	r4, r3
    397e:	087b      	lsrs	r3, r7, #1
    3980:	4007      	ands	r7, r0
    3982:	431f      	orrs	r7, r3
    3984:	07e0      	lsls	r0, r4, #31
    3986:	4307      	orrs	r7, r0
    3988:	0864      	lsrs	r4, r4, #1
    398a:	e78b      	b.n	38a4 <__aeabi_dadd+0x108>
    398c:	0023      	movs	r3, r4
    398e:	433b      	orrs	r3, r7
    3990:	d100      	bne.n	3994 <__aeabi_dadd+0x1f8>
    3992:	e1cb      	b.n	3d2c <__aeabi_dadd+0x590>
    3994:	2280      	movs	r2, #128	; 0x80
    3996:	0312      	lsls	r2, r2, #12
    3998:	4314      	orrs	r4, r2
    399a:	0324      	lsls	r4, r4, #12
    399c:	0b24      	lsrs	r4, r4, #12
    399e:	e79e      	b.n	38de <__aeabi_dadd+0x142>
    39a0:	002e      	movs	r6, r5
    39a2:	e77f      	b.n	38a4 <__aeabi_dadd+0x108>
    39a4:	0008      	movs	r0, r1
    39a6:	4310      	orrs	r0, r2
    39a8:	d100      	bne.n	39ac <__aeabi_dadd+0x210>
    39aa:	e0b4      	b.n	3b16 <__aeabi_dadd+0x37a>
    39ac:	1e58      	subs	r0, r3, #1
    39ae:	2800      	cmp	r0, #0
    39b0:	d000      	beq.n	39b4 <__aeabi_dadd+0x218>
    39b2:	e0de      	b.n	3b72 <__aeabi_dadd+0x3d6>
    39b4:	18ba      	adds	r2, r7, r2
    39b6:	42ba      	cmp	r2, r7
    39b8:	419b      	sbcs	r3, r3
    39ba:	1864      	adds	r4, r4, r1
    39bc:	425b      	negs	r3, r3
    39be:	18e4      	adds	r4, r4, r3
    39c0:	0017      	movs	r7, r2
    39c2:	2601      	movs	r6, #1
    39c4:	0223      	lsls	r3, r4, #8
    39c6:	d5a6      	bpl.n	3916 <__aeabi_dadd+0x17a>
    39c8:	2602      	movs	r6, #2
    39ca:	e7d5      	b.n	3978 <__aeabi_dadd+0x1dc>
    39cc:	2d00      	cmp	r5, #0
    39ce:	d16e      	bne.n	3aae <__aeabi_dadd+0x312>
    39d0:	1c70      	adds	r0, r6, #1
    39d2:	0540      	lsls	r0, r0, #21
    39d4:	0d40      	lsrs	r0, r0, #21
    39d6:	2801      	cmp	r0, #1
    39d8:	dc00      	bgt.n	39dc <__aeabi_dadd+0x240>
    39da:	e0f9      	b.n	3bd0 <__aeabi_dadd+0x434>
    39dc:	1ab8      	subs	r0, r7, r2
    39de:	4684      	mov	ip, r0
    39e0:	4287      	cmp	r7, r0
    39e2:	4180      	sbcs	r0, r0
    39e4:	1ae5      	subs	r5, r4, r3
    39e6:	4240      	negs	r0, r0
    39e8:	1a2d      	subs	r5, r5, r0
    39ea:	0228      	lsls	r0, r5, #8
    39ec:	d400      	bmi.n	39f0 <__aeabi_dadd+0x254>
    39ee:	e089      	b.n	3b04 <__aeabi_dadd+0x368>
    39f0:	1bd7      	subs	r7, r2, r7
    39f2:	42ba      	cmp	r2, r7
    39f4:	4192      	sbcs	r2, r2
    39f6:	1b1c      	subs	r4, r3, r4
    39f8:	4252      	negs	r2, r2
    39fa:	1aa5      	subs	r5, r4, r2
    39fc:	46d8      	mov	r8, fp
    39fe:	e729      	b.n	3854 <__aeabi_dadd+0xb8>
    3a00:	4645      	mov	r5, r8
    3a02:	2400      	movs	r4, #0
    3a04:	2700      	movs	r7, #0
    3a06:	e76a      	b.n	38de <__aeabi_dadd+0x142>
    3a08:	4c45      	ldr	r4, [pc, #276]	; (3b20 <__aeabi_dadd+0x384>)
    3a0a:	1af6      	subs	r6, r6, r3
    3a0c:	402c      	ands	r4, r5
    3a0e:	e749      	b.n	38a4 <__aeabi_dadd+0x108>
    3a10:	003d      	movs	r5, r7
    3a12:	3828      	subs	r0, #40	; 0x28
    3a14:	4085      	lsls	r5, r0
    3a16:	2700      	movs	r7, #0
    3a18:	e72e      	b.n	3878 <__aeabi_dadd+0xdc>
    3a1a:	0038      	movs	r0, r7
    3a1c:	f001 fb04 	bl	5028 <__clzsi2>
    3a20:	3020      	adds	r0, #32
    3a22:	e71d      	b.n	3860 <__aeabi_dadd+0xc4>
    3a24:	430a      	orrs	r2, r1
    3a26:	1e51      	subs	r1, r2, #1
    3a28:	418a      	sbcs	r2, r1
    3a2a:	2100      	movs	r1, #0
    3a2c:	e707      	b.n	383e <__aeabi_dadd+0xa2>
    3a2e:	2b00      	cmp	r3, #0
    3a30:	d000      	beq.n	3a34 <__aeabi_dadd+0x298>
    3a32:	e0f3      	b.n	3c1c <__aeabi_dadd+0x480>
    3a34:	1c70      	adds	r0, r6, #1
    3a36:	0543      	lsls	r3, r0, #21
    3a38:	0d5b      	lsrs	r3, r3, #21
    3a3a:	2b01      	cmp	r3, #1
    3a3c:	dc00      	bgt.n	3a40 <__aeabi_dadd+0x2a4>
    3a3e:	e0ad      	b.n	3b9c <__aeabi_dadd+0x400>
    3a40:	4b36      	ldr	r3, [pc, #216]	; (3b1c <__aeabi_dadd+0x380>)
    3a42:	4298      	cmp	r0, r3
    3a44:	d100      	bne.n	3a48 <__aeabi_dadd+0x2ac>
    3a46:	e0d1      	b.n	3bec <__aeabi_dadd+0x450>
    3a48:	18ba      	adds	r2, r7, r2
    3a4a:	42ba      	cmp	r2, r7
    3a4c:	41bf      	sbcs	r7, r7
    3a4e:	1864      	adds	r4, r4, r1
    3a50:	427f      	negs	r7, r7
    3a52:	19e4      	adds	r4, r4, r7
    3a54:	07e7      	lsls	r7, r4, #31
    3a56:	0852      	lsrs	r2, r2, #1
    3a58:	4317      	orrs	r7, r2
    3a5a:	0864      	lsrs	r4, r4, #1
    3a5c:	0006      	movs	r6, r0
    3a5e:	e721      	b.n	38a4 <__aeabi_dadd+0x108>
    3a60:	482e      	ldr	r0, [pc, #184]	; (3b1c <__aeabi_dadd+0x380>)
    3a62:	4285      	cmp	r5, r0
    3a64:	d100      	bne.n	3a68 <__aeabi_dadd+0x2cc>
    3a66:	e093      	b.n	3b90 <__aeabi_dadd+0x3f4>
    3a68:	001d      	movs	r5, r3
    3a6a:	e6d0      	b.n	380e <__aeabi_dadd+0x72>
    3a6c:	0029      	movs	r1, r5
    3a6e:	3e1f      	subs	r6, #31
    3a70:	40f1      	lsrs	r1, r6
    3a72:	2b20      	cmp	r3, #32
    3a74:	d100      	bne.n	3a78 <__aeabi_dadd+0x2dc>
    3a76:	e08d      	b.n	3b94 <__aeabi_dadd+0x3f8>
    3a78:	2240      	movs	r2, #64	; 0x40
    3a7a:	1ad3      	subs	r3, r2, r3
    3a7c:	409d      	lsls	r5, r3
    3a7e:	432f      	orrs	r7, r5
    3a80:	1e7d      	subs	r5, r7, #1
    3a82:	41af      	sbcs	r7, r5
    3a84:	2400      	movs	r4, #0
    3a86:	430f      	orrs	r7, r1
    3a88:	2600      	movs	r6, #0
    3a8a:	e744      	b.n	3916 <__aeabi_dadd+0x17a>
    3a8c:	002b      	movs	r3, r5
    3a8e:	0008      	movs	r0, r1
    3a90:	3b20      	subs	r3, #32
    3a92:	40d8      	lsrs	r0, r3
    3a94:	0003      	movs	r3, r0
    3a96:	2d20      	cmp	r5, #32
    3a98:	d100      	bne.n	3a9c <__aeabi_dadd+0x300>
    3a9a:	e07d      	b.n	3b98 <__aeabi_dadd+0x3fc>
    3a9c:	2040      	movs	r0, #64	; 0x40
    3a9e:	1b45      	subs	r5, r0, r5
    3aa0:	40a9      	lsls	r1, r5
    3aa2:	430a      	orrs	r2, r1
    3aa4:	1e51      	subs	r1, r2, #1
    3aa6:	418a      	sbcs	r2, r1
    3aa8:	2100      	movs	r1, #0
    3aaa:	431a      	orrs	r2, r3
    3aac:	e6c7      	b.n	383e <__aeabi_dadd+0xa2>
    3aae:	2e00      	cmp	r6, #0
    3ab0:	d050      	beq.n	3b54 <__aeabi_dadd+0x3b8>
    3ab2:	4e1a      	ldr	r6, [pc, #104]	; (3b1c <__aeabi_dadd+0x380>)
    3ab4:	42b0      	cmp	r0, r6
    3ab6:	d057      	beq.n	3b68 <__aeabi_dadd+0x3cc>
    3ab8:	2680      	movs	r6, #128	; 0x80
    3aba:	426b      	negs	r3, r5
    3abc:	4699      	mov	r9, r3
    3abe:	0436      	lsls	r6, r6, #16
    3ac0:	4334      	orrs	r4, r6
    3ac2:	464b      	mov	r3, r9
    3ac4:	2b38      	cmp	r3, #56	; 0x38
    3ac6:	dd00      	ble.n	3aca <__aeabi_dadd+0x32e>
    3ac8:	e0d6      	b.n	3c78 <__aeabi_dadd+0x4dc>
    3aca:	2b1f      	cmp	r3, #31
    3acc:	dd00      	ble.n	3ad0 <__aeabi_dadd+0x334>
    3ace:	e135      	b.n	3d3c <__aeabi_dadd+0x5a0>
    3ad0:	2620      	movs	r6, #32
    3ad2:	1af5      	subs	r5, r6, r3
    3ad4:	0026      	movs	r6, r4
    3ad6:	40ae      	lsls	r6, r5
    3ad8:	46b2      	mov	sl, r6
    3ada:	003e      	movs	r6, r7
    3adc:	40de      	lsrs	r6, r3
    3ade:	46ac      	mov	ip, r5
    3ae0:	0035      	movs	r5, r6
    3ae2:	4656      	mov	r6, sl
    3ae4:	432e      	orrs	r6, r5
    3ae6:	4665      	mov	r5, ip
    3ae8:	40af      	lsls	r7, r5
    3aea:	1e7d      	subs	r5, r7, #1
    3aec:	41af      	sbcs	r7, r5
    3aee:	40dc      	lsrs	r4, r3
    3af0:	4337      	orrs	r7, r6
    3af2:	1bd7      	subs	r7, r2, r7
    3af4:	42ba      	cmp	r2, r7
    3af6:	4192      	sbcs	r2, r2
    3af8:	1b0c      	subs	r4, r1, r4
    3afa:	4252      	negs	r2, r2
    3afc:	1aa4      	subs	r4, r4, r2
    3afe:	0006      	movs	r6, r0
    3b00:	46d8      	mov	r8, fp
    3b02:	e6a3      	b.n	384c <__aeabi_dadd+0xb0>
    3b04:	4664      	mov	r4, ip
    3b06:	4667      	mov	r7, ip
    3b08:	432c      	orrs	r4, r5
    3b0a:	d000      	beq.n	3b0e <__aeabi_dadd+0x372>
    3b0c:	e6a2      	b.n	3854 <__aeabi_dadd+0xb8>
    3b0e:	2500      	movs	r5, #0
    3b10:	2600      	movs	r6, #0
    3b12:	2700      	movs	r7, #0
    3b14:	e706      	b.n	3924 <__aeabi_dadd+0x188>
    3b16:	001e      	movs	r6, r3
    3b18:	e6c4      	b.n	38a4 <__aeabi_dadd+0x108>
    3b1a:	46c0      	nop			; (mov r8, r8)
    3b1c:	000007ff 	.word	0x000007ff
    3b20:	ff7fffff 	.word	0xff7fffff
    3b24:	800fffff 	.word	0x800fffff
    3b28:	2b1f      	cmp	r3, #31
    3b2a:	dc63      	bgt.n	3bf4 <__aeabi_dadd+0x458>
    3b2c:	2020      	movs	r0, #32
    3b2e:	1ac3      	subs	r3, r0, r3
    3b30:	0008      	movs	r0, r1
    3b32:	4098      	lsls	r0, r3
    3b34:	469c      	mov	ip, r3
    3b36:	4683      	mov	fp, r0
    3b38:	4653      	mov	r3, sl
    3b3a:	0010      	movs	r0, r2
    3b3c:	40d8      	lsrs	r0, r3
    3b3e:	0003      	movs	r3, r0
    3b40:	4658      	mov	r0, fp
    3b42:	4318      	orrs	r0, r3
    3b44:	4663      	mov	r3, ip
    3b46:	409a      	lsls	r2, r3
    3b48:	1e53      	subs	r3, r2, #1
    3b4a:	419a      	sbcs	r2, r3
    3b4c:	4653      	mov	r3, sl
    3b4e:	4302      	orrs	r2, r0
    3b50:	40d9      	lsrs	r1, r3
    3b52:	e703      	b.n	395c <__aeabi_dadd+0x1c0>
    3b54:	0026      	movs	r6, r4
    3b56:	433e      	orrs	r6, r7
    3b58:	d006      	beq.n	3b68 <__aeabi_dadd+0x3cc>
    3b5a:	43eb      	mvns	r3, r5
    3b5c:	4699      	mov	r9, r3
    3b5e:	2b00      	cmp	r3, #0
    3b60:	d0c7      	beq.n	3af2 <__aeabi_dadd+0x356>
    3b62:	4e94      	ldr	r6, [pc, #592]	; (3db4 <__aeabi_dadd+0x618>)
    3b64:	42b0      	cmp	r0, r6
    3b66:	d1ac      	bne.n	3ac2 <__aeabi_dadd+0x326>
    3b68:	000c      	movs	r4, r1
    3b6a:	0017      	movs	r7, r2
    3b6c:	0006      	movs	r6, r0
    3b6e:	46d8      	mov	r8, fp
    3b70:	e698      	b.n	38a4 <__aeabi_dadd+0x108>
    3b72:	4b90      	ldr	r3, [pc, #576]	; (3db4 <__aeabi_dadd+0x618>)
    3b74:	459a      	cmp	sl, r3
    3b76:	d00b      	beq.n	3b90 <__aeabi_dadd+0x3f4>
    3b78:	4682      	mov	sl, r0
    3b7a:	e6e7      	b.n	394c <__aeabi_dadd+0x1b0>
    3b7c:	2800      	cmp	r0, #0
    3b7e:	d000      	beq.n	3b82 <__aeabi_dadd+0x3e6>
    3b80:	e09e      	b.n	3cc0 <__aeabi_dadd+0x524>
    3b82:	0018      	movs	r0, r3
    3b84:	4310      	orrs	r0, r2
    3b86:	d100      	bne.n	3b8a <__aeabi_dadd+0x3ee>
    3b88:	e0e9      	b.n	3d5e <__aeabi_dadd+0x5c2>
    3b8a:	001c      	movs	r4, r3
    3b8c:	0017      	movs	r7, r2
    3b8e:	46d8      	mov	r8, fp
    3b90:	4e88      	ldr	r6, [pc, #544]	; (3db4 <__aeabi_dadd+0x618>)
    3b92:	e687      	b.n	38a4 <__aeabi_dadd+0x108>
    3b94:	2500      	movs	r5, #0
    3b96:	e772      	b.n	3a7e <__aeabi_dadd+0x2e2>
    3b98:	2100      	movs	r1, #0
    3b9a:	e782      	b.n	3aa2 <__aeabi_dadd+0x306>
    3b9c:	0023      	movs	r3, r4
    3b9e:	433b      	orrs	r3, r7
    3ba0:	2e00      	cmp	r6, #0
    3ba2:	d000      	beq.n	3ba6 <__aeabi_dadd+0x40a>
    3ba4:	e0ab      	b.n	3cfe <__aeabi_dadd+0x562>
    3ba6:	2b00      	cmp	r3, #0
    3ba8:	d100      	bne.n	3bac <__aeabi_dadd+0x410>
    3baa:	e0e7      	b.n	3d7c <__aeabi_dadd+0x5e0>
    3bac:	000b      	movs	r3, r1
    3bae:	4313      	orrs	r3, r2
    3bb0:	d100      	bne.n	3bb4 <__aeabi_dadd+0x418>
    3bb2:	e677      	b.n	38a4 <__aeabi_dadd+0x108>
    3bb4:	18ba      	adds	r2, r7, r2
    3bb6:	42ba      	cmp	r2, r7
    3bb8:	41bf      	sbcs	r7, r7
    3bba:	1864      	adds	r4, r4, r1
    3bbc:	427f      	negs	r7, r7
    3bbe:	19e4      	adds	r4, r4, r7
    3bc0:	0223      	lsls	r3, r4, #8
    3bc2:	d400      	bmi.n	3bc6 <__aeabi_dadd+0x42a>
    3bc4:	e0f2      	b.n	3dac <__aeabi_dadd+0x610>
    3bc6:	4b7c      	ldr	r3, [pc, #496]	; (3db8 <__aeabi_dadd+0x61c>)
    3bc8:	0017      	movs	r7, r2
    3bca:	401c      	ands	r4, r3
    3bcc:	0006      	movs	r6, r0
    3bce:	e669      	b.n	38a4 <__aeabi_dadd+0x108>
    3bd0:	0020      	movs	r0, r4
    3bd2:	4338      	orrs	r0, r7
    3bd4:	2e00      	cmp	r6, #0
    3bd6:	d1d1      	bne.n	3b7c <__aeabi_dadd+0x3e0>
    3bd8:	2800      	cmp	r0, #0
    3bda:	d15b      	bne.n	3c94 <__aeabi_dadd+0x4f8>
    3bdc:	001c      	movs	r4, r3
    3bde:	4314      	orrs	r4, r2
    3be0:	d100      	bne.n	3be4 <__aeabi_dadd+0x448>
    3be2:	e0a8      	b.n	3d36 <__aeabi_dadd+0x59a>
    3be4:	001c      	movs	r4, r3
    3be6:	0017      	movs	r7, r2
    3be8:	46d8      	mov	r8, fp
    3bea:	e65b      	b.n	38a4 <__aeabi_dadd+0x108>
    3bec:	0006      	movs	r6, r0
    3bee:	2400      	movs	r4, #0
    3bf0:	2700      	movs	r7, #0
    3bf2:	e697      	b.n	3924 <__aeabi_dadd+0x188>
    3bf4:	4650      	mov	r0, sl
    3bf6:	000b      	movs	r3, r1
    3bf8:	3820      	subs	r0, #32
    3bfa:	40c3      	lsrs	r3, r0
    3bfc:	4699      	mov	r9, r3
    3bfe:	4653      	mov	r3, sl
    3c00:	2b20      	cmp	r3, #32
    3c02:	d100      	bne.n	3c06 <__aeabi_dadd+0x46a>
    3c04:	e095      	b.n	3d32 <__aeabi_dadd+0x596>
    3c06:	2340      	movs	r3, #64	; 0x40
    3c08:	4650      	mov	r0, sl
    3c0a:	1a1b      	subs	r3, r3, r0
    3c0c:	4099      	lsls	r1, r3
    3c0e:	430a      	orrs	r2, r1
    3c10:	1e51      	subs	r1, r2, #1
    3c12:	418a      	sbcs	r2, r1
    3c14:	464b      	mov	r3, r9
    3c16:	2100      	movs	r1, #0
    3c18:	431a      	orrs	r2, r3
    3c1a:	e69f      	b.n	395c <__aeabi_dadd+0x1c0>
    3c1c:	2e00      	cmp	r6, #0
    3c1e:	d130      	bne.n	3c82 <__aeabi_dadd+0x4e6>
    3c20:	0026      	movs	r6, r4
    3c22:	433e      	orrs	r6, r7
    3c24:	d067      	beq.n	3cf6 <__aeabi_dadd+0x55a>
    3c26:	43db      	mvns	r3, r3
    3c28:	469a      	mov	sl, r3
    3c2a:	2b00      	cmp	r3, #0
    3c2c:	d01c      	beq.n	3c68 <__aeabi_dadd+0x4cc>
    3c2e:	4e61      	ldr	r6, [pc, #388]	; (3db4 <__aeabi_dadd+0x618>)
    3c30:	42b0      	cmp	r0, r6
    3c32:	d060      	beq.n	3cf6 <__aeabi_dadd+0x55a>
    3c34:	4653      	mov	r3, sl
    3c36:	2b38      	cmp	r3, #56	; 0x38
    3c38:	dd00      	ble.n	3c3c <__aeabi_dadd+0x4a0>
    3c3a:	e096      	b.n	3d6a <__aeabi_dadd+0x5ce>
    3c3c:	2b1f      	cmp	r3, #31
    3c3e:	dd00      	ble.n	3c42 <__aeabi_dadd+0x4a6>
    3c40:	e09f      	b.n	3d82 <__aeabi_dadd+0x5e6>
    3c42:	2620      	movs	r6, #32
    3c44:	1af3      	subs	r3, r6, r3
    3c46:	0026      	movs	r6, r4
    3c48:	409e      	lsls	r6, r3
    3c4a:	469c      	mov	ip, r3
    3c4c:	46b3      	mov	fp, r6
    3c4e:	4653      	mov	r3, sl
    3c50:	003e      	movs	r6, r7
    3c52:	40de      	lsrs	r6, r3
    3c54:	0033      	movs	r3, r6
    3c56:	465e      	mov	r6, fp
    3c58:	431e      	orrs	r6, r3
    3c5a:	4663      	mov	r3, ip
    3c5c:	409f      	lsls	r7, r3
    3c5e:	1e7b      	subs	r3, r7, #1
    3c60:	419f      	sbcs	r7, r3
    3c62:	4653      	mov	r3, sl
    3c64:	40dc      	lsrs	r4, r3
    3c66:	4337      	orrs	r7, r6
    3c68:	18bf      	adds	r7, r7, r2
    3c6a:	4297      	cmp	r7, r2
    3c6c:	4192      	sbcs	r2, r2
    3c6e:	1864      	adds	r4, r4, r1
    3c70:	4252      	negs	r2, r2
    3c72:	18a4      	adds	r4, r4, r2
    3c74:	0006      	movs	r6, r0
    3c76:	e678      	b.n	396a <__aeabi_dadd+0x1ce>
    3c78:	4327      	orrs	r7, r4
    3c7a:	1e7c      	subs	r4, r7, #1
    3c7c:	41a7      	sbcs	r7, r4
    3c7e:	2400      	movs	r4, #0
    3c80:	e737      	b.n	3af2 <__aeabi_dadd+0x356>
    3c82:	4e4c      	ldr	r6, [pc, #304]	; (3db4 <__aeabi_dadd+0x618>)
    3c84:	42b0      	cmp	r0, r6
    3c86:	d036      	beq.n	3cf6 <__aeabi_dadd+0x55a>
    3c88:	2680      	movs	r6, #128	; 0x80
    3c8a:	425b      	negs	r3, r3
    3c8c:	0436      	lsls	r6, r6, #16
    3c8e:	469a      	mov	sl, r3
    3c90:	4334      	orrs	r4, r6
    3c92:	e7cf      	b.n	3c34 <__aeabi_dadd+0x498>
    3c94:	0018      	movs	r0, r3
    3c96:	4310      	orrs	r0, r2
    3c98:	d100      	bne.n	3c9c <__aeabi_dadd+0x500>
    3c9a:	e603      	b.n	38a4 <__aeabi_dadd+0x108>
    3c9c:	1ab8      	subs	r0, r7, r2
    3c9e:	4684      	mov	ip, r0
    3ca0:	4567      	cmp	r7, ip
    3ca2:	41ad      	sbcs	r5, r5
    3ca4:	1ae0      	subs	r0, r4, r3
    3ca6:	426d      	negs	r5, r5
    3ca8:	1b40      	subs	r0, r0, r5
    3caa:	0205      	lsls	r5, r0, #8
    3cac:	d400      	bmi.n	3cb0 <__aeabi_dadd+0x514>
    3cae:	e62c      	b.n	390a <__aeabi_dadd+0x16e>
    3cb0:	1bd7      	subs	r7, r2, r7
    3cb2:	42ba      	cmp	r2, r7
    3cb4:	4192      	sbcs	r2, r2
    3cb6:	1b1c      	subs	r4, r3, r4
    3cb8:	4252      	negs	r2, r2
    3cba:	1aa4      	subs	r4, r4, r2
    3cbc:	46d8      	mov	r8, fp
    3cbe:	e5f1      	b.n	38a4 <__aeabi_dadd+0x108>
    3cc0:	0018      	movs	r0, r3
    3cc2:	4310      	orrs	r0, r2
    3cc4:	d100      	bne.n	3cc8 <__aeabi_dadd+0x52c>
    3cc6:	e763      	b.n	3b90 <__aeabi_dadd+0x3f4>
    3cc8:	08f8      	lsrs	r0, r7, #3
    3cca:	0767      	lsls	r7, r4, #29
    3ccc:	4307      	orrs	r7, r0
    3cce:	2080      	movs	r0, #128	; 0x80
    3cd0:	08e4      	lsrs	r4, r4, #3
    3cd2:	0300      	lsls	r0, r0, #12
    3cd4:	4204      	tst	r4, r0
    3cd6:	d008      	beq.n	3cea <__aeabi_dadd+0x54e>
    3cd8:	08dd      	lsrs	r5, r3, #3
    3cda:	4205      	tst	r5, r0
    3cdc:	d105      	bne.n	3cea <__aeabi_dadd+0x54e>
    3cde:	08d2      	lsrs	r2, r2, #3
    3ce0:	0759      	lsls	r1, r3, #29
    3ce2:	4311      	orrs	r1, r2
    3ce4:	000f      	movs	r7, r1
    3ce6:	002c      	movs	r4, r5
    3ce8:	46d8      	mov	r8, fp
    3cea:	0f7b      	lsrs	r3, r7, #29
    3cec:	00e4      	lsls	r4, r4, #3
    3cee:	431c      	orrs	r4, r3
    3cf0:	00ff      	lsls	r7, r7, #3
    3cf2:	4e30      	ldr	r6, [pc, #192]	; (3db4 <__aeabi_dadd+0x618>)
    3cf4:	e5d6      	b.n	38a4 <__aeabi_dadd+0x108>
    3cf6:	000c      	movs	r4, r1
    3cf8:	0017      	movs	r7, r2
    3cfa:	0006      	movs	r6, r0
    3cfc:	e5d2      	b.n	38a4 <__aeabi_dadd+0x108>
    3cfe:	2b00      	cmp	r3, #0
    3d00:	d038      	beq.n	3d74 <__aeabi_dadd+0x5d8>
    3d02:	000b      	movs	r3, r1
    3d04:	4313      	orrs	r3, r2
    3d06:	d100      	bne.n	3d0a <__aeabi_dadd+0x56e>
    3d08:	e742      	b.n	3b90 <__aeabi_dadd+0x3f4>
    3d0a:	08f8      	lsrs	r0, r7, #3
    3d0c:	0767      	lsls	r7, r4, #29
    3d0e:	4307      	orrs	r7, r0
    3d10:	2080      	movs	r0, #128	; 0x80
    3d12:	08e4      	lsrs	r4, r4, #3
    3d14:	0300      	lsls	r0, r0, #12
    3d16:	4204      	tst	r4, r0
    3d18:	d0e7      	beq.n	3cea <__aeabi_dadd+0x54e>
    3d1a:	08cb      	lsrs	r3, r1, #3
    3d1c:	4203      	tst	r3, r0
    3d1e:	d1e4      	bne.n	3cea <__aeabi_dadd+0x54e>
    3d20:	08d2      	lsrs	r2, r2, #3
    3d22:	0749      	lsls	r1, r1, #29
    3d24:	4311      	orrs	r1, r2
    3d26:	000f      	movs	r7, r1
    3d28:	001c      	movs	r4, r3
    3d2a:	e7de      	b.n	3cea <__aeabi_dadd+0x54e>
    3d2c:	2700      	movs	r7, #0
    3d2e:	2400      	movs	r4, #0
    3d30:	e5d5      	b.n	38de <__aeabi_dadd+0x142>
    3d32:	2100      	movs	r1, #0
    3d34:	e76b      	b.n	3c0e <__aeabi_dadd+0x472>
    3d36:	2500      	movs	r5, #0
    3d38:	2700      	movs	r7, #0
    3d3a:	e5f3      	b.n	3924 <__aeabi_dadd+0x188>
    3d3c:	464e      	mov	r6, r9
    3d3e:	0025      	movs	r5, r4
    3d40:	3e20      	subs	r6, #32
    3d42:	40f5      	lsrs	r5, r6
    3d44:	464b      	mov	r3, r9
    3d46:	002e      	movs	r6, r5
    3d48:	2b20      	cmp	r3, #32
    3d4a:	d02d      	beq.n	3da8 <__aeabi_dadd+0x60c>
    3d4c:	2540      	movs	r5, #64	; 0x40
    3d4e:	1aed      	subs	r5, r5, r3
    3d50:	40ac      	lsls	r4, r5
    3d52:	4327      	orrs	r7, r4
    3d54:	1e7c      	subs	r4, r7, #1
    3d56:	41a7      	sbcs	r7, r4
    3d58:	2400      	movs	r4, #0
    3d5a:	4337      	orrs	r7, r6
    3d5c:	e6c9      	b.n	3af2 <__aeabi_dadd+0x356>
    3d5e:	2480      	movs	r4, #128	; 0x80
    3d60:	2500      	movs	r5, #0
    3d62:	0324      	lsls	r4, r4, #12
    3d64:	4e13      	ldr	r6, [pc, #76]	; (3db4 <__aeabi_dadd+0x618>)
    3d66:	2700      	movs	r7, #0
    3d68:	e5dc      	b.n	3924 <__aeabi_dadd+0x188>
    3d6a:	4327      	orrs	r7, r4
    3d6c:	1e7c      	subs	r4, r7, #1
    3d6e:	41a7      	sbcs	r7, r4
    3d70:	2400      	movs	r4, #0
    3d72:	e779      	b.n	3c68 <__aeabi_dadd+0x4cc>
    3d74:	000c      	movs	r4, r1
    3d76:	0017      	movs	r7, r2
    3d78:	4e0e      	ldr	r6, [pc, #56]	; (3db4 <__aeabi_dadd+0x618>)
    3d7a:	e593      	b.n	38a4 <__aeabi_dadd+0x108>
    3d7c:	000c      	movs	r4, r1
    3d7e:	0017      	movs	r7, r2
    3d80:	e590      	b.n	38a4 <__aeabi_dadd+0x108>
    3d82:	4656      	mov	r6, sl
    3d84:	0023      	movs	r3, r4
    3d86:	3e20      	subs	r6, #32
    3d88:	40f3      	lsrs	r3, r6
    3d8a:	4699      	mov	r9, r3
    3d8c:	4653      	mov	r3, sl
    3d8e:	2b20      	cmp	r3, #32
    3d90:	d00e      	beq.n	3db0 <__aeabi_dadd+0x614>
    3d92:	2340      	movs	r3, #64	; 0x40
    3d94:	4656      	mov	r6, sl
    3d96:	1b9b      	subs	r3, r3, r6
    3d98:	409c      	lsls	r4, r3
    3d9a:	4327      	orrs	r7, r4
    3d9c:	1e7c      	subs	r4, r7, #1
    3d9e:	41a7      	sbcs	r7, r4
    3da0:	464b      	mov	r3, r9
    3da2:	2400      	movs	r4, #0
    3da4:	431f      	orrs	r7, r3
    3da6:	e75f      	b.n	3c68 <__aeabi_dadd+0x4cc>
    3da8:	2400      	movs	r4, #0
    3daa:	e7d2      	b.n	3d52 <__aeabi_dadd+0x5b6>
    3dac:	0017      	movs	r7, r2
    3dae:	e5b2      	b.n	3916 <__aeabi_dadd+0x17a>
    3db0:	2400      	movs	r4, #0
    3db2:	e7f2      	b.n	3d9a <__aeabi_dadd+0x5fe>
    3db4:	000007ff 	.word	0x000007ff
    3db8:	ff7fffff 	.word	0xff7fffff

00003dbc <__aeabi_ddiv>:
    3dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dbe:	4657      	mov	r7, sl
    3dc0:	4645      	mov	r5, r8
    3dc2:	46de      	mov	lr, fp
    3dc4:	464e      	mov	r6, r9
    3dc6:	b5e0      	push	{r5, r6, r7, lr}
    3dc8:	004c      	lsls	r4, r1, #1
    3dca:	030e      	lsls	r6, r1, #12
    3dcc:	b087      	sub	sp, #28
    3dce:	4683      	mov	fp, r0
    3dd0:	4692      	mov	sl, r2
    3dd2:	001d      	movs	r5, r3
    3dd4:	4680      	mov	r8, r0
    3dd6:	0b36      	lsrs	r6, r6, #12
    3dd8:	0d64      	lsrs	r4, r4, #21
    3dda:	0fcf      	lsrs	r7, r1, #31
    3ddc:	2c00      	cmp	r4, #0
    3dde:	d04f      	beq.n	3e80 <__aeabi_ddiv+0xc4>
    3de0:	4b6f      	ldr	r3, [pc, #444]	; (3fa0 <__aeabi_ddiv+0x1e4>)
    3de2:	429c      	cmp	r4, r3
    3de4:	d035      	beq.n	3e52 <__aeabi_ddiv+0x96>
    3de6:	2380      	movs	r3, #128	; 0x80
    3de8:	0f42      	lsrs	r2, r0, #29
    3dea:	041b      	lsls	r3, r3, #16
    3dec:	00f6      	lsls	r6, r6, #3
    3dee:	4313      	orrs	r3, r2
    3df0:	4333      	orrs	r3, r6
    3df2:	4699      	mov	r9, r3
    3df4:	00c3      	lsls	r3, r0, #3
    3df6:	4698      	mov	r8, r3
    3df8:	4b6a      	ldr	r3, [pc, #424]	; (3fa4 <__aeabi_ddiv+0x1e8>)
    3dfa:	2600      	movs	r6, #0
    3dfc:	469c      	mov	ip, r3
    3dfe:	2300      	movs	r3, #0
    3e00:	4464      	add	r4, ip
    3e02:	9303      	str	r3, [sp, #12]
    3e04:	032b      	lsls	r3, r5, #12
    3e06:	0b1b      	lsrs	r3, r3, #12
    3e08:	469b      	mov	fp, r3
    3e0a:	006b      	lsls	r3, r5, #1
    3e0c:	0fed      	lsrs	r5, r5, #31
    3e0e:	4650      	mov	r0, sl
    3e10:	0d5b      	lsrs	r3, r3, #21
    3e12:	9501      	str	r5, [sp, #4]
    3e14:	d05e      	beq.n	3ed4 <__aeabi_ddiv+0x118>
    3e16:	4a62      	ldr	r2, [pc, #392]	; (3fa0 <__aeabi_ddiv+0x1e4>)
    3e18:	4293      	cmp	r3, r2
    3e1a:	d053      	beq.n	3ec4 <__aeabi_ddiv+0x108>
    3e1c:	465a      	mov	r2, fp
    3e1e:	00d1      	lsls	r1, r2, #3
    3e20:	2280      	movs	r2, #128	; 0x80
    3e22:	0f40      	lsrs	r0, r0, #29
    3e24:	0412      	lsls	r2, r2, #16
    3e26:	4302      	orrs	r2, r0
    3e28:	430a      	orrs	r2, r1
    3e2a:	4693      	mov	fp, r2
    3e2c:	4652      	mov	r2, sl
    3e2e:	00d1      	lsls	r1, r2, #3
    3e30:	4a5c      	ldr	r2, [pc, #368]	; (3fa4 <__aeabi_ddiv+0x1e8>)
    3e32:	4694      	mov	ip, r2
    3e34:	2200      	movs	r2, #0
    3e36:	4463      	add	r3, ip
    3e38:	0038      	movs	r0, r7
    3e3a:	4068      	eors	r0, r5
    3e3c:	4684      	mov	ip, r0
    3e3e:	9002      	str	r0, [sp, #8]
    3e40:	1ae4      	subs	r4, r4, r3
    3e42:	4316      	orrs	r6, r2
    3e44:	2e0f      	cmp	r6, #15
    3e46:	d900      	bls.n	3e4a <__aeabi_ddiv+0x8e>
    3e48:	e0b4      	b.n	3fb4 <__aeabi_ddiv+0x1f8>
    3e4a:	4b57      	ldr	r3, [pc, #348]	; (3fa8 <__aeabi_ddiv+0x1ec>)
    3e4c:	00b6      	lsls	r6, r6, #2
    3e4e:	599b      	ldr	r3, [r3, r6]
    3e50:	469f      	mov	pc, r3
    3e52:	0003      	movs	r3, r0
    3e54:	4333      	orrs	r3, r6
    3e56:	4699      	mov	r9, r3
    3e58:	d16c      	bne.n	3f34 <__aeabi_ddiv+0x178>
    3e5a:	2300      	movs	r3, #0
    3e5c:	4698      	mov	r8, r3
    3e5e:	3302      	adds	r3, #2
    3e60:	2608      	movs	r6, #8
    3e62:	9303      	str	r3, [sp, #12]
    3e64:	e7ce      	b.n	3e04 <__aeabi_ddiv+0x48>
    3e66:	46cb      	mov	fp, r9
    3e68:	4641      	mov	r1, r8
    3e6a:	9a03      	ldr	r2, [sp, #12]
    3e6c:	9701      	str	r7, [sp, #4]
    3e6e:	2a02      	cmp	r2, #2
    3e70:	d165      	bne.n	3f3e <__aeabi_ddiv+0x182>
    3e72:	9b01      	ldr	r3, [sp, #4]
    3e74:	4c4a      	ldr	r4, [pc, #296]	; (3fa0 <__aeabi_ddiv+0x1e4>)
    3e76:	469c      	mov	ip, r3
    3e78:	2300      	movs	r3, #0
    3e7a:	2200      	movs	r2, #0
    3e7c:	4698      	mov	r8, r3
    3e7e:	e06b      	b.n	3f58 <__aeabi_ddiv+0x19c>
    3e80:	0003      	movs	r3, r0
    3e82:	4333      	orrs	r3, r6
    3e84:	4699      	mov	r9, r3
    3e86:	d04e      	beq.n	3f26 <__aeabi_ddiv+0x16a>
    3e88:	2e00      	cmp	r6, #0
    3e8a:	d100      	bne.n	3e8e <__aeabi_ddiv+0xd2>
    3e8c:	e1bc      	b.n	4208 <__aeabi_ddiv+0x44c>
    3e8e:	0030      	movs	r0, r6
    3e90:	f001 f8ca 	bl	5028 <__clzsi2>
    3e94:	0003      	movs	r3, r0
    3e96:	3b0b      	subs	r3, #11
    3e98:	2b1c      	cmp	r3, #28
    3e9a:	dd00      	ble.n	3e9e <__aeabi_ddiv+0xe2>
    3e9c:	e1ac      	b.n	41f8 <__aeabi_ddiv+0x43c>
    3e9e:	221d      	movs	r2, #29
    3ea0:	1ad3      	subs	r3, r2, r3
    3ea2:	465a      	mov	r2, fp
    3ea4:	0001      	movs	r1, r0
    3ea6:	40da      	lsrs	r2, r3
    3ea8:	3908      	subs	r1, #8
    3eaa:	408e      	lsls	r6, r1
    3eac:	0013      	movs	r3, r2
    3eae:	4333      	orrs	r3, r6
    3eb0:	4699      	mov	r9, r3
    3eb2:	465b      	mov	r3, fp
    3eb4:	408b      	lsls	r3, r1
    3eb6:	4698      	mov	r8, r3
    3eb8:	2300      	movs	r3, #0
    3eba:	4c3c      	ldr	r4, [pc, #240]	; (3fac <__aeabi_ddiv+0x1f0>)
    3ebc:	2600      	movs	r6, #0
    3ebe:	1a24      	subs	r4, r4, r0
    3ec0:	9303      	str	r3, [sp, #12]
    3ec2:	e79f      	b.n	3e04 <__aeabi_ddiv+0x48>
    3ec4:	4651      	mov	r1, sl
    3ec6:	465a      	mov	r2, fp
    3ec8:	4311      	orrs	r1, r2
    3eca:	d129      	bne.n	3f20 <__aeabi_ddiv+0x164>
    3ecc:	2200      	movs	r2, #0
    3ece:	4693      	mov	fp, r2
    3ed0:	3202      	adds	r2, #2
    3ed2:	e7b1      	b.n	3e38 <__aeabi_ddiv+0x7c>
    3ed4:	4659      	mov	r1, fp
    3ed6:	4301      	orrs	r1, r0
    3ed8:	d01e      	beq.n	3f18 <__aeabi_ddiv+0x15c>
    3eda:	465b      	mov	r3, fp
    3edc:	2b00      	cmp	r3, #0
    3ede:	d100      	bne.n	3ee2 <__aeabi_ddiv+0x126>
    3ee0:	e19e      	b.n	4220 <__aeabi_ddiv+0x464>
    3ee2:	4658      	mov	r0, fp
    3ee4:	f001 f8a0 	bl	5028 <__clzsi2>
    3ee8:	0003      	movs	r3, r0
    3eea:	3b0b      	subs	r3, #11
    3eec:	2b1c      	cmp	r3, #28
    3eee:	dd00      	ble.n	3ef2 <__aeabi_ddiv+0x136>
    3ef0:	e18f      	b.n	4212 <__aeabi_ddiv+0x456>
    3ef2:	0002      	movs	r2, r0
    3ef4:	4659      	mov	r1, fp
    3ef6:	3a08      	subs	r2, #8
    3ef8:	4091      	lsls	r1, r2
    3efa:	468b      	mov	fp, r1
    3efc:	211d      	movs	r1, #29
    3efe:	1acb      	subs	r3, r1, r3
    3f00:	4651      	mov	r1, sl
    3f02:	40d9      	lsrs	r1, r3
    3f04:	000b      	movs	r3, r1
    3f06:	4659      	mov	r1, fp
    3f08:	430b      	orrs	r3, r1
    3f0a:	4651      	mov	r1, sl
    3f0c:	469b      	mov	fp, r3
    3f0e:	4091      	lsls	r1, r2
    3f10:	4b26      	ldr	r3, [pc, #152]	; (3fac <__aeabi_ddiv+0x1f0>)
    3f12:	2200      	movs	r2, #0
    3f14:	1a1b      	subs	r3, r3, r0
    3f16:	e78f      	b.n	3e38 <__aeabi_ddiv+0x7c>
    3f18:	2300      	movs	r3, #0
    3f1a:	2201      	movs	r2, #1
    3f1c:	469b      	mov	fp, r3
    3f1e:	e78b      	b.n	3e38 <__aeabi_ddiv+0x7c>
    3f20:	4651      	mov	r1, sl
    3f22:	2203      	movs	r2, #3
    3f24:	e788      	b.n	3e38 <__aeabi_ddiv+0x7c>
    3f26:	2300      	movs	r3, #0
    3f28:	4698      	mov	r8, r3
    3f2a:	3301      	adds	r3, #1
    3f2c:	2604      	movs	r6, #4
    3f2e:	2400      	movs	r4, #0
    3f30:	9303      	str	r3, [sp, #12]
    3f32:	e767      	b.n	3e04 <__aeabi_ddiv+0x48>
    3f34:	2303      	movs	r3, #3
    3f36:	46b1      	mov	r9, r6
    3f38:	9303      	str	r3, [sp, #12]
    3f3a:	260c      	movs	r6, #12
    3f3c:	e762      	b.n	3e04 <__aeabi_ddiv+0x48>
    3f3e:	2a03      	cmp	r2, #3
    3f40:	d100      	bne.n	3f44 <__aeabi_ddiv+0x188>
    3f42:	e25c      	b.n	43fe <__aeabi_ddiv+0x642>
    3f44:	9b01      	ldr	r3, [sp, #4]
    3f46:	2a01      	cmp	r2, #1
    3f48:	d000      	beq.n	3f4c <__aeabi_ddiv+0x190>
    3f4a:	e1e4      	b.n	4316 <__aeabi_ddiv+0x55a>
    3f4c:	4013      	ands	r3, r2
    3f4e:	469c      	mov	ip, r3
    3f50:	2300      	movs	r3, #0
    3f52:	2400      	movs	r4, #0
    3f54:	2200      	movs	r2, #0
    3f56:	4698      	mov	r8, r3
    3f58:	2100      	movs	r1, #0
    3f5a:	0312      	lsls	r2, r2, #12
    3f5c:	0b13      	lsrs	r3, r2, #12
    3f5e:	0d0a      	lsrs	r2, r1, #20
    3f60:	0512      	lsls	r2, r2, #20
    3f62:	431a      	orrs	r2, r3
    3f64:	0523      	lsls	r3, r4, #20
    3f66:	4c12      	ldr	r4, [pc, #72]	; (3fb0 <__aeabi_ddiv+0x1f4>)
    3f68:	4640      	mov	r0, r8
    3f6a:	4022      	ands	r2, r4
    3f6c:	4313      	orrs	r3, r2
    3f6e:	4662      	mov	r2, ip
    3f70:	005b      	lsls	r3, r3, #1
    3f72:	07d2      	lsls	r2, r2, #31
    3f74:	085b      	lsrs	r3, r3, #1
    3f76:	4313      	orrs	r3, r2
    3f78:	0019      	movs	r1, r3
    3f7a:	b007      	add	sp, #28
    3f7c:	bc3c      	pop	{r2, r3, r4, r5}
    3f7e:	4690      	mov	r8, r2
    3f80:	4699      	mov	r9, r3
    3f82:	46a2      	mov	sl, r4
    3f84:	46ab      	mov	fp, r5
    3f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f88:	2300      	movs	r3, #0
    3f8a:	2280      	movs	r2, #128	; 0x80
    3f8c:	469c      	mov	ip, r3
    3f8e:	0312      	lsls	r2, r2, #12
    3f90:	4698      	mov	r8, r3
    3f92:	4c03      	ldr	r4, [pc, #12]	; (3fa0 <__aeabi_ddiv+0x1e4>)
    3f94:	e7e0      	b.n	3f58 <__aeabi_ddiv+0x19c>
    3f96:	2300      	movs	r3, #0
    3f98:	4c01      	ldr	r4, [pc, #4]	; (3fa0 <__aeabi_ddiv+0x1e4>)
    3f9a:	2200      	movs	r2, #0
    3f9c:	4698      	mov	r8, r3
    3f9e:	e7db      	b.n	3f58 <__aeabi_ddiv+0x19c>
    3fa0:	000007ff 	.word	0x000007ff
    3fa4:	fffffc01 	.word	0xfffffc01
    3fa8:	00005ae4 	.word	0x00005ae4
    3fac:	fffffc0d 	.word	0xfffffc0d
    3fb0:	800fffff 	.word	0x800fffff
    3fb4:	45d9      	cmp	r9, fp
    3fb6:	d900      	bls.n	3fba <__aeabi_ddiv+0x1fe>
    3fb8:	e139      	b.n	422e <__aeabi_ddiv+0x472>
    3fba:	d100      	bne.n	3fbe <__aeabi_ddiv+0x202>
    3fbc:	e134      	b.n	4228 <__aeabi_ddiv+0x46c>
    3fbe:	2300      	movs	r3, #0
    3fc0:	4646      	mov	r6, r8
    3fc2:	464d      	mov	r5, r9
    3fc4:	469a      	mov	sl, r3
    3fc6:	3c01      	subs	r4, #1
    3fc8:	465b      	mov	r3, fp
    3fca:	0e0a      	lsrs	r2, r1, #24
    3fcc:	021b      	lsls	r3, r3, #8
    3fce:	431a      	orrs	r2, r3
    3fd0:	020b      	lsls	r3, r1, #8
    3fd2:	0c17      	lsrs	r7, r2, #16
    3fd4:	9303      	str	r3, [sp, #12]
    3fd6:	0413      	lsls	r3, r2, #16
    3fd8:	0c1b      	lsrs	r3, r3, #16
    3fda:	0039      	movs	r1, r7
    3fdc:	0028      	movs	r0, r5
    3fde:	4690      	mov	r8, r2
    3fe0:	9301      	str	r3, [sp, #4]
    3fe2:	f7ff fa3b 	bl	345c <__udivsi3>
    3fe6:	0002      	movs	r2, r0
    3fe8:	9b01      	ldr	r3, [sp, #4]
    3fea:	4683      	mov	fp, r0
    3fec:	435a      	muls	r2, r3
    3fee:	0028      	movs	r0, r5
    3ff0:	0039      	movs	r1, r7
    3ff2:	4691      	mov	r9, r2
    3ff4:	f7ff fab8 	bl	3568 <__aeabi_uidivmod>
    3ff8:	0c35      	lsrs	r5, r6, #16
    3ffa:	0409      	lsls	r1, r1, #16
    3ffc:	430d      	orrs	r5, r1
    3ffe:	45a9      	cmp	r9, r5
    4000:	d90d      	bls.n	401e <__aeabi_ddiv+0x262>
    4002:	465b      	mov	r3, fp
    4004:	4445      	add	r5, r8
    4006:	3b01      	subs	r3, #1
    4008:	45a8      	cmp	r8, r5
    400a:	d900      	bls.n	400e <__aeabi_ddiv+0x252>
    400c:	e13a      	b.n	4284 <__aeabi_ddiv+0x4c8>
    400e:	45a9      	cmp	r9, r5
    4010:	d800      	bhi.n	4014 <__aeabi_ddiv+0x258>
    4012:	e137      	b.n	4284 <__aeabi_ddiv+0x4c8>
    4014:	2302      	movs	r3, #2
    4016:	425b      	negs	r3, r3
    4018:	469c      	mov	ip, r3
    401a:	4445      	add	r5, r8
    401c:	44e3      	add	fp, ip
    401e:	464b      	mov	r3, r9
    4020:	1aeb      	subs	r3, r5, r3
    4022:	0039      	movs	r1, r7
    4024:	0018      	movs	r0, r3
    4026:	9304      	str	r3, [sp, #16]
    4028:	f7ff fa18 	bl	345c <__udivsi3>
    402c:	9b01      	ldr	r3, [sp, #4]
    402e:	0005      	movs	r5, r0
    4030:	4343      	muls	r3, r0
    4032:	0039      	movs	r1, r7
    4034:	9804      	ldr	r0, [sp, #16]
    4036:	4699      	mov	r9, r3
    4038:	f7ff fa96 	bl	3568 <__aeabi_uidivmod>
    403c:	0433      	lsls	r3, r6, #16
    403e:	0409      	lsls	r1, r1, #16
    4040:	0c1b      	lsrs	r3, r3, #16
    4042:	430b      	orrs	r3, r1
    4044:	4599      	cmp	r9, r3
    4046:	d909      	bls.n	405c <__aeabi_ddiv+0x2a0>
    4048:	4443      	add	r3, r8
    404a:	1e6a      	subs	r2, r5, #1
    404c:	4598      	cmp	r8, r3
    404e:	d900      	bls.n	4052 <__aeabi_ddiv+0x296>
    4050:	e11a      	b.n	4288 <__aeabi_ddiv+0x4cc>
    4052:	4599      	cmp	r9, r3
    4054:	d800      	bhi.n	4058 <__aeabi_ddiv+0x29c>
    4056:	e117      	b.n	4288 <__aeabi_ddiv+0x4cc>
    4058:	3d02      	subs	r5, #2
    405a:	4443      	add	r3, r8
    405c:	464a      	mov	r2, r9
    405e:	1a9b      	subs	r3, r3, r2
    4060:	465a      	mov	r2, fp
    4062:	0412      	lsls	r2, r2, #16
    4064:	432a      	orrs	r2, r5
    4066:	9903      	ldr	r1, [sp, #12]
    4068:	4693      	mov	fp, r2
    406a:	0c10      	lsrs	r0, r2, #16
    406c:	0c0a      	lsrs	r2, r1, #16
    406e:	4691      	mov	r9, r2
    4070:	0409      	lsls	r1, r1, #16
    4072:	465a      	mov	r2, fp
    4074:	0c09      	lsrs	r1, r1, #16
    4076:	464e      	mov	r6, r9
    4078:	000d      	movs	r5, r1
    407a:	0412      	lsls	r2, r2, #16
    407c:	0c12      	lsrs	r2, r2, #16
    407e:	4345      	muls	r5, r0
    4080:	9105      	str	r1, [sp, #20]
    4082:	4351      	muls	r1, r2
    4084:	4372      	muls	r2, r6
    4086:	4370      	muls	r0, r6
    4088:	1952      	adds	r2, r2, r5
    408a:	0c0e      	lsrs	r6, r1, #16
    408c:	18b2      	adds	r2, r6, r2
    408e:	4295      	cmp	r5, r2
    4090:	d903      	bls.n	409a <__aeabi_ddiv+0x2de>
    4092:	2580      	movs	r5, #128	; 0x80
    4094:	026d      	lsls	r5, r5, #9
    4096:	46ac      	mov	ip, r5
    4098:	4460      	add	r0, ip
    409a:	0c15      	lsrs	r5, r2, #16
    409c:	0409      	lsls	r1, r1, #16
    409e:	0412      	lsls	r2, r2, #16
    40a0:	0c09      	lsrs	r1, r1, #16
    40a2:	1828      	adds	r0, r5, r0
    40a4:	1852      	adds	r2, r2, r1
    40a6:	4283      	cmp	r3, r0
    40a8:	d200      	bcs.n	40ac <__aeabi_ddiv+0x2f0>
    40aa:	e0ce      	b.n	424a <__aeabi_ddiv+0x48e>
    40ac:	d100      	bne.n	40b0 <__aeabi_ddiv+0x2f4>
    40ae:	e0c8      	b.n	4242 <__aeabi_ddiv+0x486>
    40b0:	1a1d      	subs	r5, r3, r0
    40b2:	4653      	mov	r3, sl
    40b4:	1a9e      	subs	r6, r3, r2
    40b6:	45b2      	cmp	sl, r6
    40b8:	4192      	sbcs	r2, r2
    40ba:	4252      	negs	r2, r2
    40bc:	1aab      	subs	r3, r5, r2
    40be:	469a      	mov	sl, r3
    40c0:	4598      	cmp	r8, r3
    40c2:	d100      	bne.n	40c6 <__aeabi_ddiv+0x30a>
    40c4:	e117      	b.n	42f6 <__aeabi_ddiv+0x53a>
    40c6:	0039      	movs	r1, r7
    40c8:	0018      	movs	r0, r3
    40ca:	f7ff f9c7 	bl	345c <__udivsi3>
    40ce:	9b01      	ldr	r3, [sp, #4]
    40d0:	0005      	movs	r5, r0
    40d2:	4343      	muls	r3, r0
    40d4:	0039      	movs	r1, r7
    40d6:	4650      	mov	r0, sl
    40d8:	9304      	str	r3, [sp, #16]
    40da:	f7ff fa45 	bl	3568 <__aeabi_uidivmod>
    40de:	9804      	ldr	r0, [sp, #16]
    40e0:	040b      	lsls	r3, r1, #16
    40e2:	0c31      	lsrs	r1, r6, #16
    40e4:	4319      	orrs	r1, r3
    40e6:	4288      	cmp	r0, r1
    40e8:	d909      	bls.n	40fe <__aeabi_ddiv+0x342>
    40ea:	4441      	add	r1, r8
    40ec:	1e6b      	subs	r3, r5, #1
    40ee:	4588      	cmp	r8, r1
    40f0:	d900      	bls.n	40f4 <__aeabi_ddiv+0x338>
    40f2:	e107      	b.n	4304 <__aeabi_ddiv+0x548>
    40f4:	4288      	cmp	r0, r1
    40f6:	d800      	bhi.n	40fa <__aeabi_ddiv+0x33e>
    40f8:	e104      	b.n	4304 <__aeabi_ddiv+0x548>
    40fa:	3d02      	subs	r5, #2
    40fc:	4441      	add	r1, r8
    40fe:	9b04      	ldr	r3, [sp, #16]
    4100:	1acb      	subs	r3, r1, r3
    4102:	0018      	movs	r0, r3
    4104:	0039      	movs	r1, r7
    4106:	9304      	str	r3, [sp, #16]
    4108:	f7ff f9a8 	bl	345c <__udivsi3>
    410c:	9b01      	ldr	r3, [sp, #4]
    410e:	4682      	mov	sl, r0
    4110:	4343      	muls	r3, r0
    4112:	0039      	movs	r1, r7
    4114:	9804      	ldr	r0, [sp, #16]
    4116:	9301      	str	r3, [sp, #4]
    4118:	f7ff fa26 	bl	3568 <__aeabi_uidivmod>
    411c:	9801      	ldr	r0, [sp, #4]
    411e:	040b      	lsls	r3, r1, #16
    4120:	0431      	lsls	r1, r6, #16
    4122:	0c09      	lsrs	r1, r1, #16
    4124:	4319      	orrs	r1, r3
    4126:	4288      	cmp	r0, r1
    4128:	d90d      	bls.n	4146 <__aeabi_ddiv+0x38a>
    412a:	4653      	mov	r3, sl
    412c:	4441      	add	r1, r8
    412e:	3b01      	subs	r3, #1
    4130:	4588      	cmp	r8, r1
    4132:	d900      	bls.n	4136 <__aeabi_ddiv+0x37a>
    4134:	e0e8      	b.n	4308 <__aeabi_ddiv+0x54c>
    4136:	4288      	cmp	r0, r1
    4138:	d800      	bhi.n	413c <__aeabi_ddiv+0x380>
    413a:	e0e5      	b.n	4308 <__aeabi_ddiv+0x54c>
    413c:	2302      	movs	r3, #2
    413e:	425b      	negs	r3, r3
    4140:	469c      	mov	ip, r3
    4142:	4441      	add	r1, r8
    4144:	44e2      	add	sl, ip
    4146:	9b01      	ldr	r3, [sp, #4]
    4148:	042d      	lsls	r5, r5, #16
    414a:	1ace      	subs	r6, r1, r3
    414c:	4651      	mov	r1, sl
    414e:	4329      	orrs	r1, r5
    4150:	9d05      	ldr	r5, [sp, #20]
    4152:	464f      	mov	r7, r9
    4154:	002a      	movs	r2, r5
    4156:	040b      	lsls	r3, r1, #16
    4158:	0c08      	lsrs	r0, r1, #16
    415a:	0c1b      	lsrs	r3, r3, #16
    415c:	435a      	muls	r2, r3
    415e:	4345      	muls	r5, r0
    4160:	437b      	muls	r3, r7
    4162:	4378      	muls	r0, r7
    4164:	195b      	adds	r3, r3, r5
    4166:	0c17      	lsrs	r7, r2, #16
    4168:	18fb      	adds	r3, r7, r3
    416a:	429d      	cmp	r5, r3
    416c:	d903      	bls.n	4176 <__aeabi_ddiv+0x3ba>
    416e:	2580      	movs	r5, #128	; 0x80
    4170:	026d      	lsls	r5, r5, #9
    4172:	46ac      	mov	ip, r5
    4174:	4460      	add	r0, ip
    4176:	0c1d      	lsrs	r5, r3, #16
    4178:	0412      	lsls	r2, r2, #16
    417a:	041b      	lsls	r3, r3, #16
    417c:	0c12      	lsrs	r2, r2, #16
    417e:	1828      	adds	r0, r5, r0
    4180:	189b      	adds	r3, r3, r2
    4182:	4286      	cmp	r6, r0
    4184:	d200      	bcs.n	4188 <__aeabi_ddiv+0x3cc>
    4186:	e093      	b.n	42b0 <__aeabi_ddiv+0x4f4>
    4188:	d100      	bne.n	418c <__aeabi_ddiv+0x3d0>
    418a:	e08e      	b.n	42aa <__aeabi_ddiv+0x4ee>
    418c:	2301      	movs	r3, #1
    418e:	4319      	orrs	r1, r3
    4190:	4ba0      	ldr	r3, [pc, #640]	; (4414 <__aeabi_ddiv+0x658>)
    4192:	18e3      	adds	r3, r4, r3
    4194:	2b00      	cmp	r3, #0
    4196:	dc00      	bgt.n	419a <__aeabi_ddiv+0x3de>
    4198:	e099      	b.n	42ce <__aeabi_ddiv+0x512>
    419a:	074a      	lsls	r2, r1, #29
    419c:	d000      	beq.n	41a0 <__aeabi_ddiv+0x3e4>
    419e:	e09e      	b.n	42de <__aeabi_ddiv+0x522>
    41a0:	465a      	mov	r2, fp
    41a2:	01d2      	lsls	r2, r2, #7
    41a4:	d506      	bpl.n	41b4 <__aeabi_ddiv+0x3f8>
    41a6:	465a      	mov	r2, fp
    41a8:	4b9b      	ldr	r3, [pc, #620]	; (4418 <__aeabi_ddiv+0x65c>)
    41aa:	401a      	ands	r2, r3
    41ac:	2380      	movs	r3, #128	; 0x80
    41ae:	4693      	mov	fp, r2
    41b0:	00db      	lsls	r3, r3, #3
    41b2:	18e3      	adds	r3, r4, r3
    41b4:	4a99      	ldr	r2, [pc, #612]	; (441c <__aeabi_ddiv+0x660>)
    41b6:	4293      	cmp	r3, r2
    41b8:	dd68      	ble.n	428c <__aeabi_ddiv+0x4d0>
    41ba:	2301      	movs	r3, #1
    41bc:	9a02      	ldr	r2, [sp, #8]
    41be:	4c98      	ldr	r4, [pc, #608]	; (4420 <__aeabi_ddiv+0x664>)
    41c0:	401a      	ands	r2, r3
    41c2:	2300      	movs	r3, #0
    41c4:	4694      	mov	ip, r2
    41c6:	4698      	mov	r8, r3
    41c8:	2200      	movs	r2, #0
    41ca:	e6c5      	b.n	3f58 <__aeabi_ddiv+0x19c>
    41cc:	2280      	movs	r2, #128	; 0x80
    41ce:	464b      	mov	r3, r9
    41d0:	0312      	lsls	r2, r2, #12
    41d2:	4213      	tst	r3, r2
    41d4:	d00a      	beq.n	41ec <__aeabi_ddiv+0x430>
    41d6:	465b      	mov	r3, fp
    41d8:	4213      	tst	r3, r2
    41da:	d106      	bne.n	41ea <__aeabi_ddiv+0x42e>
    41dc:	431a      	orrs	r2, r3
    41de:	0312      	lsls	r2, r2, #12
    41e0:	0b12      	lsrs	r2, r2, #12
    41e2:	46ac      	mov	ip, r5
    41e4:	4688      	mov	r8, r1
    41e6:	4c8e      	ldr	r4, [pc, #568]	; (4420 <__aeabi_ddiv+0x664>)
    41e8:	e6b6      	b.n	3f58 <__aeabi_ddiv+0x19c>
    41ea:	464b      	mov	r3, r9
    41ec:	431a      	orrs	r2, r3
    41ee:	0312      	lsls	r2, r2, #12
    41f0:	0b12      	lsrs	r2, r2, #12
    41f2:	46bc      	mov	ip, r7
    41f4:	4c8a      	ldr	r4, [pc, #552]	; (4420 <__aeabi_ddiv+0x664>)
    41f6:	e6af      	b.n	3f58 <__aeabi_ddiv+0x19c>
    41f8:	0003      	movs	r3, r0
    41fa:	465a      	mov	r2, fp
    41fc:	3b28      	subs	r3, #40	; 0x28
    41fe:	409a      	lsls	r2, r3
    4200:	2300      	movs	r3, #0
    4202:	4691      	mov	r9, r2
    4204:	4698      	mov	r8, r3
    4206:	e657      	b.n	3eb8 <__aeabi_ddiv+0xfc>
    4208:	4658      	mov	r0, fp
    420a:	f000 ff0d 	bl	5028 <__clzsi2>
    420e:	3020      	adds	r0, #32
    4210:	e640      	b.n	3e94 <__aeabi_ddiv+0xd8>
    4212:	0003      	movs	r3, r0
    4214:	4652      	mov	r2, sl
    4216:	3b28      	subs	r3, #40	; 0x28
    4218:	409a      	lsls	r2, r3
    421a:	2100      	movs	r1, #0
    421c:	4693      	mov	fp, r2
    421e:	e677      	b.n	3f10 <__aeabi_ddiv+0x154>
    4220:	f000 ff02 	bl	5028 <__clzsi2>
    4224:	3020      	adds	r0, #32
    4226:	e65f      	b.n	3ee8 <__aeabi_ddiv+0x12c>
    4228:	4588      	cmp	r8, r1
    422a:	d200      	bcs.n	422e <__aeabi_ddiv+0x472>
    422c:	e6c7      	b.n	3fbe <__aeabi_ddiv+0x202>
    422e:	464b      	mov	r3, r9
    4230:	07de      	lsls	r6, r3, #31
    4232:	085d      	lsrs	r5, r3, #1
    4234:	4643      	mov	r3, r8
    4236:	085b      	lsrs	r3, r3, #1
    4238:	431e      	orrs	r6, r3
    423a:	4643      	mov	r3, r8
    423c:	07db      	lsls	r3, r3, #31
    423e:	469a      	mov	sl, r3
    4240:	e6c2      	b.n	3fc8 <__aeabi_ddiv+0x20c>
    4242:	2500      	movs	r5, #0
    4244:	4592      	cmp	sl, r2
    4246:	d300      	bcc.n	424a <__aeabi_ddiv+0x48e>
    4248:	e733      	b.n	40b2 <__aeabi_ddiv+0x2f6>
    424a:	9e03      	ldr	r6, [sp, #12]
    424c:	4659      	mov	r1, fp
    424e:	46b4      	mov	ip, r6
    4250:	44e2      	add	sl, ip
    4252:	45b2      	cmp	sl, r6
    4254:	41ad      	sbcs	r5, r5
    4256:	426d      	negs	r5, r5
    4258:	4445      	add	r5, r8
    425a:	18eb      	adds	r3, r5, r3
    425c:	3901      	subs	r1, #1
    425e:	4598      	cmp	r8, r3
    4260:	d207      	bcs.n	4272 <__aeabi_ddiv+0x4b6>
    4262:	4298      	cmp	r0, r3
    4264:	d900      	bls.n	4268 <__aeabi_ddiv+0x4ac>
    4266:	e07f      	b.n	4368 <__aeabi_ddiv+0x5ac>
    4268:	d100      	bne.n	426c <__aeabi_ddiv+0x4b0>
    426a:	e0bc      	b.n	43e6 <__aeabi_ddiv+0x62a>
    426c:	1a1d      	subs	r5, r3, r0
    426e:	468b      	mov	fp, r1
    4270:	e71f      	b.n	40b2 <__aeabi_ddiv+0x2f6>
    4272:	4598      	cmp	r8, r3
    4274:	d1fa      	bne.n	426c <__aeabi_ddiv+0x4b0>
    4276:	9d03      	ldr	r5, [sp, #12]
    4278:	4555      	cmp	r5, sl
    427a:	d9f2      	bls.n	4262 <__aeabi_ddiv+0x4a6>
    427c:	4643      	mov	r3, r8
    427e:	468b      	mov	fp, r1
    4280:	1a1d      	subs	r5, r3, r0
    4282:	e716      	b.n	40b2 <__aeabi_ddiv+0x2f6>
    4284:	469b      	mov	fp, r3
    4286:	e6ca      	b.n	401e <__aeabi_ddiv+0x262>
    4288:	0015      	movs	r5, r2
    428a:	e6e7      	b.n	405c <__aeabi_ddiv+0x2a0>
    428c:	465a      	mov	r2, fp
    428e:	08c9      	lsrs	r1, r1, #3
    4290:	0752      	lsls	r2, r2, #29
    4292:	430a      	orrs	r2, r1
    4294:	055b      	lsls	r3, r3, #21
    4296:	4690      	mov	r8, r2
    4298:	0d5c      	lsrs	r4, r3, #21
    429a:	465a      	mov	r2, fp
    429c:	2301      	movs	r3, #1
    429e:	9902      	ldr	r1, [sp, #8]
    42a0:	0252      	lsls	r2, r2, #9
    42a2:	4019      	ands	r1, r3
    42a4:	0b12      	lsrs	r2, r2, #12
    42a6:	468c      	mov	ip, r1
    42a8:	e656      	b.n	3f58 <__aeabi_ddiv+0x19c>
    42aa:	2b00      	cmp	r3, #0
    42ac:	d100      	bne.n	42b0 <__aeabi_ddiv+0x4f4>
    42ae:	e76f      	b.n	4190 <__aeabi_ddiv+0x3d4>
    42b0:	4446      	add	r6, r8
    42b2:	1e4a      	subs	r2, r1, #1
    42b4:	45b0      	cmp	r8, r6
    42b6:	d929      	bls.n	430c <__aeabi_ddiv+0x550>
    42b8:	0011      	movs	r1, r2
    42ba:	4286      	cmp	r6, r0
    42bc:	d000      	beq.n	42c0 <__aeabi_ddiv+0x504>
    42be:	e765      	b.n	418c <__aeabi_ddiv+0x3d0>
    42c0:	9a03      	ldr	r2, [sp, #12]
    42c2:	4293      	cmp	r3, r2
    42c4:	d000      	beq.n	42c8 <__aeabi_ddiv+0x50c>
    42c6:	e761      	b.n	418c <__aeabi_ddiv+0x3d0>
    42c8:	e762      	b.n	4190 <__aeabi_ddiv+0x3d4>
    42ca:	2101      	movs	r1, #1
    42cc:	4249      	negs	r1, r1
    42ce:	2001      	movs	r0, #1
    42d0:	1ac2      	subs	r2, r0, r3
    42d2:	2a38      	cmp	r2, #56	; 0x38
    42d4:	dd21      	ble.n	431a <__aeabi_ddiv+0x55e>
    42d6:	9b02      	ldr	r3, [sp, #8]
    42d8:	4003      	ands	r3, r0
    42da:	469c      	mov	ip, r3
    42dc:	e638      	b.n	3f50 <__aeabi_ddiv+0x194>
    42de:	220f      	movs	r2, #15
    42e0:	400a      	ands	r2, r1
    42e2:	2a04      	cmp	r2, #4
    42e4:	d100      	bne.n	42e8 <__aeabi_ddiv+0x52c>
    42e6:	e75b      	b.n	41a0 <__aeabi_ddiv+0x3e4>
    42e8:	000a      	movs	r2, r1
    42ea:	1d11      	adds	r1, r2, #4
    42ec:	4291      	cmp	r1, r2
    42ee:	4192      	sbcs	r2, r2
    42f0:	4252      	negs	r2, r2
    42f2:	4493      	add	fp, r2
    42f4:	e754      	b.n	41a0 <__aeabi_ddiv+0x3e4>
    42f6:	4b47      	ldr	r3, [pc, #284]	; (4414 <__aeabi_ddiv+0x658>)
    42f8:	18e3      	adds	r3, r4, r3
    42fa:	2b00      	cmp	r3, #0
    42fc:	dde5      	ble.n	42ca <__aeabi_ddiv+0x50e>
    42fe:	2201      	movs	r2, #1
    4300:	4252      	negs	r2, r2
    4302:	e7f2      	b.n	42ea <__aeabi_ddiv+0x52e>
    4304:	001d      	movs	r5, r3
    4306:	e6fa      	b.n	40fe <__aeabi_ddiv+0x342>
    4308:	469a      	mov	sl, r3
    430a:	e71c      	b.n	4146 <__aeabi_ddiv+0x38a>
    430c:	42b0      	cmp	r0, r6
    430e:	d839      	bhi.n	4384 <__aeabi_ddiv+0x5c8>
    4310:	d06e      	beq.n	43f0 <__aeabi_ddiv+0x634>
    4312:	0011      	movs	r1, r2
    4314:	e73a      	b.n	418c <__aeabi_ddiv+0x3d0>
    4316:	9302      	str	r3, [sp, #8]
    4318:	e73a      	b.n	4190 <__aeabi_ddiv+0x3d4>
    431a:	2a1f      	cmp	r2, #31
    431c:	dc3c      	bgt.n	4398 <__aeabi_ddiv+0x5dc>
    431e:	2320      	movs	r3, #32
    4320:	1a9b      	subs	r3, r3, r2
    4322:	000c      	movs	r4, r1
    4324:	4658      	mov	r0, fp
    4326:	4099      	lsls	r1, r3
    4328:	4098      	lsls	r0, r3
    432a:	1e4b      	subs	r3, r1, #1
    432c:	4199      	sbcs	r1, r3
    432e:	465b      	mov	r3, fp
    4330:	40d4      	lsrs	r4, r2
    4332:	40d3      	lsrs	r3, r2
    4334:	4320      	orrs	r0, r4
    4336:	4308      	orrs	r0, r1
    4338:	001a      	movs	r2, r3
    433a:	0743      	lsls	r3, r0, #29
    433c:	d009      	beq.n	4352 <__aeabi_ddiv+0x596>
    433e:	230f      	movs	r3, #15
    4340:	4003      	ands	r3, r0
    4342:	2b04      	cmp	r3, #4
    4344:	d005      	beq.n	4352 <__aeabi_ddiv+0x596>
    4346:	0001      	movs	r1, r0
    4348:	1d08      	adds	r0, r1, #4
    434a:	4288      	cmp	r0, r1
    434c:	419b      	sbcs	r3, r3
    434e:	425b      	negs	r3, r3
    4350:	18d2      	adds	r2, r2, r3
    4352:	0213      	lsls	r3, r2, #8
    4354:	d53a      	bpl.n	43cc <__aeabi_ddiv+0x610>
    4356:	2301      	movs	r3, #1
    4358:	9a02      	ldr	r2, [sp, #8]
    435a:	2401      	movs	r4, #1
    435c:	401a      	ands	r2, r3
    435e:	2300      	movs	r3, #0
    4360:	4694      	mov	ip, r2
    4362:	4698      	mov	r8, r3
    4364:	2200      	movs	r2, #0
    4366:	e5f7      	b.n	3f58 <__aeabi_ddiv+0x19c>
    4368:	2102      	movs	r1, #2
    436a:	4249      	negs	r1, r1
    436c:	468c      	mov	ip, r1
    436e:	9d03      	ldr	r5, [sp, #12]
    4370:	44e3      	add	fp, ip
    4372:	46ac      	mov	ip, r5
    4374:	44e2      	add	sl, ip
    4376:	45aa      	cmp	sl, r5
    4378:	41ad      	sbcs	r5, r5
    437a:	426d      	negs	r5, r5
    437c:	4445      	add	r5, r8
    437e:	18ed      	adds	r5, r5, r3
    4380:	1a2d      	subs	r5, r5, r0
    4382:	e696      	b.n	40b2 <__aeabi_ddiv+0x2f6>
    4384:	1e8a      	subs	r2, r1, #2
    4386:	9903      	ldr	r1, [sp, #12]
    4388:	004d      	lsls	r5, r1, #1
    438a:	428d      	cmp	r5, r1
    438c:	4189      	sbcs	r1, r1
    438e:	4249      	negs	r1, r1
    4390:	4441      	add	r1, r8
    4392:	1876      	adds	r6, r6, r1
    4394:	9503      	str	r5, [sp, #12]
    4396:	e78f      	b.n	42b8 <__aeabi_ddiv+0x4fc>
    4398:	201f      	movs	r0, #31
    439a:	4240      	negs	r0, r0
    439c:	1ac3      	subs	r3, r0, r3
    439e:	4658      	mov	r0, fp
    43a0:	40d8      	lsrs	r0, r3
    43a2:	0003      	movs	r3, r0
    43a4:	2a20      	cmp	r2, #32
    43a6:	d028      	beq.n	43fa <__aeabi_ddiv+0x63e>
    43a8:	2040      	movs	r0, #64	; 0x40
    43aa:	465d      	mov	r5, fp
    43ac:	1a82      	subs	r2, r0, r2
    43ae:	4095      	lsls	r5, r2
    43b0:	4329      	orrs	r1, r5
    43b2:	1e4a      	subs	r2, r1, #1
    43b4:	4191      	sbcs	r1, r2
    43b6:	4319      	orrs	r1, r3
    43b8:	2307      	movs	r3, #7
    43ba:	2200      	movs	r2, #0
    43bc:	400b      	ands	r3, r1
    43be:	d009      	beq.n	43d4 <__aeabi_ddiv+0x618>
    43c0:	230f      	movs	r3, #15
    43c2:	2200      	movs	r2, #0
    43c4:	400b      	ands	r3, r1
    43c6:	0008      	movs	r0, r1
    43c8:	2b04      	cmp	r3, #4
    43ca:	d1bd      	bne.n	4348 <__aeabi_ddiv+0x58c>
    43cc:	0001      	movs	r1, r0
    43ce:	0753      	lsls	r3, r2, #29
    43d0:	0252      	lsls	r2, r2, #9
    43d2:	0b12      	lsrs	r2, r2, #12
    43d4:	08c9      	lsrs	r1, r1, #3
    43d6:	4319      	orrs	r1, r3
    43d8:	2301      	movs	r3, #1
    43da:	4688      	mov	r8, r1
    43dc:	9902      	ldr	r1, [sp, #8]
    43de:	2400      	movs	r4, #0
    43e0:	4019      	ands	r1, r3
    43e2:	468c      	mov	ip, r1
    43e4:	e5b8      	b.n	3f58 <__aeabi_ddiv+0x19c>
    43e6:	4552      	cmp	r2, sl
    43e8:	d8be      	bhi.n	4368 <__aeabi_ddiv+0x5ac>
    43ea:	468b      	mov	fp, r1
    43ec:	2500      	movs	r5, #0
    43ee:	e660      	b.n	40b2 <__aeabi_ddiv+0x2f6>
    43f0:	9d03      	ldr	r5, [sp, #12]
    43f2:	429d      	cmp	r5, r3
    43f4:	d3c6      	bcc.n	4384 <__aeabi_ddiv+0x5c8>
    43f6:	0011      	movs	r1, r2
    43f8:	e762      	b.n	42c0 <__aeabi_ddiv+0x504>
    43fa:	2500      	movs	r5, #0
    43fc:	e7d8      	b.n	43b0 <__aeabi_ddiv+0x5f4>
    43fe:	2280      	movs	r2, #128	; 0x80
    4400:	465b      	mov	r3, fp
    4402:	0312      	lsls	r2, r2, #12
    4404:	431a      	orrs	r2, r3
    4406:	9b01      	ldr	r3, [sp, #4]
    4408:	0312      	lsls	r2, r2, #12
    440a:	0b12      	lsrs	r2, r2, #12
    440c:	469c      	mov	ip, r3
    440e:	4688      	mov	r8, r1
    4410:	4c03      	ldr	r4, [pc, #12]	; (4420 <__aeabi_ddiv+0x664>)
    4412:	e5a1      	b.n	3f58 <__aeabi_ddiv+0x19c>
    4414:	000003ff 	.word	0x000003ff
    4418:	feffffff 	.word	0xfeffffff
    441c:	000007fe 	.word	0x000007fe
    4420:	000007ff 	.word	0x000007ff

00004424 <__aeabi_dmul>:
    4424:	b5f0      	push	{r4, r5, r6, r7, lr}
    4426:	4657      	mov	r7, sl
    4428:	4645      	mov	r5, r8
    442a:	46de      	mov	lr, fp
    442c:	464e      	mov	r6, r9
    442e:	b5e0      	push	{r5, r6, r7, lr}
    4430:	030c      	lsls	r4, r1, #12
    4432:	4698      	mov	r8, r3
    4434:	004e      	lsls	r6, r1, #1
    4436:	0b23      	lsrs	r3, r4, #12
    4438:	b087      	sub	sp, #28
    443a:	0007      	movs	r7, r0
    443c:	4692      	mov	sl, r2
    443e:	469b      	mov	fp, r3
    4440:	0d76      	lsrs	r6, r6, #21
    4442:	0fcd      	lsrs	r5, r1, #31
    4444:	2e00      	cmp	r6, #0
    4446:	d06b      	beq.n	4520 <__aeabi_dmul+0xfc>
    4448:	4b6d      	ldr	r3, [pc, #436]	; (4600 <__aeabi_dmul+0x1dc>)
    444a:	429e      	cmp	r6, r3
    444c:	d035      	beq.n	44ba <__aeabi_dmul+0x96>
    444e:	2480      	movs	r4, #128	; 0x80
    4450:	465b      	mov	r3, fp
    4452:	0f42      	lsrs	r2, r0, #29
    4454:	0424      	lsls	r4, r4, #16
    4456:	00db      	lsls	r3, r3, #3
    4458:	4314      	orrs	r4, r2
    445a:	431c      	orrs	r4, r3
    445c:	00c3      	lsls	r3, r0, #3
    445e:	4699      	mov	r9, r3
    4460:	4b68      	ldr	r3, [pc, #416]	; (4604 <__aeabi_dmul+0x1e0>)
    4462:	46a3      	mov	fp, r4
    4464:	469c      	mov	ip, r3
    4466:	2300      	movs	r3, #0
    4468:	2700      	movs	r7, #0
    446a:	4466      	add	r6, ip
    446c:	9302      	str	r3, [sp, #8]
    446e:	4643      	mov	r3, r8
    4470:	031c      	lsls	r4, r3, #12
    4472:	005a      	lsls	r2, r3, #1
    4474:	0fdb      	lsrs	r3, r3, #31
    4476:	4650      	mov	r0, sl
    4478:	0b24      	lsrs	r4, r4, #12
    447a:	0d52      	lsrs	r2, r2, #21
    447c:	4698      	mov	r8, r3
    447e:	d100      	bne.n	4482 <__aeabi_dmul+0x5e>
    4480:	e076      	b.n	4570 <__aeabi_dmul+0x14c>
    4482:	4b5f      	ldr	r3, [pc, #380]	; (4600 <__aeabi_dmul+0x1dc>)
    4484:	429a      	cmp	r2, r3
    4486:	d06d      	beq.n	4564 <__aeabi_dmul+0x140>
    4488:	2380      	movs	r3, #128	; 0x80
    448a:	0f41      	lsrs	r1, r0, #29
    448c:	041b      	lsls	r3, r3, #16
    448e:	430b      	orrs	r3, r1
    4490:	495c      	ldr	r1, [pc, #368]	; (4604 <__aeabi_dmul+0x1e0>)
    4492:	00e4      	lsls	r4, r4, #3
    4494:	468c      	mov	ip, r1
    4496:	431c      	orrs	r4, r3
    4498:	00c3      	lsls	r3, r0, #3
    449a:	2000      	movs	r0, #0
    449c:	4462      	add	r2, ip
    449e:	4641      	mov	r1, r8
    44a0:	18b6      	adds	r6, r6, r2
    44a2:	4069      	eors	r1, r5
    44a4:	1c72      	adds	r2, r6, #1
    44a6:	9101      	str	r1, [sp, #4]
    44a8:	4694      	mov	ip, r2
    44aa:	4307      	orrs	r7, r0
    44ac:	2f0f      	cmp	r7, #15
    44ae:	d900      	bls.n	44b2 <__aeabi_dmul+0x8e>
    44b0:	e0b0      	b.n	4614 <__aeabi_dmul+0x1f0>
    44b2:	4a55      	ldr	r2, [pc, #340]	; (4608 <__aeabi_dmul+0x1e4>)
    44b4:	00bf      	lsls	r7, r7, #2
    44b6:	59d2      	ldr	r2, [r2, r7]
    44b8:	4697      	mov	pc, r2
    44ba:	465b      	mov	r3, fp
    44bc:	4303      	orrs	r3, r0
    44be:	4699      	mov	r9, r3
    44c0:	d000      	beq.n	44c4 <__aeabi_dmul+0xa0>
    44c2:	e087      	b.n	45d4 <__aeabi_dmul+0x1b0>
    44c4:	2300      	movs	r3, #0
    44c6:	469b      	mov	fp, r3
    44c8:	3302      	adds	r3, #2
    44ca:	2708      	movs	r7, #8
    44cc:	9302      	str	r3, [sp, #8]
    44ce:	e7ce      	b.n	446e <__aeabi_dmul+0x4a>
    44d0:	4642      	mov	r2, r8
    44d2:	9201      	str	r2, [sp, #4]
    44d4:	2802      	cmp	r0, #2
    44d6:	d067      	beq.n	45a8 <__aeabi_dmul+0x184>
    44d8:	2803      	cmp	r0, #3
    44da:	d100      	bne.n	44de <__aeabi_dmul+0xba>
    44dc:	e20e      	b.n	48fc <__aeabi_dmul+0x4d8>
    44de:	2801      	cmp	r0, #1
    44e0:	d000      	beq.n	44e4 <__aeabi_dmul+0xc0>
    44e2:	e162      	b.n	47aa <__aeabi_dmul+0x386>
    44e4:	2300      	movs	r3, #0
    44e6:	2400      	movs	r4, #0
    44e8:	2200      	movs	r2, #0
    44ea:	4699      	mov	r9, r3
    44ec:	9901      	ldr	r1, [sp, #4]
    44ee:	4001      	ands	r1, r0
    44f0:	b2cd      	uxtb	r5, r1
    44f2:	2100      	movs	r1, #0
    44f4:	0312      	lsls	r2, r2, #12
    44f6:	0d0b      	lsrs	r3, r1, #20
    44f8:	0b12      	lsrs	r2, r2, #12
    44fa:	051b      	lsls	r3, r3, #20
    44fc:	4313      	orrs	r3, r2
    44fe:	4a43      	ldr	r2, [pc, #268]	; (460c <__aeabi_dmul+0x1e8>)
    4500:	0524      	lsls	r4, r4, #20
    4502:	4013      	ands	r3, r2
    4504:	431c      	orrs	r4, r3
    4506:	0064      	lsls	r4, r4, #1
    4508:	07ed      	lsls	r5, r5, #31
    450a:	0864      	lsrs	r4, r4, #1
    450c:	432c      	orrs	r4, r5
    450e:	4648      	mov	r0, r9
    4510:	0021      	movs	r1, r4
    4512:	b007      	add	sp, #28
    4514:	bc3c      	pop	{r2, r3, r4, r5}
    4516:	4690      	mov	r8, r2
    4518:	4699      	mov	r9, r3
    451a:	46a2      	mov	sl, r4
    451c:	46ab      	mov	fp, r5
    451e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4520:	4303      	orrs	r3, r0
    4522:	4699      	mov	r9, r3
    4524:	d04f      	beq.n	45c6 <__aeabi_dmul+0x1a2>
    4526:	465b      	mov	r3, fp
    4528:	2b00      	cmp	r3, #0
    452a:	d100      	bne.n	452e <__aeabi_dmul+0x10a>
    452c:	e189      	b.n	4842 <__aeabi_dmul+0x41e>
    452e:	4658      	mov	r0, fp
    4530:	f000 fd7a 	bl	5028 <__clzsi2>
    4534:	0003      	movs	r3, r0
    4536:	3b0b      	subs	r3, #11
    4538:	2b1c      	cmp	r3, #28
    453a:	dd00      	ble.n	453e <__aeabi_dmul+0x11a>
    453c:	e17a      	b.n	4834 <__aeabi_dmul+0x410>
    453e:	221d      	movs	r2, #29
    4540:	1ad3      	subs	r3, r2, r3
    4542:	003a      	movs	r2, r7
    4544:	0001      	movs	r1, r0
    4546:	465c      	mov	r4, fp
    4548:	40da      	lsrs	r2, r3
    454a:	3908      	subs	r1, #8
    454c:	408c      	lsls	r4, r1
    454e:	0013      	movs	r3, r2
    4550:	408f      	lsls	r7, r1
    4552:	4323      	orrs	r3, r4
    4554:	469b      	mov	fp, r3
    4556:	46b9      	mov	r9, r7
    4558:	2300      	movs	r3, #0
    455a:	4e2d      	ldr	r6, [pc, #180]	; (4610 <__aeabi_dmul+0x1ec>)
    455c:	2700      	movs	r7, #0
    455e:	1a36      	subs	r6, r6, r0
    4560:	9302      	str	r3, [sp, #8]
    4562:	e784      	b.n	446e <__aeabi_dmul+0x4a>
    4564:	4653      	mov	r3, sl
    4566:	4323      	orrs	r3, r4
    4568:	d12a      	bne.n	45c0 <__aeabi_dmul+0x19c>
    456a:	2400      	movs	r4, #0
    456c:	2002      	movs	r0, #2
    456e:	e796      	b.n	449e <__aeabi_dmul+0x7a>
    4570:	4653      	mov	r3, sl
    4572:	4323      	orrs	r3, r4
    4574:	d020      	beq.n	45b8 <__aeabi_dmul+0x194>
    4576:	2c00      	cmp	r4, #0
    4578:	d100      	bne.n	457c <__aeabi_dmul+0x158>
    457a:	e157      	b.n	482c <__aeabi_dmul+0x408>
    457c:	0020      	movs	r0, r4
    457e:	f000 fd53 	bl	5028 <__clzsi2>
    4582:	0003      	movs	r3, r0
    4584:	3b0b      	subs	r3, #11
    4586:	2b1c      	cmp	r3, #28
    4588:	dd00      	ble.n	458c <__aeabi_dmul+0x168>
    458a:	e149      	b.n	4820 <__aeabi_dmul+0x3fc>
    458c:	211d      	movs	r1, #29
    458e:	1acb      	subs	r3, r1, r3
    4590:	4651      	mov	r1, sl
    4592:	0002      	movs	r2, r0
    4594:	40d9      	lsrs	r1, r3
    4596:	4653      	mov	r3, sl
    4598:	3a08      	subs	r2, #8
    459a:	4094      	lsls	r4, r2
    459c:	4093      	lsls	r3, r2
    459e:	430c      	orrs	r4, r1
    45a0:	4a1b      	ldr	r2, [pc, #108]	; (4610 <__aeabi_dmul+0x1ec>)
    45a2:	1a12      	subs	r2, r2, r0
    45a4:	2000      	movs	r0, #0
    45a6:	e77a      	b.n	449e <__aeabi_dmul+0x7a>
    45a8:	2501      	movs	r5, #1
    45aa:	9b01      	ldr	r3, [sp, #4]
    45ac:	4c14      	ldr	r4, [pc, #80]	; (4600 <__aeabi_dmul+0x1dc>)
    45ae:	401d      	ands	r5, r3
    45b0:	2300      	movs	r3, #0
    45b2:	2200      	movs	r2, #0
    45b4:	4699      	mov	r9, r3
    45b6:	e79c      	b.n	44f2 <__aeabi_dmul+0xce>
    45b8:	2400      	movs	r4, #0
    45ba:	2200      	movs	r2, #0
    45bc:	2001      	movs	r0, #1
    45be:	e76e      	b.n	449e <__aeabi_dmul+0x7a>
    45c0:	4653      	mov	r3, sl
    45c2:	2003      	movs	r0, #3
    45c4:	e76b      	b.n	449e <__aeabi_dmul+0x7a>
    45c6:	2300      	movs	r3, #0
    45c8:	469b      	mov	fp, r3
    45ca:	3301      	adds	r3, #1
    45cc:	2704      	movs	r7, #4
    45ce:	2600      	movs	r6, #0
    45d0:	9302      	str	r3, [sp, #8]
    45d2:	e74c      	b.n	446e <__aeabi_dmul+0x4a>
    45d4:	2303      	movs	r3, #3
    45d6:	4681      	mov	r9, r0
    45d8:	270c      	movs	r7, #12
    45da:	9302      	str	r3, [sp, #8]
    45dc:	e747      	b.n	446e <__aeabi_dmul+0x4a>
    45de:	2280      	movs	r2, #128	; 0x80
    45e0:	2300      	movs	r3, #0
    45e2:	2500      	movs	r5, #0
    45e4:	0312      	lsls	r2, r2, #12
    45e6:	4699      	mov	r9, r3
    45e8:	4c05      	ldr	r4, [pc, #20]	; (4600 <__aeabi_dmul+0x1dc>)
    45ea:	e782      	b.n	44f2 <__aeabi_dmul+0xce>
    45ec:	465c      	mov	r4, fp
    45ee:	464b      	mov	r3, r9
    45f0:	9802      	ldr	r0, [sp, #8]
    45f2:	e76f      	b.n	44d4 <__aeabi_dmul+0xb0>
    45f4:	465c      	mov	r4, fp
    45f6:	464b      	mov	r3, r9
    45f8:	9501      	str	r5, [sp, #4]
    45fa:	9802      	ldr	r0, [sp, #8]
    45fc:	e76a      	b.n	44d4 <__aeabi_dmul+0xb0>
    45fe:	46c0      	nop			; (mov r8, r8)
    4600:	000007ff 	.word	0x000007ff
    4604:	fffffc01 	.word	0xfffffc01
    4608:	00005b24 	.word	0x00005b24
    460c:	800fffff 	.word	0x800fffff
    4610:	fffffc0d 	.word	0xfffffc0d
    4614:	464a      	mov	r2, r9
    4616:	4649      	mov	r1, r9
    4618:	0c17      	lsrs	r7, r2, #16
    461a:	0c1a      	lsrs	r2, r3, #16
    461c:	041b      	lsls	r3, r3, #16
    461e:	0c1b      	lsrs	r3, r3, #16
    4620:	0408      	lsls	r0, r1, #16
    4622:	0019      	movs	r1, r3
    4624:	0c00      	lsrs	r0, r0, #16
    4626:	4341      	muls	r1, r0
    4628:	0015      	movs	r5, r2
    462a:	4688      	mov	r8, r1
    462c:	0019      	movs	r1, r3
    462e:	437d      	muls	r5, r7
    4630:	4379      	muls	r1, r7
    4632:	9503      	str	r5, [sp, #12]
    4634:	4689      	mov	r9, r1
    4636:	0029      	movs	r1, r5
    4638:	0015      	movs	r5, r2
    463a:	4345      	muls	r5, r0
    463c:	444d      	add	r5, r9
    463e:	9502      	str	r5, [sp, #8]
    4640:	4645      	mov	r5, r8
    4642:	0c2d      	lsrs	r5, r5, #16
    4644:	46aa      	mov	sl, r5
    4646:	9d02      	ldr	r5, [sp, #8]
    4648:	4455      	add	r5, sl
    464a:	45a9      	cmp	r9, r5
    464c:	d906      	bls.n	465c <__aeabi_dmul+0x238>
    464e:	468a      	mov	sl, r1
    4650:	2180      	movs	r1, #128	; 0x80
    4652:	0249      	lsls	r1, r1, #9
    4654:	4689      	mov	r9, r1
    4656:	44ca      	add	sl, r9
    4658:	4651      	mov	r1, sl
    465a:	9103      	str	r1, [sp, #12]
    465c:	0c29      	lsrs	r1, r5, #16
    465e:	9104      	str	r1, [sp, #16]
    4660:	4641      	mov	r1, r8
    4662:	0409      	lsls	r1, r1, #16
    4664:	042d      	lsls	r5, r5, #16
    4666:	0c09      	lsrs	r1, r1, #16
    4668:	4688      	mov	r8, r1
    466a:	0029      	movs	r1, r5
    466c:	0c25      	lsrs	r5, r4, #16
    466e:	0424      	lsls	r4, r4, #16
    4670:	4441      	add	r1, r8
    4672:	0c24      	lsrs	r4, r4, #16
    4674:	9105      	str	r1, [sp, #20]
    4676:	0021      	movs	r1, r4
    4678:	4341      	muls	r1, r0
    467a:	4688      	mov	r8, r1
    467c:	0021      	movs	r1, r4
    467e:	4379      	muls	r1, r7
    4680:	468a      	mov	sl, r1
    4682:	4368      	muls	r0, r5
    4684:	4641      	mov	r1, r8
    4686:	4450      	add	r0, sl
    4688:	4681      	mov	r9, r0
    468a:	0c08      	lsrs	r0, r1, #16
    468c:	4448      	add	r0, r9
    468e:	436f      	muls	r7, r5
    4690:	4582      	cmp	sl, r0
    4692:	d903      	bls.n	469c <__aeabi_dmul+0x278>
    4694:	2180      	movs	r1, #128	; 0x80
    4696:	0249      	lsls	r1, r1, #9
    4698:	4689      	mov	r9, r1
    469a:	444f      	add	r7, r9
    469c:	0c01      	lsrs	r1, r0, #16
    469e:	4689      	mov	r9, r1
    46a0:	0039      	movs	r1, r7
    46a2:	4449      	add	r1, r9
    46a4:	9102      	str	r1, [sp, #8]
    46a6:	4641      	mov	r1, r8
    46a8:	040f      	lsls	r7, r1, #16
    46aa:	9904      	ldr	r1, [sp, #16]
    46ac:	0c3f      	lsrs	r7, r7, #16
    46ae:	4688      	mov	r8, r1
    46b0:	0400      	lsls	r0, r0, #16
    46b2:	19c0      	adds	r0, r0, r7
    46b4:	4480      	add	r8, r0
    46b6:	4641      	mov	r1, r8
    46b8:	9104      	str	r1, [sp, #16]
    46ba:	4659      	mov	r1, fp
    46bc:	0c0f      	lsrs	r7, r1, #16
    46be:	0409      	lsls	r1, r1, #16
    46c0:	0c09      	lsrs	r1, r1, #16
    46c2:	4688      	mov	r8, r1
    46c4:	4359      	muls	r1, r3
    46c6:	468a      	mov	sl, r1
    46c8:	0039      	movs	r1, r7
    46ca:	4351      	muls	r1, r2
    46cc:	4689      	mov	r9, r1
    46ce:	4641      	mov	r1, r8
    46d0:	434a      	muls	r2, r1
    46d2:	4651      	mov	r1, sl
    46d4:	0c09      	lsrs	r1, r1, #16
    46d6:	468b      	mov	fp, r1
    46d8:	437b      	muls	r3, r7
    46da:	18d2      	adds	r2, r2, r3
    46dc:	445a      	add	r2, fp
    46de:	4293      	cmp	r3, r2
    46e0:	d903      	bls.n	46ea <__aeabi_dmul+0x2c6>
    46e2:	2380      	movs	r3, #128	; 0x80
    46e4:	025b      	lsls	r3, r3, #9
    46e6:	469b      	mov	fp, r3
    46e8:	44d9      	add	r9, fp
    46ea:	4651      	mov	r1, sl
    46ec:	0409      	lsls	r1, r1, #16
    46ee:	0c09      	lsrs	r1, r1, #16
    46f0:	468a      	mov	sl, r1
    46f2:	4641      	mov	r1, r8
    46f4:	4361      	muls	r1, r4
    46f6:	437c      	muls	r4, r7
    46f8:	0c13      	lsrs	r3, r2, #16
    46fa:	0412      	lsls	r2, r2, #16
    46fc:	444b      	add	r3, r9
    46fe:	4452      	add	r2, sl
    4700:	46a1      	mov	r9, r4
    4702:	468a      	mov	sl, r1
    4704:	003c      	movs	r4, r7
    4706:	4641      	mov	r1, r8
    4708:	436c      	muls	r4, r5
    470a:	434d      	muls	r5, r1
    470c:	4651      	mov	r1, sl
    470e:	444d      	add	r5, r9
    4710:	0c0f      	lsrs	r7, r1, #16
    4712:	197d      	adds	r5, r7, r5
    4714:	45a9      	cmp	r9, r5
    4716:	d903      	bls.n	4720 <__aeabi_dmul+0x2fc>
    4718:	2180      	movs	r1, #128	; 0x80
    471a:	0249      	lsls	r1, r1, #9
    471c:	4688      	mov	r8, r1
    471e:	4444      	add	r4, r8
    4720:	9f04      	ldr	r7, [sp, #16]
    4722:	9903      	ldr	r1, [sp, #12]
    4724:	46b8      	mov	r8, r7
    4726:	4441      	add	r1, r8
    4728:	468b      	mov	fp, r1
    472a:	4583      	cmp	fp, r0
    472c:	4180      	sbcs	r0, r0
    472e:	4241      	negs	r1, r0
    4730:	4688      	mov	r8, r1
    4732:	4651      	mov	r1, sl
    4734:	0408      	lsls	r0, r1, #16
    4736:	042f      	lsls	r7, r5, #16
    4738:	0c00      	lsrs	r0, r0, #16
    473a:	183f      	adds	r7, r7, r0
    473c:	4658      	mov	r0, fp
    473e:	9902      	ldr	r1, [sp, #8]
    4740:	1810      	adds	r0, r2, r0
    4742:	4689      	mov	r9, r1
    4744:	4290      	cmp	r0, r2
    4746:	4192      	sbcs	r2, r2
    4748:	444f      	add	r7, r9
    474a:	46ba      	mov	sl, r7
    474c:	4252      	negs	r2, r2
    474e:	4699      	mov	r9, r3
    4750:	4693      	mov	fp, r2
    4752:	44c2      	add	sl, r8
    4754:	44d1      	add	r9, sl
    4756:	44cb      	add	fp, r9
    4758:	428f      	cmp	r7, r1
    475a:	41bf      	sbcs	r7, r7
    475c:	45c2      	cmp	sl, r8
    475e:	4189      	sbcs	r1, r1
    4760:	4599      	cmp	r9, r3
    4762:	419b      	sbcs	r3, r3
    4764:	4593      	cmp	fp, r2
    4766:	4192      	sbcs	r2, r2
    4768:	427f      	negs	r7, r7
    476a:	4249      	negs	r1, r1
    476c:	0c2d      	lsrs	r5, r5, #16
    476e:	4252      	negs	r2, r2
    4770:	430f      	orrs	r7, r1
    4772:	425b      	negs	r3, r3
    4774:	4313      	orrs	r3, r2
    4776:	197f      	adds	r7, r7, r5
    4778:	18ff      	adds	r7, r7, r3
    477a:	465b      	mov	r3, fp
    477c:	193c      	adds	r4, r7, r4
    477e:	0ddb      	lsrs	r3, r3, #23
    4780:	9a05      	ldr	r2, [sp, #20]
    4782:	0264      	lsls	r4, r4, #9
    4784:	431c      	orrs	r4, r3
    4786:	0243      	lsls	r3, r0, #9
    4788:	4313      	orrs	r3, r2
    478a:	1e5d      	subs	r5, r3, #1
    478c:	41ab      	sbcs	r3, r5
    478e:	465a      	mov	r2, fp
    4790:	0dc0      	lsrs	r0, r0, #23
    4792:	4303      	orrs	r3, r0
    4794:	0252      	lsls	r2, r2, #9
    4796:	4313      	orrs	r3, r2
    4798:	01e2      	lsls	r2, r4, #7
    479a:	d556      	bpl.n	484a <__aeabi_dmul+0x426>
    479c:	2001      	movs	r0, #1
    479e:	085a      	lsrs	r2, r3, #1
    47a0:	4003      	ands	r3, r0
    47a2:	4313      	orrs	r3, r2
    47a4:	07e2      	lsls	r2, r4, #31
    47a6:	4313      	orrs	r3, r2
    47a8:	0864      	lsrs	r4, r4, #1
    47aa:	485a      	ldr	r0, [pc, #360]	; (4914 <__aeabi_dmul+0x4f0>)
    47ac:	4460      	add	r0, ip
    47ae:	2800      	cmp	r0, #0
    47b0:	dd4d      	ble.n	484e <__aeabi_dmul+0x42a>
    47b2:	075a      	lsls	r2, r3, #29
    47b4:	d009      	beq.n	47ca <__aeabi_dmul+0x3a6>
    47b6:	220f      	movs	r2, #15
    47b8:	401a      	ands	r2, r3
    47ba:	2a04      	cmp	r2, #4
    47bc:	d005      	beq.n	47ca <__aeabi_dmul+0x3a6>
    47be:	1d1a      	adds	r2, r3, #4
    47c0:	429a      	cmp	r2, r3
    47c2:	419b      	sbcs	r3, r3
    47c4:	425b      	negs	r3, r3
    47c6:	18e4      	adds	r4, r4, r3
    47c8:	0013      	movs	r3, r2
    47ca:	01e2      	lsls	r2, r4, #7
    47cc:	d504      	bpl.n	47d8 <__aeabi_dmul+0x3b4>
    47ce:	2080      	movs	r0, #128	; 0x80
    47d0:	4a51      	ldr	r2, [pc, #324]	; (4918 <__aeabi_dmul+0x4f4>)
    47d2:	00c0      	lsls	r0, r0, #3
    47d4:	4014      	ands	r4, r2
    47d6:	4460      	add	r0, ip
    47d8:	4a50      	ldr	r2, [pc, #320]	; (491c <__aeabi_dmul+0x4f8>)
    47da:	4290      	cmp	r0, r2
    47dc:	dd00      	ble.n	47e0 <__aeabi_dmul+0x3bc>
    47de:	e6e3      	b.n	45a8 <__aeabi_dmul+0x184>
    47e0:	2501      	movs	r5, #1
    47e2:	08db      	lsrs	r3, r3, #3
    47e4:	0762      	lsls	r2, r4, #29
    47e6:	431a      	orrs	r2, r3
    47e8:	0264      	lsls	r4, r4, #9
    47ea:	9b01      	ldr	r3, [sp, #4]
    47ec:	4691      	mov	r9, r2
    47ee:	0b22      	lsrs	r2, r4, #12
    47f0:	0544      	lsls	r4, r0, #21
    47f2:	0d64      	lsrs	r4, r4, #21
    47f4:	401d      	ands	r5, r3
    47f6:	e67c      	b.n	44f2 <__aeabi_dmul+0xce>
    47f8:	2280      	movs	r2, #128	; 0x80
    47fa:	4659      	mov	r1, fp
    47fc:	0312      	lsls	r2, r2, #12
    47fe:	4211      	tst	r1, r2
    4800:	d008      	beq.n	4814 <__aeabi_dmul+0x3f0>
    4802:	4214      	tst	r4, r2
    4804:	d106      	bne.n	4814 <__aeabi_dmul+0x3f0>
    4806:	4322      	orrs	r2, r4
    4808:	0312      	lsls	r2, r2, #12
    480a:	0b12      	lsrs	r2, r2, #12
    480c:	4645      	mov	r5, r8
    480e:	4699      	mov	r9, r3
    4810:	4c43      	ldr	r4, [pc, #268]	; (4920 <__aeabi_dmul+0x4fc>)
    4812:	e66e      	b.n	44f2 <__aeabi_dmul+0xce>
    4814:	465b      	mov	r3, fp
    4816:	431a      	orrs	r2, r3
    4818:	0312      	lsls	r2, r2, #12
    481a:	0b12      	lsrs	r2, r2, #12
    481c:	4c40      	ldr	r4, [pc, #256]	; (4920 <__aeabi_dmul+0x4fc>)
    481e:	e668      	b.n	44f2 <__aeabi_dmul+0xce>
    4820:	0003      	movs	r3, r0
    4822:	4654      	mov	r4, sl
    4824:	3b28      	subs	r3, #40	; 0x28
    4826:	409c      	lsls	r4, r3
    4828:	2300      	movs	r3, #0
    482a:	e6b9      	b.n	45a0 <__aeabi_dmul+0x17c>
    482c:	f000 fbfc 	bl	5028 <__clzsi2>
    4830:	3020      	adds	r0, #32
    4832:	e6a6      	b.n	4582 <__aeabi_dmul+0x15e>
    4834:	0003      	movs	r3, r0
    4836:	3b28      	subs	r3, #40	; 0x28
    4838:	409f      	lsls	r7, r3
    483a:	2300      	movs	r3, #0
    483c:	46bb      	mov	fp, r7
    483e:	4699      	mov	r9, r3
    4840:	e68a      	b.n	4558 <__aeabi_dmul+0x134>
    4842:	f000 fbf1 	bl	5028 <__clzsi2>
    4846:	3020      	adds	r0, #32
    4848:	e674      	b.n	4534 <__aeabi_dmul+0x110>
    484a:	46b4      	mov	ip, r6
    484c:	e7ad      	b.n	47aa <__aeabi_dmul+0x386>
    484e:	2501      	movs	r5, #1
    4850:	1a2a      	subs	r2, r5, r0
    4852:	2a38      	cmp	r2, #56	; 0x38
    4854:	dd06      	ble.n	4864 <__aeabi_dmul+0x440>
    4856:	9b01      	ldr	r3, [sp, #4]
    4858:	2400      	movs	r4, #0
    485a:	401d      	ands	r5, r3
    485c:	2300      	movs	r3, #0
    485e:	2200      	movs	r2, #0
    4860:	4699      	mov	r9, r3
    4862:	e646      	b.n	44f2 <__aeabi_dmul+0xce>
    4864:	2a1f      	cmp	r2, #31
    4866:	dc21      	bgt.n	48ac <__aeabi_dmul+0x488>
    4868:	2520      	movs	r5, #32
    486a:	0020      	movs	r0, r4
    486c:	1aad      	subs	r5, r5, r2
    486e:	001e      	movs	r6, r3
    4870:	40ab      	lsls	r3, r5
    4872:	40a8      	lsls	r0, r5
    4874:	40d6      	lsrs	r6, r2
    4876:	1e5d      	subs	r5, r3, #1
    4878:	41ab      	sbcs	r3, r5
    487a:	4330      	orrs	r0, r6
    487c:	4318      	orrs	r0, r3
    487e:	40d4      	lsrs	r4, r2
    4880:	0743      	lsls	r3, r0, #29
    4882:	d009      	beq.n	4898 <__aeabi_dmul+0x474>
    4884:	230f      	movs	r3, #15
    4886:	4003      	ands	r3, r0
    4888:	2b04      	cmp	r3, #4
    488a:	d005      	beq.n	4898 <__aeabi_dmul+0x474>
    488c:	0003      	movs	r3, r0
    488e:	1d18      	adds	r0, r3, #4
    4890:	4298      	cmp	r0, r3
    4892:	419b      	sbcs	r3, r3
    4894:	425b      	negs	r3, r3
    4896:	18e4      	adds	r4, r4, r3
    4898:	0223      	lsls	r3, r4, #8
    489a:	d521      	bpl.n	48e0 <__aeabi_dmul+0x4bc>
    489c:	2501      	movs	r5, #1
    489e:	9b01      	ldr	r3, [sp, #4]
    48a0:	2401      	movs	r4, #1
    48a2:	401d      	ands	r5, r3
    48a4:	2300      	movs	r3, #0
    48a6:	2200      	movs	r2, #0
    48a8:	4699      	mov	r9, r3
    48aa:	e622      	b.n	44f2 <__aeabi_dmul+0xce>
    48ac:	251f      	movs	r5, #31
    48ae:	0021      	movs	r1, r4
    48b0:	426d      	negs	r5, r5
    48b2:	1a28      	subs	r0, r5, r0
    48b4:	40c1      	lsrs	r1, r0
    48b6:	0008      	movs	r0, r1
    48b8:	2a20      	cmp	r2, #32
    48ba:	d01d      	beq.n	48f8 <__aeabi_dmul+0x4d4>
    48bc:	355f      	adds	r5, #95	; 0x5f
    48be:	1aaa      	subs	r2, r5, r2
    48c0:	4094      	lsls	r4, r2
    48c2:	4323      	orrs	r3, r4
    48c4:	1e5c      	subs	r4, r3, #1
    48c6:	41a3      	sbcs	r3, r4
    48c8:	2507      	movs	r5, #7
    48ca:	4303      	orrs	r3, r0
    48cc:	401d      	ands	r5, r3
    48ce:	2200      	movs	r2, #0
    48d0:	2d00      	cmp	r5, #0
    48d2:	d009      	beq.n	48e8 <__aeabi_dmul+0x4c4>
    48d4:	220f      	movs	r2, #15
    48d6:	2400      	movs	r4, #0
    48d8:	401a      	ands	r2, r3
    48da:	0018      	movs	r0, r3
    48dc:	2a04      	cmp	r2, #4
    48de:	d1d6      	bne.n	488e <__aeabi_dmul+0x46a>
    48e0:	0003      	movs	r3, r0
    48e2:	0765      	lsls	r5, r4, #29
    48e4:	0264      	lsls	r4, r4, #9
    48e6:	0b22      	lsrs	r2, r4, #12
    48e8:	08db      	lsrs	r3, r3, #3
    48ea:	432b      	orrs	r3, r5
    48ec:	2501      	movs	r5, #1
    48ee:	4699      	mov	r9, r3
    48f0:	9b01      	ldr	r3, [sp, #4]
    48f2:	2400      	movs	r4, #0
    48f4:	401d      	ands	r5, r3
    48f6:	e5fc      	b.n	44f2 <__aeabi_dmul+0xce>
    48f8:	2400      	movs	r4, #0
    48fa:	e7e2      	b.n	48c2 <__aeabi_dmul+0x49e>
    48fc:	2280      	movs	r2, #128	; 0x80
    48fe:	2501      	movs	r5, #1
    4900:	0312      	lsls	r2, r2, #12
    4902:	4322      	orrs	r2, r4
    4904:	9901      	ldr	r1, [sp, #4]
    4906:	0312      	lsls	r2, r2, #12
    4908:	0b12      	lsrs	r2, r2, #12
    490a:	400d      	ands	r5, r1
    490c:	4699      	mov	r9, r3
    490e:	4c04      	ldr	r4, [pc, #16]	; (4920 <__aeabi_dmul+0x4fc>)
    4910:	e5ef      	b.n	44f2 <__aeabi_dmul+0xce>
    4912:	46c0      	nop			; (mov r8, r8)
    4914:	000003ff 	.word	0x000003ff
    4918:	feffffff 	.word	0xfeffffff
    491c:	000007fe 	.word	0x000007fe
    4920:	000007ff 	.word	0x000007ff

00004924 <__aeabi_dsub>:
    4924:	b5f0      	push	{r4, r5, r6, r7, lr}
    4926:	4646      	mov	r6, r8
    4928:	46d6      	mov	lr, sl
    492a:	464f      	mov	r7, r9
    492c:	030c      	lsls	r4, r1, #12
    492e:	b5c0      	push	{r6, r7, lr}
    4930:	0fcd      	lsrs	r5, r1, #31
    4932:	004e      	lsls	r6, r1, #1
    4934:	0a61      	lsrs	r1, r4, #9
    4936:	0f44      	lsrs	r4, r0, #29
    4938:	430c      	orrs	r4, r1
    493a:	00c1      	lsls	r1, r0, #3
    493c:	0058      	lsls	r0, r3, #1
    493e:	0d40      	lsrs	r0, r0, #21
    4940:	4684      	mov	ip, r0
    4942:	468a      	mov	sl, r1
    4944:	000f      	movs	r7, r1
    4946:	0319      	lsls	r1, r3, #12
    4948:	0f50      	lsrs	r0, r2, #29
    494a:	0a49      	lsrs	r1, r1, #9
    494c:	4301      	orrs	r1, r0
    494e:	48c6      	ldr	r0, [pc, #792]	; (4c68 <__aeabi_dsub+0x344>)
    4950:	0d76      	lsrs	r6, r6, #21
    4952:	46a8      	mov	r8, r5
    4954:	0fdb      	lsrs	r3, r3, #31
    4956:	00d2      	lsls	r2, r2, #3
    4958:	4584      	cmp	ip, r0
    495a:	d100      	bne.n	495e <__aeabi_dsub+0x3a>
    495c:	e0d8      	b.n	4b10 <__aeabi_dsub+0x1ec>
    495e:	2001      	movs	r0, #1
    4960:	4043      	eors	r3, r0
    4962:	42ab      	cmp	r3, r5
    4964:	d100      	bne.n	4968 <__aeabi_dsub+0x44>
    4966:	e0a6      	b.n	4ab6 <__aeabi_dsub+0x192>
    4968:	4660      	mov	r0, ip
    496a:	1a35      	subs	r5, r6, r0
    496c:	2d00      	cmp	r5, #0
    496e:	dc00      	bgt.n	4972 <__aeabi_dsub+0x4e>
    4970:	e105      	b.n	4b7e <__aeabi_dsub+0x25a>
    4972:	2800      	cmp	r0, #0
    4974:	d110      	bne.n	4998 <__aeabi_dsub+0x74>
    4976:	000b      	movs	r3, r1
    4978:	4313      	orrs	r3, r2
    497a:	d100      	bne.n	497e <__aeabi_dsub+0x5a>
    497c:	e0d7      	b.n	4b2e <__aeabi_dsub+0x20a>
    497e:	1e6b      	subs	r3, r5, #1
    4980:	2b00      	cmp	r3, #0
    4982:	d000      	beq.n	4986 <__aeabi_dsub+0x62>
    4984:	e14b      	b.n	4c1e <__aeabi_dsub+0x2fa>
    4986:	4653      	mov	r3, sl
    4988:	1a9f      	subs	r7, r3, r2
    498a:	45ba      	cmp	sl, r7
    498c:	4180      	sbcs	r0, r0
    498e:	1a64      	subs	r4, r4, r1
    4990:	4240      	negs	r0, r0
    4992:	1a24      	subs	r4, r4, r0
    4994:	2601      	movs	r6, #1
    4996:	e01e      	b.n	49d6 <__aeabi_dsub+0xb2>
    4998:	4bb3      	ldr	r3, [pc, #716]	; (4c68 <__aeabi_dsub+0x344>)
    499a:	429e      	cmp	r6, r3
    499c:	d048      	beq.n	4a30 <__aeabi_dsub+0x10c>
    499e:	2380      	movs	r3, #128	; 0x80
    49a0:	041b      	lsls	r3, r3, #16
    49a2:	4319      	orrs	r1, r3
    49a4:	2d38      	cmp	r5, #56	; 0x38
    49a6:	dd00      	ble.n	49aa <__aeabi_dsub+0x86>
    49a8:	e119      	b.n	4bde <__aeabi_dsub+0x2ba>
    49aa:	2d1f      	cmp	r5, #31
    49ac:	dd00      	ble.n	49b0 <__aeabi_dsub+0x8c>
    49ae:	e14c      	b.n	4c4a <__aeabi_dsub+0x326>
    49b0:	2320      	movs	r3, #32
    49b2:	000f      	movs	r7, r1
    49b4:	1b5b      	subs	r3, r3, r5
    49b6:	0010      	movs	r0, r2
    49b8:	409a      	lsls	r2, r3
    49ba:	409f      	lsls	r7, r3
    49bc:	40e8      	lsrs	r0, r5
    49be:	1e53      	subs	r3, r2, #1
    49c0:	419a      	sbcs	r2, r3
    49c2:	40e9      	lsrs	r1, r5
    49c4:	4307      	orrs	r7, r0
    49c6:	4317      	orrs	r7, r2
    49c8:	4653      	mov	r3, sl
    49ca:	1bdf      	subs	r7, r3, r7
    49cc:	1a61      	subs	r1, r4, r1
    49ce:	45ba      	cmp	sl, r7
    49d0:	41a4      	sbcs	r4, r4
    49d2:	4264      	negs	r4, r4
    49d4:	1b0c      	subs	r4, r1, r4
    49d6:	0223      	lsls	r3, r4, #8
    49d8:	d400      	bmi.n	49dc <__aeabi_dsub+0xb8>
    49da:	e0c5      	b.n	4b68 <__aeabi_dsub+0x244>
    49dc:	0264      	lsls	r4, r4, #9
    49de:	0a65      	lsrs	r5, r4, #9
    49e0:	2d00      	cmp	r5, #0
    49e2:	d100      	bne.n	49e6 <__aeabi_dsub+0xc2>
    49e4:	e0f6      	b.n	4bd4 <__aeabi_dsub+0x2b0>
    49e6:	0028      	movs	r0, r5
    49e8:	f000 fb1e 	bl	5028 <__clzsi2>
    49ec:	0003      	movs	r3, r0
    49ee:	3b08      	subs	r3, #8
    49f0:	2b1f      	cmp	r3, #31
    49f2:	dd00      	ble.n	49f6 <__aeabi_dsub+0xd2>
    49f4:	e0e9      	b.n	4bca <__aeabi_dsub+0x2a6>
    49f6:	2220      	movs	r2, #32
    49f8:	003c      	movs	r4, r7
    49fa:	1ad2      	subs	r2, r2, r3
    49fc:	409d      	lsls	r5, r3
    49fe:	40d4      	lsrs	r4, r2
    4a00:	409f      	lsls	r7, r3
    4a02:	4325      	orrs	r5, r4
    4a04:	429e      	cmp	r6, r3
    4a06:	dd00      	ble.n	4a0a <__aeabi_dsub+0xe6>
    4a08:	e0db      	b.n	4bc2 <__aeabi_dsub+0x29e>
    4a0a:	1b9e      	subs	r6, r3, r6
    4a0c:	1c73      	adds	r3, r6, #1
    4a0e:	2b1f      	cmp	r3, #31
    4a10:	dd00      	ble.n	4a14 <__aeabi_dsub+0xf0>
    4a12:	e10a      	b.n	4c2a <__aeabi_dsub+0x306>
    4a14:	2220      	movs	r2, #32
    4a16:	0038      	movs	r0, r7
    4a18:	1ad2      	subs	r2, r2, r3
    4a1a:	0029      	movs	r1, r5
    4a1c:	4097      	lsls	r7, r2
    4a1e:	002c      	movs	r4, r5
    4a20:	4091      	lsls	r1, r2
    4a22:	40d8      	lsrs	r0, r3
    4a24:	1e7a      	subs	r2, r7, #1
    4a26:	4197      	sbcs	r7, r2
    4a28:	40dc      	lsrs	r4, r3
    4a2a:	2600      	movs	r6, #0
    4a2c:	4301      	orrs	r1, r0
    4a2e:	430f      	orrs	r7, r1
    4a30:	077b      	lsls	r3, r7, #29
    4a32:	d009      	beq.n	4a48 <__aeabi_dsub+0x124>
    4a34:	230f      	movs	r3, #15
    4a36:	403b      	ands	r3, r7
    4a38:	2b04      	cmp	r3, #4
    4a3a:	d005      	beq.n	4a48 <__aeabi_dsub+0x124>
    4a3c:	1d3b      	adds	r3, r7, #4
    4a3e:	42bb      	cmp	r3, r7
    4a40:	41bf      	sbcs	r7, r7
    4a42:	427f      	negs	r7, r7
    4a44:	19e4      	adds	r4, r4, r7
    4a46:	001f      	movs	r7, r3
    4a48:	0223      	lsls	r3, r4, #8
    4a4a:	d525      	bpl.n	4a98 <__aeabi_dsub+0x174>
    4a4c:	4b86      	ldr	r3, [pc, #536]	; (4c68 <__aeabi_dsub+0x344>)
    4a4e:	3601      	adds	r6, #1
    4a50:	429e      	cmp	r6, r3
    4a52:	d100      	bne.n	4a56 <__aeabi_dsub+0x132>
    4a54:	e0af      	b.n	4bb6 <__aeabi_dsub+0x292>
    4a56:	4b85      	ldr	r3, [pc, #532]	; (4c6c <__aeabi_dsub+0x348>)
    4a58:	2501      	movs	r5, #1
    4a5a:	401c      	ands	r4, r3
    4a5c:	4643      	mov	r3, r8
    4a5e:	0762      	lsls	r2, r4, #29
    4a60:	08ff      	lsrs	r7, r7, #3
    4a62:	0264      	lsls	r4, r4, #9
    4a64:	0576      	lsls	r6, r6, #21
    4a66:	4317      	orrs	r7, r2
    4a68:	0b24      	lsrs	r4, r4, #12
    4a6a:	0d76      	lsrs	r6, r6, #21
    4a6c:	401d      	ands	r5, r3
    4a6e:	2100      	movs	r1, #0
    4a70:	0324      	lsls	r4, r4, #12
    4a72:	0b23      	lsrs	r3, r4, #12
    4a74:	0d0c      	lsrs	r4, r1, #20
    4a76:	4a7e      	ldr	r2, [pc, #504]	; (4c70 <__aeabi_dsub+0x34c>)
    4a78:	0524      	lsls	r4, r4, #20
    4a7a:	431c      	orrs	r4, r3
    4a7c:	4014      	ands	r4, r2
    4a7e:	0533      	lsls	r3, r6, #20
    4a80:	4323      	orrs	r3, r4
    4a82:	005b      	lsls	r3, r3, #1
    4a84:	07ed      	lsls	r5, r5, #31
    4a86:	085b      	lsrs	r3, r3, #1
    4a88:	432b      	orrs	r3, r5
    4a8a:	0038      	movs	r0, r7
    4a8c:	0019      	movs	r1, r3
    4a8e:	bc1c      	pop	{r2, r3, r4}
    4a90:	4690      	mov	r8, r2
    4a92:	4699      	mov	r9, r3
    4a94:	46a2      	mov	sl, r4
    4a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a98:	2501      	movs	r5, #1
    4a9a:	4643      	mov	r3, r8
    4a9c:	0762      	lsls	r2, r4, #29
    4a9e:	08ff      	lsrs	r7, r7, #3
    4aa0:	4317      	orrs	r7, r2
    4aa2:	08e4      	lsrs	r4, r4, #3
    4aa4:	401d      	ands	r5, r3
    4aa6:	4b70      	ldr	r3, [pc, #448]	; (4c68 <__aeabi_dsub+0x344>)
    4aa8:	429e      	cmp	r6, r3
    4aaa:	d036      	beq.n	4b1a <__aeabi_dsub+0x1f6>
    4aac:	0324      	lsls	r4, r4, #12
    4aae:	0576      	lsls	r6, r6, #21
    4ab0:	0b24      	lsrs	r4, r4, #12
    4ab2:	0d76      	lsrs	r6, r6, #21
    4ab4:	e7db      	b.n	4a6e <__aeabi_dsub+0x14a>
    4ab6:	4663      	mov	r3, ip
    4ab8:	1af3      	subs	r3, r6, r3
    4aba:	2b00      	cmp	r3, #0
    4abc:	dc00      	bgt.n	4ac0 <__aeabi_dsub+0x19c>
    4abe:	e094      	b.n	4bea <__aeabi_dsub+0x2c6>
    4ac0:	4660      	mov	r0, ip
    4ac2:	2800      	cmp	r0, #0
    4ac4:	d035      	beq.n	4b32 <__aeabi_dsub+0x20e>
    4ac6:	4868      	ldr	r0, [pc, #416]	; (4c68 <__aeabi_dsub+0x344>)
    4ac8:	4286      	cmp	r6, r0
    4aca:	d0b1      	beq.n	4a30 <__aeabi_dsub+0x10c>
    4acc:	2780      	movs	r7, #128	; 0x80
    4ace:	043f      	lsls	r7, r7, #16
    4ad0:	4339      	orrs	r1, r7
    4ad2:	2b38      	cmp	r3, #56	; 0x38
    4ad4:	dc00      	bgt.n	4ad8 <__aeabi_dsub+0x1b4>
    4ad6:	e0fd      	b.n	4cd4 <__aeabi_dsub+0x3b0>
    4ad8:	430a      	orrs	r2, r1
    4ada:	0017      	movs	r7, r2
    4adc:	2100      	movs	r1, #0
    4ade:	1e7a      	subs	r2, r7, #1
    4ae0:	4197      	sbcs	r7, r2
    4ae2:	4457      	add	r7, sl
    4ae4:	4557      	cmp	r7, sl
    4ae6:	4180      	sbcs	r0, r0
    4ae8:	1909      	adds	r1, r1, r4
    4aea:	4244      	negs	r4, r0
    4aec:	190c      	adds	r4, r1, r4
    4aee:	0223      	lsls	r3, r4, #8
    4af0:	d53a      	bpl.n	4b68 <__aeabi_dsub+0x244>
    4af2:	4b5d      	ldr	r3, [pc, #372]	; (4c68 <__aeabi_dsub+0x344>)
    4af4:	3601      	adds	r6, #1
    4af6:	429e      	cmp	r6, r3
    4af8:	d100      	bne.n	4afc <__aeabi_dsub+0x1d8>
    4afa:	e14b      	b.n	4d94 <__aeabi_dsub+0x470>
    4afc:	2201      	movs	r2, #1
    4afe:	4b5b      	ldr	r3, [pc, #364]	; (4c6c <__aeabi_dsub+0x348>)
    4b00:	401c      	ands	r4, r3
    4b02:	087b      	lsrs	r3, r7, #1
    4b04:	4017      	ands	r7, r2
    4b06:	431f      	orrs	r7, r3
    4b08:	07e2      	lsls	r2, r4, #31
    4b0a:	4317      	orrs	r7, r2
    4b0c:	0864      	lsrs	r4, r4, #1
    4b0e:	e78f      	b.n	4a30 <__aeabi_dsub+0x10c>
    4b10:	0008      	movs	r0, r1
    4b12:	4310      	orrs	r0, r2
    4b14:	d000      	beq.n	4b18 <__aeabi_dsub+0x1f4>
    4b16:	e724      	b.n	4962 <__aeabi_dsub+0x3e>
    4b18:	e721      	b.n	495e <__aeabi_dsub+0x3a>
    4b1a:	0023      	movs	r3, r4
    4b1c:	433b      	orrs	r3, r7
    4b1e:	d100      	bne.n	4b22 <__aeabi_dsub+0x1fe>
    4b20:	e1b9      	b.n	4e96 <__aeabi_dsub+0x572>
    4b22:	2280      	movs	r2, #128	; 0x80
    4b24:	0312      	lsls	r2, r2, #12
    4b26:	4314      	orrs	r4, r2
    4b28:	0324      	lsls	r4, r4, #12
    4b2a:	0b24      	lsrs	r4, r4, #12
    4b2c:	e79f      	b.n	4a6e <__aeabi_dsub+0x14a>
    4b2e:	002e      	movs	r6, r5
    4b30:	e77e      	b.n	4a30 <__aeabi_dsub+0x10c>
    4b32:	0008      	movs	r0, r1
    4b34:	4310      	orrs	r0, r2
    4b36:	d100      	bne.n	4b3a <__aeabi_dsub+0x216>
    4b38:	e0ca      	b.n	4cd0 <__aeabi_dsub+0x3ac>
    4b3a:	1e58      	subs	r0, r3, #1
    4b3c:	4684      	mov	ip, r0
    4b3e:	2800      	cmp	r0, #0
    4b40:	d000      	beq.n	4b44 <__aeabi_dsub+0x220>
    4b42:	e0e7      	b.n	4d14 <__aeabi_dsub+0x3f0>
    4b44:	4452      	add	r2, sl
    4b46:	4552      	cmp	r2, sl
    4b48:	4180      	sbcs	r0, r0
    4b4a:	1864      	adds	r4, r4, r1
    4b4c:	4240      	negs	r0, r0
    4b4e:	1824      	adds	r4, r4, r0
    4b50:	0017      	movs	r7, r2
    4b52:	2601      	movs	r6, #1
    4b54:	0223      	lsls	r3, r4, #8
    4b56:	d507      	bpl.n	4b68 <__aeabi_dsub+0x244>
    4b58:	2602      	movs	r6, #2
    4b5a:	e7cf      	b.n	4afc <__aeabi_dsub+0x1d8>
    4b5c:	4664      	mov	r4, ip
    4b5e:	432c      	orrs	r4, r5
    4b60:	d100      	bne.n	4b64 <__aeabi_dsub+0x240>
    4b62:	e1b3      	b.n	4ecc <__aeabi_dsub+0x5a8>
    4b64:	002c      	movs	r4, r5
    4b66:	4667      	mov	r7, ip
    4b68:	077b      	lsls	r3, r7, #29
    4b6a:	d000      	beq.n	4b6e <__aeabi_dsub+0x24a>
    4b6c:	e762      	b.n	4a34 <__aeabi_dsub+0x110>
    4b6e:	0763      	lsls	r3, r4, #29
    4b70:	08ff      	lsrs	r7, r7, #3
    4b72:	431f      	orrs	r7, r3
    4b74:	2501      	movs	r5, #1
    4b76:	4643      	mov	r3, r8
    4b78:	08e4      	lsrs	r4, r4, #3
    4b7a:	401d      	ands	r5, r3
    4b7c:	e793      	b.n	4aa6 <__aeabi_dsub+0x182>
    4b7e:	2d00      	cmp	r5, #0
    4b80:	d178      	bne.n	4c74 <__aeabi_dsub+0x350>
    4b82:	1c75      	adds	r5, r6, #1
    4b84:	056d      	lsls	r5, r5, #21
    4b86:	0d6d      	lsrs	r5, r5, #21
    4b88:	2d01      	cmp	r5, #1
    4b8a:	dc00      	bgt.n	4b8e <__aeabi_dsub+0x26a>
    4b8c:	e0f2      	b.n	4d74 <__aeabi_dsub+0x450>
    4b8e:	4650      	mov	r0, sl
    4b90:	1a80      	subs	r0, r0, r2
    4b92:	4582      	cmp	sl, r0
    4b94:	41bf      	sbcs	r7, r7
    4b96:	1a65      	subs	r5, r4, r1
    4b98:	427f      	negs	r7, r7
    4b9a:	1bed      	subs	r5, r5, r7
    4b9c:	4684      	mov	ip, r0
    4b9e:	0228      	lsls	r0, r5, #8
    4ba0:	d400      	bmi.n	4ba4 <__aeabi_dsub+0x280>
    4ba2:	e08c      	b.n	4cbe <__aeabi_dsub+0x39a>
    4ba4:	4650      	mov	r0, sl
    4ba6:	1a17      	subs	r7, r2, r0
    4ba8:	42ba      	cmp	r2, r7
    4baa:	4192      	sbcs	r2, r2
    4bac:	1b0c      	subs	r4, r1, r4
    4bae:	4255      	negs	r5, r2
    4bb0:	1b65      	subs	r5, r4, r5
    4bb2:	4698      	mov	r8, r3
    4bb4:	e714      	b.n	49e0 <__aeabi_dsub+0xbc>
    4bb6:	2501      	movs	r5, #1
    4bb8:	4643      	mov	r3, r8
    4bba:	2400      	movs	r4, #0
    4bbc:	401d      	ands	r5, r3
    4bbe:	2700      	movs	r7, #0
    4bc0:	e755      	b.n	4a6e <__aeabi_dsub+0x14a>
    4bc2:	4c2a      	ldr	r4, [pc, #168]	; (4c6c <__aeabi_dsub+0x348>)
    4bc4:	1af6      	subs	r6, r6, r3
    4bc6:	402c      	ands	r4, r5
    4bc8:	e732      	b.n	4a30 <__aeabi_dsub+0x10c>
    4bca:	003d      	movs	r5, r7
    4bcc:	3828      	subs	r0, #40	; 0x28
    4bce:	4085      	lsls	r5, r0
    4bd0:	2700      	movs	r7, #0
    4bd2:	e717      	b.n	4a04 <__aeabi_dsub+0xe0>
    4bd4:	0038      	movs	r0, r7
    4bd6:	f000 fa27 	bl	5028 <__clzsi2>
    4bda:	3020      	adds	r0, #32
    4bdc:	e706      	b.n	49ec <__aeabi_dsub+0xc8>
    4bde:	430a      	orrs	r2, r1
    4be0:	0017      	movs	r7, r2
    4be2:	2100      	movs	r1, #0
    4be4:	1e7a      	subs	r2, r7, #1
    4be6:	4197      	sbcs	r7, r2
    4be8:	e6ee      	b.n	49c8 <__aeabi_dsub+0xa4>
    4bea:	2b00      	cmp	r3, #0
    4bec:	d000      	beq.n	4bf0 <__aeabi_dsub+0x2cc>
    4bee:	e0e5      	b.n	4dbc <__aeabi_dsub+0x498>
    4bf0:	1c73      	adds	r3, r6, #1
    4bf2:	469c      	mov	ip, r3
    4bf4:	055b      	lsls	r3, r3, #21
    4bf6:	0d5b      	lsrs	r3, r3, #21
    4bf8:	2b01      	cmp	r3, #1
    4bfa:	dc00      	bgt.n	4bfe <__aeabi_dsub+0x2da>
    4bfc:	e09f      	b.n	4d3e <__aeabi_dsub+0x41a>
    4bfe:	4b1a      	ldr	r3, [pc, #104]	; (4c68 <__aeabi_dsub+0x344>)
    4c00:	459c      	cmp	ip, r3
    4c02:	d100      	bne.n	4c06 <__aeabi_dsub+0x2e2>
    4c04:	e0c5      	b.n	4d92 <__aeabi_dsub+0x46e>
    4c06:	4452      	add	r2, sl
    4c08:	4552      	cmp	r2, sl
    4c0a:	4180      	sbcs	r0, r0
    4c0c:	1864      	adds	r4, r4, r1
    4c0e:	4240      	negs	r0, r0
    4c10:	1824      	adds	r4, r4, r0
    4c12:	07e7      	lsls	r7, r4, #31
    4c14:	0852      	lsrs	r2, r2, #1
    4c16:	4317      	orrs	r7, r2
    4c18:	0864      	lsrs	r4, r4, #1
    4c1a:	4666      	mov	r6, ip
    4c1c:	e708      	b.n	4a30 <__aeabi_dsub+0x10c>
    4c1e:	4812      	ldr	r0, [pc, #72]	; (4c68 <__aeabi_dsub+0x344>)
    4c20:	4285      	cmp	r5, r0
    4c22:	d100      	bne.n	4c26 <__aeabi_dsub+0x302>
    4c24:	e085      	b.n	4d32 <__aeabi_dsub+0x40e>
    4c26:	001d      	movs	r5, r3
    4c28:	e6bc      	b.n	49a4 <__aeabi_dsub+0x80>
    4c2a:	0029      	movs	r1, r5
    4c2c:	3e1f      	subs	r6, #31
    4c2e:	40f1      	lsrs	r1, r6
    4c30:	2b20      	cmp	r3, #32
    4c32:	d100      	bne.n	4c36 <__aeabi_dsub+0x312>
    4c34:	e07f      	b.n	4d36 <__aeabi_dsub+0x412>
    4c36:	2240      	movs	r2, #64	; 0x40
    4c38:	1ad3      	subs	r3, r2, r3
    4c3a:	409d      	lsls	r5, r3
    4c3c:	432f      	orrs	r7, r5
    4c3e:	1e7d      	subs	r5, r7, #1
    4c40:	41af      	sbcs	r7, r5
    4c42:	2400      	movs	r4, #0
    4c44:	430f      	orrs	r7, r1
    4c46:	2600      	movs	r6, #0
    4c48:	e78e      	b.n	4b68 <__aeabi_dsub+0x244>
    4c4a:	002b      	movs	r3, r5
    4c4c:	000f      	movs	r7, r1
    4c4e:	3b20      	subs	r3, #32
    4c50:	40df      	lsrs	r7, r3
    4c52:	2d20      	cmp	r5, #32
    4c54:	d071      	beq.n	4d3a <__aeabi_dsub+0x416>
    4c56:	2340      	movs	r3, #64	; 0x40
    4c58:	1b5d      	subs	r5, r3, r5
    4c5a:	40a9      	lsls	r1, r5
    4c5c:	430a      	orrs	r2, r1
    4c5e:	1e51      	subs	r1, r2, #1
    4c60:	418a      	sbcs	r2, r1
    4c62:	2100      	movs	r1, #0
    4c64:	4317      	orrs	r7, r2
    4c66:	e6af      	b.n	49c8 <__aeabi_dsub+0xa4>
    4c68:	000007ff 	.word	0x000007ff
    4c6c:	ff7fffff 	.word	0xff7fffff
    4c70:	800fffff 	.word	0x800fffff
    4c74:	2e00      	cmp	r6, #0
    4c76:	d03e      	beq.n	4cf6 <__aeabi_dsub+0x3d2>
    4c78:	4eb3      	ldr	r6, [pc, #716]	; (4f48 <__aeabi_dsub+0x624>)
    4c7a:	45b4      	cmp	ip, r6
    4c7c:	d045      	beq.n	4d0a <__aeabi_dsub+0x3e6>
    4c7e:	2680      	movs	r6, #128	; 0x80
    4c80:	0436      	lsls	r6, r6, #16
    4c82:	426d      	negs	r5, r5
    4c84:	4334      	orrs	r4, r6
    4c86:	2d38      	cmp	r5, #56	; 0x38
    4c88:	dd00      	ble.n	4c8c <__aeabi_dsub+0x368>
    4c8a:	e0a8      	b.n	4dde <__aeabi_dsub+0x4ba>
    4c8c:	2d1f      	cmp	r5, #31
    4c8e:	dd00      	ble.n	4c92 <__aeabi_dsub+0x36e>
    4c90:	e11f      	b.n	4ed2 <__aeabi_dsub+0x5ae>
    4c92:	2620      	movs	r6, #32
    4c94:	0027      	movs	r7, r4
    4c96:	4650      	mov	r0, sl
    4c98:	1b76      	subs	r6, r6, r5
    4c9a:	40b7      	lsls	r7, r6
    4c9c:	40e8      	lsrs	r0, r5
    4c9e:	4307      	orrs	r7, r0
    4ca0:	4650      	mov	r0, sl
    4ca2:	40b0      	lsls	r0, r6
    4ca4:	1e46      	subs	r6, r0, #1
    4ca6:	41b0      	sbcs	r0, r6
    4ca8:	40ec      	lsrs	r4, r5
    4caa:	4338      	orrs	r0, r7
    4cac:	1a17      	subs	r7, r2, r0
    4cae:	42ba      	cmp	r2, r7
    4cb0:	4192      	sbcs	r2, r2
    4cb2:	1b0c      	subs	r4, r1, r4
    4cb4:	4252      	negs	r2, r2
    4cb6:	1aa4      	subs	r4, r4, r2
    4cb8:	4666      	mov	r6, ip
    4cba:	4698      	mov	r8, r3
    4cbc:	e68b      	b.n	49d6 <__aeabi_dsub+0xb2>
    4cbe:	4664      	mov	r4, ip
    4cc0:	4667      	mov	r7, ip
    4cc2:	432c      	orrs	r4, r5
    4cc4:	d000      	beq.n	4cc8 <__aeabi_dsub+0x3a4>
    4cc6:	e68b      	b.n	49e0 <__aeabi_dsub+0xbc>
    4cc8:	2500      	movs	r5, #0
    4cca:	2600      	movs	r6, #0
    4ccc:	2700      	movs	r7, #0
    4cce:	e6ea      	b.n	4aa6 <__aeabi_dsub+0x182>
    4cd0:	001e      	movs	r6, r3
    4cd2:	e6ad      	b.n	4a30 <__aeabi_dsub+0x10c>
    4cd4:	2b1f      	cmp	r3, #31
    4cd6:	dc60      	bgt.n	4d9a <__aeabi_dsub+0x476>
    4cd8:	2720      	movs	r7, #32
    4cda:	1af8      	subs	r0, r7, r3
    4cdc:	000f      	movs	r7, r1
    4cde:	4684      	mov	ip, r0
    4ce0:	4087      	lsls	r7, r0
    4ce2:	0010      	movs	r0, r2
    4ce4:	40d8      	lsrs	r0, r3
    4ce6:	4307      	orrs	r7, r0
    4ce8:	4660      	mov	r0, ip
    4cea:	4082      	lsls	r2, r0
    4cec:	1e50      	subs	r0, r2, #1
    4cee:	4182      	sbcs	r2, r0
    4cf0:	40d9      	lsrs	r1, r3
    4cf2:	4317      	orrs	r7, r2
    4cf4:	e6f5      	b.n	4ae2 <__aeabi_dsub+0x1be>
    4cf6:	0026      	movs	r6, r4
    4cf8:	4650      	mov	r0, sl
    4cfa:	4306      	orrs	r6, r0
    4cfc:	d005      	beq.n	4d0a <__aeabi_dsub+0x3e6>
    4cfe:	43ed      	mvns	r5, r5
    4d00:	2d00      	cmp	r5, #0
    4d02:	d0d3      	beq.n	4cac <__aeabi_dsub+0x388>
    4d04:	4e90      	ldr	r6, [pc, #576]	; (4f48 <__aeabi_dsub+0x624>)
    4d06:	45b4      	cmp	ip, r6
    4d08:	d1bd      	bne.n	4c86 <__aeabi_dsub+0x362>
    4d0a:	000c      	movs	r4, r1
    4d0c:	0017      	movs	r7, r2
    4d0e:	4666      	mov	r6, ip
    4d10:	4698      	mov	r8, r3
    4d12:	e68d      	b.n	4a30 <__aeabi_dsub+0x10c>
    4d14:	488c      	ldr	r0, [pc, #560]	; (4f48 <__aeabi_dsub+0x624>)
    4d16:	4283      	cmp	r3, r0
    4d18:	d00b      	beq.n	4d32 <__aeabi_dsub+0x40e>
    4d1a:	4663      	mov	r3, ip
    4d1c:	e6d9      	b.n	4ad2 <__aeabi_dsub+0x1ae>
    4d1e:	2d00      	cmp	r5, #0
    4d20:	d000      	beq.n	4d24 <__aeabi_dsub+0x400>
    4d22:	e096      	b.n	4e52 <__aeabi_dsub+0x52e>
    4d24:	0008      	movs	r0, r1
    4d26:	4310      	orrs	r0, r2
    4d28:	d100      	bne.n	4d2c <__aeabi_dsub+0x408>
    4d2a:	e0e2      	b.n	4ef2 <__aeabi_dsub+0x5ce>
    4d2c:	000c      	movs	r4, r1
    4d2e:	0017      	movs	r7, r2
    4d30:	4698      	mov	r8, r3
    4d32:	4e85      	ldr	r6, [pc, #532]	; (4f48 <__aeabi_dsub+0x624>)
    4d34:	e67c      	b.n	4a30 <__aeabi_dsub+0x10c>
    4d36:	2500      	movs	r5, #0
    4d38:	e780      	b.n	4c3c <__aeabi_dsub+0x318>
    4d3a:	2100      	movs	r1, #0
    4d3c:	e78e      	b.n	4c5c <__aeabi_dsub+0x338>
    4d3e:	0023      	movs	r3, r4
    4d40:	4650      	mov	r0, sl
    4d42:	4303      	orrs	r3, r0
    4d44:	2e00      	cmp	r6, #0
    4d46:	d000      	beq.n	4d4a <__aeabi_dsub+0x426>
    4d48:	e0a8      	b.n	4e9c <__aeabi_dsub+0x578>
    4d4a:	2b00      	cmp	r3, #0
    4d4c:	d100      	bne.n	4d50 <__aeabi_dsub+0x42c>
    4d4e:	e0de      	b.n	4f0e <__aeabi_dsub+0x5ea>
    4d50:	000b      	movs	r3, r1
    4d52:	4313      	orrs	r3, r2
    4d54:	d100      	bne.n	4d58 <__aeabi_dsub+0x434>
    4d56:	e66b      	b.n	4a30 <__aeabi_dsub+0x10c>
    4d58:	4452      	add	r2, sl
    4d5a:	4552      	cmp	r2, sl
    4d5c:	4180      	sbcs	r0, r0
    4d5e:	1864      	adds	r4, r4, r1
    4d60:	4240      	negs	r0, r0
    4d62:	1824      	adds	r4, r4, r0
    4d64:	0017      	movs	r7, r2
    4d66:	0223      	lsls	r3, r4, #8
    4d68:	d400      	bmi.n	4d6c <__aeabi_dsub+0x448>
    4d6a:	e6fd      	b.n	4b68 <__aeabi_dsub+0x244>
    4d6c:	4b77      	ldr	r3, [pc, #476]	; (4f4c <__aeabi_dsub+0x628>)
    4d6e:	4666      	mov	r6, ip
    4d70:	401c      	ands	r4, r3
    4d72:	e65d      	b.n	4a30 <__aeabi_dsub+0x10c>
    4d74:	0025      	movs	r5, r4
    4d76:	4650      	mov	r0, sl
    4d78:	4305      	orrs	r5, r0
    4d7a:	2e00      	cmp	r6, #0
    4d7c:	d1cf      	bne.n	4d1e <__aeabi_dsub+0x3fa>
    4d7e:	2d00      	cmp	r5, #0
    4d80:	d14f      	bne.n	4e22 <__aeabi_dsub+0x4fe>
    4d82:	000c      	movs	r4, r1
    4d84:	4314      	orrs	r4, r2
    4d86:	d100      	bne.n	4d8a <__aeabi_dsub+0x466>
    4d88:	e0a0      	b.n	4ecc <__aeabi_dsub+0x5a8>
    4d8a:	000c      	movs	r4, r1
    4d8c:	0017      	movs	r7, r2
    4d8e:	4698      	mov	r8, r3
    4d90:	e64e      	b.n	4a30 <__aeabi_dsub+0x10c>
    4d92:	4666      	mov	r6, ip
    4d94:	2400      	movs	r4, #0
    4d96:	2700      	movs	r7, #0
    4d98:	e685      	b.n	4aa6 <__aeabi_dsub+0x182>
    4d9a:	001f      	movs	r7, r3
    4d9c:	0008      	movs	r0, r1
    4d9e:	3f20      	subs	r7, #32
    4da0:	40f8      	lsrs	r0, r7
    4da2:	0007      	movs	r7, r0
    4da4:	2b20      	cmp	r3, #32
    4da6:	d100      	bne.n	4daa <__aeabi_dsub+0x486>
    4da8:	e08e      	b.n	4ec8 <__aeabi_dsub+0x5a4>
    4daa:	2040      	movs	r0, #64	; 0x40
    4dac:	1ac3      	subs	r3, r0, r3
    4dae:	4099      	lsls	r1, r3
    4db0:	430a      	orrs	r2, r1
    4db2:	1e51      	subs	r1, r2, #1
    4db4:	418a      	sbcs	r2, r1
    4db6:	2100      	movs	r1, #0
    4db8:	4317      	orrs	r7, r2
    4dba:	e692      	b.n	4ae2 <__aeabi_dsub+0x1be>
    4dbc:	2e00      	cmp	r6, #0
    4dbe:	d114      	bne.n	4dea <__aeabi_dsub+0x4c6>
    4dc0:	0026      	movs	r6, r4
    4dc2:	4650      	mov	r0, sl
    4dc4:	4306      	orrs	r6, r0
    4dc6:	d062      	beq.n	4e8e <__aeabi_dsub+0x56a>
    4dc8:	43db      	mvns	r3, r3
    4dca:	2b00      	cmp	r3, #0
    4dcc:	d15c      	bne.n	4e88 <__aeabi_dsub+0x564>
    4dce:	1887      	adds	r7, r0, r2
    4dd0:	4297      	cmp	r7, r2
    4dd2:	4192      	sbcs	r2, r2
    4dd4:	1864      	adds	r4, r4, r1
    4dd6:	4252      	negs	r2, r2
    4dd8:	18a4      	adds	r4, r4, r2
    4dda:	4666      	mov	r6, ip
    4ddc:	e687      	b.n	4aee <__aeabi_dsub+0x1ca>
    4dde:	4650      	mov	r0, sl
    4de0:	4320      	orrs	r0, r4
    4de2:	1e44      	subs	r4, r0, #1
    4de4:	41a0      	sbcs	r0, r4
    4de6:	2400      	movs	r4, #0
    4de8:	e760      	b.n	4cac <__aeabi_dsub+0x388>
    4dea:	4e57      	ldr	r6, [pc, #348]	; (4f48 <__aeabi_dsub+0x624>)
    4dec:	45b4      	cmp	ip, r6
    4dee:	d04e      	beq.n	4e8e <__aeabi_dsub+0x56a>
    4df0:	2680      	movs	r6, #128	; 0x80
    4df2:	0436      	lsls	r6, r6, #16
    4df4:	425b      	negs	r3, r3
    4df6:	4334      	orrs	r4, r6
    4df8:	2b38      	cmp	r3, #56	; 0x38
    4dfa:	dd00      	ble.n	4dfe <__aeabi_dsub+0x4da>
    4dfc:	e07f      	b.n	4efe <__aeabi_dsub+0x5da>
    4dfe:	2b1f      	cmp	r3, #31
    4e00:	dd00      	ble.n	4e04 <__aeabi_dsub+0x4e0>
    4e02:	e08b      	b.n	4f1c <__aeabi_dsub+0x5f8>
    4e04:	2620      	movs	r6, #32
    4e06:	0027      	movs	r7, r4
    4e08:	4650      	mov	r0, sl
    4e0a:	1af6      	subs	r6, r6, r3
    4e0c:	40b7      	lsls	r7, r6
    4e0e:	40d8      	lsrs	r0, r3
    4e10:	4307      	orrs	r7, r0
    4e12:	4650      	mov	r0, sl
    4e14:	40b0      	lsls	r0, r6
    4e16:	1e46      	subs	r6, r0, #1
    4e18:	41b0      	sbcs	r0, r6
    4e1a:	4307      	orrs	r7, r0
    4e1c:	40dc      	lsrs	r4, r3
    4e1e:	18bf      	adds	r7, r7, r2
    4e20:	e7d6      	b.n	4dd0 <__aeabi_dsub+0x4ac>
    4e22:	000d      	movs	r5, r1
    4e24:	4315      	orrs	r5, r2
    4e26:	d100      	bne.n	4e2a <__aeabi_dsub+0x506>
    4e28:	e602      	b.n	4a30 <__aeabi_dsub+0x10c>
    4e2a:	4650      	mov	r0, sl
    4e2c:	1a80      	subs	r0, r0, r2
    4e2e:	4582      	cmp	sl, r0
    4e30:	41bf      	sbcs	r7, r7
    4e32:	1a65      	subs	r5, r4, r1
    4e34:	427f      	negs	r7, r7
    4e36:	1bed      	subs	r5, r5, r7
    4e38:	4684      	mov	ip, r0
    4e3a:	0228      	lsls	r0, r5, #8
    4e3c:	d400      	bmi.n	4e40 <__aeabi_dsub+0x51c>
    4e3e:	e68d      	b.n	4b5c <__aeabi_dsub+0x238>
    4e40:	4650      	mov	r0, sl
    4e42:	1a17      	subs	r7, r2, r0
    4e44:	42ba      	cmp	r2, r7
    4e46:	4192      	sbcs	r2, r2
    4e48:	1b0c      	subs	r4, r1, r4
    4e4a:	4252      	negs	r2, r2
    4e4c:	1aa4      	subs	r4, r4, r2
    4e4e:	4698      	mov	r8, r3
    4e50:	e5ee      	b.n	4a30 <__aeabi_dsub+0x10c>
    4e52:	000d      	movs	r5, r1
    4e54:	4315      	orrs	r5, r2
    4e56:	d100      	bne.n	4e5a <__aeabi_dsub+0x536>
    4e58:	e76b      	b.n	4d32 <__aeabi_dsub+0x40e>
    4e5a:	4650      	mov	r0, sl
    4e5c:	0767      	lsls	r7, r4, #29
    4e5e:	08c0      	lsrs	r0, r0, #3
    4e60:	4307      	orrs	r7, r0
    4e62:	2080      	movs	r0, #128	; 0x80
    4e64:	08e4      	lsrs	r4, r4, #3
    4e66:	0300      	lsls	r0, r0, #12
    4e68:	4204      	tst	r4, r0
    4e6a:	d007      	beq.n	4e7c <__aeabi_dsub+0x558>
    4e6c:	08cd      	lsrs	r5, r1, #3
    4e6e:	4205      	tst	r5, r0
    4e70:	d104      	bne.n	4e7c <__aeabi_dsub+0x558>
    4e72:	002c      	movs	r4, r5
    4e74:	4698      	mov	r8, r3
    4e76:	08d7      	lsrs	r7, r2, #3
    4e78:	0749      	lsls	r1, r1, #29
    4e7a:	430f      	orrs	r7, r1
    4e7c:	0f7b      	lsrs	r3, r7, #29
    4e7e:	00e4      	lsls	r4, r4, #3
    4e80:	431c      	orrs	r4, r3
    4e82:	00ff      	lsls	r7, r7, #3
    4e84:	4e30      	ldr	r6, [pc, #192]	; (4f48 <__aeabi_dsub+0x624>)
    4e86:	e5d3      	b.n	4a30 <__aeabi_dsub+0x10c>
    4e88:	4e2f      	ldr	r6, [pc, #188]	; (4f48 <__aeabi_dsub+0x624>)
    4e8a:	45b4      	cmp	ip, r6
    4e8c:	d1b4      	bne.n	4df8 <__aeabi_dsub+0x4d4>
    4e8e:	000c      	movs	r4, r1
    4e90:	0017      	movs	r7, r2
    4e92:	4666      	mov	r6, ip
    4e94:	e5cc      	b.n	4a30 <__aeabi_dsub+0x10c>
    4e96:	2700      	movs	r7, #0
    4e98:	2400      	movs	r4, #0
    4e9a:	e5e8      	b.n	4a6e <__aeabi_dsub+0x14a>
    4e9c:	2b00      	cmp	r3, #0
    4e9e:	d039      	beq.n	4f14 <__aeabi_dsub+0x5f0>
    4ea0:	000b      	movs	r3, r1
    4ea2:	4313      	orrs	r3, r2
    4ea4:	d100      	bne.n	4ea8 <__aeabi_dsub+0x584>
    4ea6:	e744      	b.n	4d32 <__aeabi_dsub+0x40e>
    4ea8:	08c0      	lsrs	r0, r0, #3
    4eaa:	0767      	lsls	r7, r4, #29
    4eac:	4307      	orrs	r7, r0
    4eae:	2080      	movs	r0, #128	; 0x80
    4eb0:	08e4      	lsrs	r4, r4, #3
    4eb2:	0300      	lsls	r0, r0, #12
    4eb4:	4204      	tst	r4, r0
    4eb6:	d0e1      	beq.n	4e7c <__aeabi_dsub+0x558>
    4eb8:	08cb      	lsrs	r3, r1, #3
    4eba:	4203      	tst	r3, r0
    4ebc:	d1de      	bne.n	4e7c <__aeabi_dsub+0x558>
    4ebe:	08d7      	lsrs	r7, r2, #3
    4ec0:	0749      	lsls	r1, r1, #29
    4ec2:	430f      	orrs	r7, r1
    4ec4:	001c      	movs	r4, r3
    4ec6:	e7d9      	b.n	4e7c <__aeabi_dsub+0x558>
    4ec8:	2100      	movs	r1, #0
    4eca:	e771      	b.n	4db0 <__aeabi_dsub+0x48c>
    4ecc:	2500      	movs	r5, #0
    4ece:	2700      	movs	r7, #0
    4ed0:	e5e9      	b.n	4aa6 <__aeabi_dsub+0x182>
    4ed2:	002e      	movs	r6, r5
    4ed4:	0027      	movs	r7, r4
    4ed6:	3e20      	subs	r6, #32
    4ed8:	40f7      	lsrs	r7, r6
    4eda:	2d20      	cmp	r5, #32
    4edc:	d02f      	beq.n	4f3e <__aeabi_dsub+0x61a>
    4ede:	2640      	movs	r6, #64	; 0x40
    4ee0:	1b75      	subs	r5, r6, r5
    4ee2:	40ac      	lsls	r4, r5
    4ee4:	4650      	mov	r0, sl
    4ee6:	4320      	orrs	r0, r4
    4ee8:	1e44      	subs	r4, r0, #1
    4eea:	41a0      	sbcs	r0, r4
    4eec:	2400      	movs	r4, #0
    4eee:	4338      	orrs	r0, r7
    4ef0:	e6dc      	b.n	4cac <__aeabi_dsub+0x388>
    4ef2:	2480      	movs	r4, #128	; 0x80
    4ef4:	2500      	movs	r5, #0
    4ef6:	0324      	lsls	r4, r4, #12
    4ef8:	4e13      	ldr	r6, [pc, #76]	; (4f48 <__aeabi_dsub+0x624>)
    4efa:	2700      	movs	r7, #0
    4efc:	e5d3      	b.n	4aa6 <__aeabi_dsub+0x182>
    4efe:	4650      	mov	r0, sl
    4f00:	4320      	orrs	r0, r4
    4f02:	0007      	movs	r7, r0
    4f04:	1e78      	subs	r0, r7, #1
    4f06:	4187      	sbcs	r7, r0
    4f08:	2400      	movs	r4, #0
    4f0a:	18bf      	adds	r7, r7, r2
    4f0c:	e760      	b.n	4dd0 <__aeabi_dsub+0x4ac>
    4f0e:	000c      	movs	r4, r1
    4f10:	0017      	movs	r7, r2
    4f12:	e58d      	b.n	4a30 <__aeabi_dsub+0x10c>
    4f14:	000c      	movs	r4, r1
    4f16:	0017      	movs	r7, r2
    4f18:	4e0b      	ldr	r6, [pc, #44]	; (4f48 <__aeabi_dsub+0x624>)
    4f1a:	e589      	b.n	4a30 <__aeabi_dsub+0x10c>
    4f1c:	001e      	movs	r6, r3
    4f1e:	0027      	movs	r7, r4
    4f20:	3e20      	subs	r6, #32
    4f22:	40f7      	lsrs	r7, r6
    4f24:	2b20      	cmp	r3, #32
    4f26:	d00c      	beq.n	4f42 <__aeabi_dsub+0x61e>
    4f28:	2640      	movs	r6, #64	; 0x40
    4f2a:	1af3      	subs	r3, r6, r3
    4f2c:	409c      	lsls	r4, r3
    4f2e:	4650      	mov	r0, sl
    4f30:	4320      	orrs	r0, r4
    4f32:	1e44      	subs	r4, r0, #1
    4f34:	41a0      	sbcs	r0, r4
    4f36:	4307      	orrs	r7, r0
    4f38:	2400      	movs	r4, #0
    4f3a:	18bf      	adds	r7, r7, r2
    4f3c:	e748      	b.n	4dd0 <__aeabi_dsub+0x4ac>
    4f3e:	2400      	movs	r4, #0
    4f40:	e7d0      	b.n	4ee4 <__aeabi_dsub+0x5c0>
    4f42:	2400      	movs	r4, #0
    4f44:	e7f3      	b.n	4f2e <__aeabi_dsub+0x60a>
    4f46:	46c0      	nop			; (mov r8, r8)
    4f48:	000007ff 	.word	0x000007ff
    4f4c:	ff7fffff 	.word	0xff7fffff

00004f50 <__aeabi_d2iz>:
    4f50:	b530      	push	{r4, r5, lr}
    4f52:	4d13      	ldr	r5, [pc, #76]	; (4fa0 <__aeabi_d2iz+0x50>)
    4f54:	030a      	lsls	r2, r1, #12
    4f56:	004b      	lsls	r3, r1, #1
    4f58:	0b12      	lsrs	r2, r2, #12
    4f5a:	0d5b      	lsrs	r3, r3, #21
    4f5c:	0fc9      	lsrs	r1, r1, #31
    4f5e:	2400      	movs	r4, #0
    4f60:	42ab      	cmp	r3, r5
    4f62:	dd10      	ble.n	4f86 <__aeabi_d2iz+0x36>
    4f64:	4c0f      	ldr	r4, [pc, #60]	; (4fa4 <__aeabi_d2iz+0x54>)
    4f66:	42a3      	cmp	r3, r4
    4f68:	dc0f      	bgt.n	4f8a <__aeabi_d2iz+0x3a>
    4f6a:	2480      	movs	r4, #128	; 0x80
    4f6c:	4d0e      	ldr	r5, [pc, #56]	; (4fa8 <__aeabi_d2iz+0x58>)
    4f6e:	0364      	lsls	r4, r4, #13
    4f70:	4322      	orrs	r2, r4
    4f72:	1aed      	subs	r5, r5, r3
    4f74:	2d1f      	cmp	r5, #31
    4f76:	dd0b      	ble.n	4f90 <__aeabi_d2iz+0x40>
    4f78:	480c      	ldr	r0, [pc, #48]	; (4fac <__aeabi_d2iz+0x5c>)
    4f7a:	1ac3      	subs	r3, r0, r3
    4f7c:	40da      	lsrs	r2, r3
    4f7e:	4254      	negs	r4, r2
    4f80:	2900      	cmp	r1, #0
    4f82:	d100      	bne.n	4f86 <__aeabi_d2iz+0x36>
    4f84:	0014      	movs	r4, r2
    4f86:	0020      	movs	r0, r4
    4f88:	bd30      	pop	{r4, r5, pc}
    4f8a:	4b09      	ldr	r3, [pc, #36]	; (4fb0 <__aeabi_d2iz+0x60>)
    4f8c:	18cc      	adds	r4, r1, r3
    4f8e:	e7fa      	b.n	4f86 <__aeabi_d2iz+0x36>
    4f90:	4c08      	ldr	r4, [pc, #32]	; (4fb4 <__aeabi_d2iz+0x64>)
    4f92:	40e8      	lsrs	r0, r5
    4f94:	46a4      	mov	ip, r4
    4f96:	4463      	add	r3, ip
    4f98:	409a      	lsls	r2, r3
    4f9a:	4302      	orrs	r2, r0
    4f9c:	e7ef      	b.n	4f7e <__aeabi_d2iz+0x2e>
    4f9e:	46c0      	nop			; (mov r8, r8)
    4fa0:	000003fe 	.word	0x000003fe
    4fa4:	0000041d 	.word	0x0000041d
    4fa8:	00000433 	.word	0x00000433
    4fac:	00000413 	.word	0x00000413
    4fb0:	7fffffff 	.word	0x7fffffff
    4fb4:	fffffbed 	.word	0xfffffbed

00004fb8 <__aeabi_ui2d>:
    4fb8:	b510      	push	{r4, lr}
    4fba:	1e04      	subs	r4, r0, #0
    4fbc:	d028      	beq.n	5010 <__aeabi_ui2d+0x58>
    4fbe:	f000 f833 	bl	5028 <__clzsi2>
    4fc2:	4b15      	ldr	r3, [pc, #84]	; (5018 <__aeabi_ui2d+0x60>)
    4fc4:	4a15      	ldr	r2, [pc, #84]	; (501c <__aeabi_ui2d+0x64>)
    4fc6:	1a1b      	subs	r3, r3, r0
    4fc8:	1ad2      	subs	r2, r2, r3
    4fca:	2a1f      	cmp	r2, #31
    4fcc:	dd15      	ble.n	4ffa <__aeabi_ui2d+0x42>
    4fce:	4a14      	ldr	r2, [pc, #80]	; (5020 <__aeabi_ui2d+0x68>)
    4fd0:	1ad2      	subs	r2, r2, r3
    4fd2:	4094      	lsls	r4, r2
    4fd4:	2200      	movs	r2, #0
    4fd6:	0324      	lsls	r4, r4, #12
    4fd8:	055b      	lsls	r3, r3, #21
    4fda:	0b24      	lsrs	r4, r4, #12
    4fdc:	0d5b      	lsrs	r3, r3, #21
    4fde:	2100      	movs	r1, #0
    4fe0:	0010      	movs	r0, r2
    4fe2:	0324      	lsls	r4, r4, #12
    4fe4:	0d0a      	lsrs	r2, r1, #20
    4fe6:	0b24      	lsrs	r4, r4, #12
    4fe8:	0512      	lsls	r2, r2, #20
    4fea:	4322      	orrs	r2, r4
    4fec:	4c0d      	ldr	r4, [pc, #52]	; (5024 <__aeabi_ui2d+0x6c>)
    4fee:	051b      	lsls	r3, r3, #20
    4ff0:	4022      	ands	r2, r4
    4ff2:	4313      	orrs	r3, r2
    4ff4:	005b      	lsls	r3, r3, #1
    4ff6:	0859      	lsrs	r1, r3, #1
    4ff8:	bd10      	pop	{r4, pc}
    4ffa:	0021      	movs	r1, r4
    4ffc:	4091      	lsls	r1, r2
    4ffe:	000a      	movs	r2, r1
    5000:	210b      	movs	r1, #11
    5002:	1a08      	subs	r0, r1, r0
    5004:	40c4      	lsrs	r4, r0
    5006:	055b      	lsls	r3, r3, #21
    5008:	0324      	lsls	r4, r4, #12
    500a:	0b24      	lsrs	r4, r4, #12
    500c:	0d5b      	lsrs	r3, r3, #21
    500e:	e7e6      	b.n	4fde <__aeabi_ui2d+0x26>
    5010:	2300      	movs	r3, #0
    5012:	2400      	movs	r4, #0
    5014:	2200      	movs	r2, #0
    5016:	e7e2      	b.n	4fde <__aeabi_ui2d+0x26>
    5018:	0000041e 	.word	0x0000041e
    501c:	00000433 	.word	0x00000433
    5020:	00000413 	.word	0x00000413
    5024:	800fffff 	.word	0x800fffff

00005028 <__clzsi2>:
    5028:	211c      	movs	r1, #28
    502a:	2301      	movs	r3, #1
    502c:	041b      	lsls	r3, r3, #16
    502e:	4298      	cmp	r0, r3
    5030:	d301      	bcc.n	5036 <__clzsi2+0xe>
    5032:	0c00      	lsrs	r0, r0, #16
    5034:	3910      	subs	r1, #16
    5036:	0a1b      	lsrs	r3, r3, #8
    5038:	4298      	cmp	r0, r3
    503a:	d301      	bcc.n	5040 <__clzsi2+0x18>
    503c:	0a00      	lsrs	r0, r0, #8
    503e:	3908      	subs	r1, #8
    5040:	091b      	lsrs	r3, r3, #4
    5042:	4298      	cmp	r0, r3
    5044:	d301      	bcc.n	504a <__clzsi2+0x22>
    5046:	0900      	lsrs	r0, r0, #4
    5048:	3904      	subs	r1, #4
    504a:	a202      	add	r2, pc, #8	; (adr r2, 5054 <__clzsi2+0x2c>)
    504c:	5c10      	ldrb	r0, [r2, r0]
    504e:	1840      	adds	r0, r0, r1
    5050:	4770      	bx	lr
    5052:	46c0      	nop			; (mov r8, r8)
    5054:	02020304 	.word	0x02020304
    5058:	01010101 	.word	0x01010101
	...

00005064 <__libc_init_array>:
    5064:	b570      	push	{r4, r5, r6, lr}
    5066:	2600      	movs	r6, #0
    5068:	4d0c      	ldr	r5, [pc, #48]	; (509c <__libc_init_array+0x38>)
    506a:	4c0d      	ldr	r4, [pc, #52]	; (50a0 <__libc_init_array+0x3c>)
    506c:	1b64      	subs	r4, r4, r5
    506e:	10a4      	asrs	r4, r4, #2
    5070:	42a6      	cmp	r6, r4
    5072:	d109      	bne.n	5088 <__libc_init_array+0x24>
    5074:	2600      	movs	r6, #0
    5076:	f000 fdbf 	bl	5bf8 <_init>
    507a:	4d0a      	ldr	r5, [pc, #40]	; (50a4 <__libc_init_array+0x40>)
    507c:	4c0a      	ldr	r4, [pc, #40]	; (50a8 <__libc_init_array+0x44>)
    507e:	1b64      	subs	r4, r4, r5
    5080:	10a4      	asrs	r4, r4, #2
    5082:	42a6      	cmp	r6, r4
    5084:	d105      	bne.n	5092 <__libc_init_array+0x2e>
    5086:	bd70      	pop	{r4, r5, r6, pc}
    5088:	00b3      	lsls	r3, r6, #2
    508a:	58eb      	ldr	r3, [r5, r3]
    508c:	4798      	blx	r3
    508e:	3601      	adds	r6, #1
    5090:	e7ee      	b.n	5070 <__libc_init_array+0xc>
    5092:	00b3      	lsls	r3, r6, #2
    5094:	58eb      	ldr	r3, [r5, r3]
    5096:	4798      	blx	r3
    5098:	3601      	adds	r6, #1
    509a:	e7f2      	b.n	5082 <__libc_init_array+0x1e>
    509c:	00005c04 	.word	0x00005c04
    50a0:	00005c04 	.word	0x00005c04
    50a4:	00005c04 	.word	0x00005c04
    50a8:	00005c08 	.word	0x00005c08

000050ac <memcpy>:
    50ac:	2300      	movs	r3, #0
    50ae:	b510      	push	{r4, lr}
    50b0:	429a      	cmp	r2, r3
    50b2:	d100      	bne.n	50b6 <memcpy+0xa>
    50b4:	bd10      	pop	{r4, pc}
    50b6:	5ccc      	ldrb	r4, [r1, r3]
    50b8:	54c4      	strb	r4, [r0, r3]
    50ba:	3301      	adds	r3, #1
    50bc:	e7f8      	b.n	50b0 <memcpy+0x4>
	...

000050c0 <siprintf>:
    50c0:	b40e      	push	{r1, r2, r3}
    50c2:	b510      	push	{r4, lr}
    50c4:	b09d      	sub	sp, #116	; 0x74
    50c6:	a902      	add	r1, sp, #8
    50c8:	9002      	str	r0, [sp, #8]
    50ca:	6108      	str	r0, [r1, #16]
    50cc:	480b      	ldr	r0, [pc, #44]	; (50fc <siprintf+0x3c>)
    50ce:	2482      	movs	r4, #130	; 0x82
    50d0:	6088      	str	r0, [r1, #8]
    50d2:	6148      	str	r0, [r1, #20]
    50d4:	2001      	movs	r0, #1
    50d6:	4240      	negs	r0, r0
    50d8:	ab1f      	add	r3, sp, #124	; 0x7c
    50da:	81c8      	strh	r0, [r1, #14]
    50dc:	4808      	ldr	r0, [pc, #32]	; (5100 <siprintf+0x40>)
    50de:	cb04      	ldmia	r3!, {r2}
    50e0:	00a4      	lsls	r4, r4, #2
    50e2:	6800      	ldr	r0, [r0, #0]
    50e4:	9301      	str	r3, [sp, #4]
    50e6:	818c      	strh	r4, [r1, #12]
    50e8:	f000 f8d6 	bl	5298 <_svfiprintf_r>
    50ec:	2300      	movs	r3, #0
    50ee:	9a02      	ldr	r2, [sp, #8]
    50f0:	7013      	strb	r3, [r2, #0]
    50f2:	b01d      	add	sp, #116	; 0x74
    50f4:	bc10      	pop	{r4}
    50f6:	bc08      	pop	{r3}
    50f8:	b003      	add	sp, #12
    50fa:	4718      	bx	r3
    50fc:	7fffffff 	.word	0x7fffffff
    5100:	20000018 	.word	0x20000018

00005104 <strcmp>:
    5104:	7802      	ldrb	r2, [r0, #0]
    5106:	780b      	ldrb	r3, [r1, #0]
    5108:	2a00      	cmp	r2, #0
    510a:	d003      	beq.n	5114 <strcmp+0x10>
    510c:	3001      	adds	r0, #1
    510e:	3101      	adds	r1, #1
    5110:	429a      	cmp	r2, r3
    5112:	d0f7      	beq.n	5104 <strcmp>
    5114:	1ad0      	subs	r0, r2, r3
    5116:	4770      	bx	lr

00005118 <_malloc_r>:
    5118:	2303      	movs	r3, #3
    511a:	b570      	push	{r4, r5, r6, lr}
    511c:	1ccd      	adds	r5, r1, #3
    511e:	439d      	bics	r5, r3
    5120:	3508      	adds	r5, #8
    5122:	0006      	movs	r6, r0
    5124:	2d0c      	cmp	r5, #12
    5126:	d21e      	bcs.n	5166 <_malloc_r+0x4e>
    5128:	250c      	movs	r5, #12
    512a:	42a9      	cmp	r1, r5
    512c:	d81d      	bhi.n	516a <_malloc_r+0x52>
    512e:	0030      	movs	r0, r6
    5130:	f000 fb6d 	bl	580e <__malloc_lock>
    5134:	4a25      	ldr	r2, [pc, #148]	; (51cc <_malloc_r+0xb4>)
    5136:	6814      	ldr	r4, [r2, #0]
    5138:	0021      	movs	r1, r4
    513a:	2900      	cmp	r1, #0
    513c:	d119      	bne.n	5172 <_malloc_r+0x5a>
    513e:	4c24      	ldr	r4, [pc, #144]	; (51d0 <_malloc_r+0xb8>)
    5140:	6823      	ldr	r3, [r4, #0]
    5142:	2b00      	cmp	r3, #0
    5144:	d103      	bne.n	514e <_malloc_r+0x36>
    5146:	0030      	movs	r0, r6
    5148:	f000 fb32 	bl	57b0 <_sbrk_r>
    514c:	6020      	str	r0, [r4, #0]
    514e:	0029      	movs	r1, r5
    5150:	0030      	movs	r0, r6
    5152:	f000 fb2d 	bl	57b0 <_sbrk_r>
    5156:	1c43      	adds	r3, r0, #1
    5158:	d12c      	bne.n	51b4 <_malloc_r+0x9c>
    515a:	230c      	movs	r3, #12
    515c:	0030      	movs	r0, r6
    515e:	6033      	str	r3, [r6, #0]
    5160:	f000 fb56 	bl	5810 <__malloc_unlock>
    5164:	e003      	b.n	516e <_malloc_r+0x56>
    5166:	2d00      	cmp	r5, #0
    5168:	dadf      	bge.n	512a <_malloc_r+0x12>
    516a:	230c      	movs	r3, #12
    516c:	6033      	str	r3, [r6, #0]
    516e:	2000      	movs	r0, #0
    5170:	bd70      	pop	{r4, r5, r6, pc}
    5172:	680b      	ldr	r3, [r1, #0]
    5174:	1b5b      	subs	r3, r3, r5
    5176:	d41a      	bmi.n	51ae <_malloc_r+0x96>
    5178:	2b0b      	cmp	r3, #11
    517a:	d903      	bls.n	5184 <_malloc_r+0x6c>
    517c:	600b      	str	r3, [r1, #0]
    517e:	18cc      	adds	r4, r1, r3
    5180:	6025      	str	r5, [r4, #0]
    5182:	e003      	b.n	518c <_malloc_r+0x74>
    5184:	428c      	cmp	r4, r1
    5186:	d10e      	bne.n	51a6 <_malloc_r+0x8e>
    5188:	6863      	ldr	r3, [r4, #4]
    518a:	6013      	str	r3, [r2, #0]
    518c:	0030      	movs	r0, r6
    518e:	f000 fb3f 	bl	5810 <__malloc_unlock>
    5192:	0020      	movs	r0, r4
    5194:	2207      	movs	r2, #7
    5196:	300b      	adds	r0, #11
    5198:	1d23      	adds	r3, r4, #4
    519a:	4390      	bics	r0, r2
    519c:	1ac3      	subs	r3, r0, r3
    519e:	d0e7      	beq.n	5170 <_malloc_r+0x58>
    51a0:	425a      	negs	r2, r3
    51a2:	50e2      	str	r2, [r4, r3]
    51a4:	e7e4      	b.n	5170 <_malloc_r+0x58>
    51a6:	684b      	ldr	r3, [r1, #4]
    51a8:	6063      	str	r3, [r4, #4]
    51aa:	000c      	movs	r4, r1
    51ac:	e7ee      	b.n	518c <_malloc_r+0x74>
    51ae:	000c      	movs	r4, r1
    51b0:	6849      	ldr	r1, [r1, #4]
    51b2:	e7c2      	b.n	513a <_malloc_r+0x22>
    51b4:	2303      	movs	r3, #3
    51b6:	1cc4      	adds	r4, r0, #3
    51b8:	439c      	bics	r4, r3
    51ba:	42a0      	cmp	r0, r4
    51bc:	d0e0      	beq.n	5180 <_malloc_r+0x68>
    51be:	1a21      	subs	r1, r4, r0
    51c0:	0030      	movs	r0, r6
    51c2:	f000 faf5 	bl	57b0 <_sbrk_r>
    51c6:	1c43      	adds	r3, r0, #1
    51c8:	d1da      	bne.n	5180 <_malloc_r+0x68>
    51ca:	e7c6      	b.n	515a <_malloc_r+0x42>
    51cc:	200000dc 	.word	0x200000dc
    51d0:	200000e0 	.word	0x200000e0

000051d4 <__ssputs_r>:
    51d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    51d6:	688e      	ldr	r6, [r1, #8]
    51d8:	b085      	sub	sp, #20
    51da:	0007      	movs	r7, r0
    51dc:	000c      	movs	r4, r1
    51de:	9203      	str	r2, [sp, #12]
    51e0:	9301      	str	r3, [sp, #4]
    51e2:	429e      	cmp	r6, r3
    51e4:	d839      	bhi.n	525a <__ssputs_r+0x86>
    51e6:	2390      	movs	r3, #144	; 0x90
    51e8:	898a      	ldrh	r2, [r1, #12]
    51ea:	00db      	lsls	r3, r3, #3
    51ec:	421a      	tst	r2, r3
    51ee:	d034      	beq.n	525a <__ssputs_r+0x86>
    51f0:	2503      	movs	r5, #3
    51f2:	6909      	ldr	r1, [r1, #16]
    51f4:	6823      	ldr	r3, [r4, #0]
    51f6:	1a5b      	subs	r3, r3, r1
    51f8:	9302      	str	r3, [sp, #8]
    51fa:	6963      	ldr	r3, [r4, #20]
    51fc:	9802      	ldr	r0, [sp, #8]
    51fe:	435d      	muls	r5, r3
    5200:	0feb      	lsrs	r3, r5, #31
    5202:	195d      	adds	r5, r3, r5
    5204:	9b01      	ldr	r3, [sp, #4]
    5206:	106d      	asrs	r5, r5, #1
    5208:	3301      	adds	r3, #1
    520a:	181b      	adds	r3, r3, r0
    520c:	42ab      	cmp	r3, r5
    520e:	d900      	bls.n	5212 <__ssputs_r+0x3e>
    5210:	001d      	movs	r5, r3
    5212:	0553      	lsls	r3, r2, #21
    5214:	d532      	bpl.n	527c <__ssputs_r+0xa8>
    5216:	0029      	movs	r1, r5
    5218:	0038      	movs	r0, r7
    521a:	f7ff ff7d 	bl	5118 <_malloc_r>
    521e:	1e06      	subs	r6, r0, #0
    5220:	d109      	bne.n	5236 <__ssputs_r+0x62>
    5222:	230c      	movs	r3, #12
    5224:	603b      	str	r3, [r7, #0]
    5226:	2340      	movs	r3, #64	; 0x40
    5228:	2001      	movs	r0, #1
    522a:	89a2      	ldrh	r2, [r4, #12]
    522c:	4240      	negs	r0, r0
    522e:	4313      	orrs	r3, r2
    5230:	81a3      	strh	r3, [r4, #12]
    5232:	b005      	add	sp, #20
    5234:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5236:	9a02      	ldr	r2, [sp, #8]
    5238:	6921      	ldr	r1, [r4, #16]
    523a:	f7ff ff37 	bl	50ac <memcpy>
    523e:	89a3      	ldrh	r3, [r4, #12]
    5240:	4a14      	ldr	r2, [pc, #80]	; (5294 <__ssputs_r+0xc0>)
    5242:	401a      	ands	r2, r3
    5244:	2380      	movs	r3, #128	; 0x80
    5246:	4313      	orrs	r3, r2
    5248:	81a3      	strh	r3, [r4, #12]
    524a:	9b02      	ldr	r3, [sp, #8]
    524c:	6126      	str	r6, [r4, #16]
    524e:	18f6      	adds	r6, r6, r3
    5250:	6026      	str	r6, [r4, #0]
    5252:	6165      	str	r5, [r4, #20]
    5254:	9e01      	ldr	r6, [sp, #4]
    5256:	1aed      	subs	r5, r5, r3
    5258:	60a5      	str	r5, [r4, #8]
    525a:	9b01      	ldr	r3, [sp, #4]
    525c:	42b3      	cmp	r3, r6
    525e:	d200      	bcs.n	5262 <__ssputs_r+0x8e>
    5260:	001e      	movs	r6, r3
    5262:	0032      	movs	r2, r6
    5264:	9903      	ldr	r1, [sp, #12]
    5266:	6820      	ldr	r0, [r4, #0]
    5268:	f000 fabf 	bl	57ea <memmove>
    526c:	68a3      	ldr	r3, [r4, #8]
    526e:	2000      	movs	r0, #0
    5270:	1b9b      	subs	r3, r3, r6
    5272:	60a3      	str	r3, [r4, #8]
    5274:	6823      	ldr	r3, [r4, #0]
    5276:	199e      	adds	r6, r3, r6
    5278:	6026      	str	r6, [r4, #0]
    527a:	e7da      	b.n	5232 <__ssputs_r+0x5e>
    527c:	002a      	movs	r2, r5
    527e:	0038      	movs	r0, r7
    5280:	f000 fb12 	bl	58a8 <_realloc_r>
    5284:	1e06      	subs	r6, r0, #0
    5286:	d1e0      	bne.n	524a <__ssputs_r+0x76>
    5288:	6921      	ldr	r1, [r4, #16]
    528a:	0038      	movs	r0, r7
    528c:	f000 fac2 	bl	5814 <_free_r>
    5290:	e7c7      	b.n	5222 <__ssputs_r+0x4e>
    5292:	46c0      	nop			; (mov r8, r8)
    5294:	fffffb7f 	.word	0xfffffb7f

00005298 <_svfiprintf_r>:
    5298:	b5f0      	push	{r4, r5, r6, r7, lr}
    529a:	b09f      	sub	sp, #124	; 0x7c
    529c:	9002      	str	r0, [sp, #8]
    529e:	9305      	str	r3, [sp, #20]
    52a0:	898b      	ldrh	r3, [r1, #12]
    52a2:	000f      	movs	r7, r1
    52a4:	0016      	movs	r6, r2
    52a6:	061b      	lsls	r3, r3, #24
    52a8:	d511      	bpl.n	52ce <_svfiprintf_r+0x36>
    52aa:	690b      	ldr	r3, [r1, #16]
    52ac:	2b00      	cmp	r3, #0
    52ae:	d10e      	bne.n	52ce <_svfiprintf_r+0x36>
    52b0:	2140      	movs	r1, #64	; 0x40
    52b2:	f7ff ff31 	bl	5118 <_malloc_r>
    52b6:	6038      	str	r0, [r7, #0]
    52b8:	6138      	str	r0, [r7, #16]
    52ba:	2800      	cmp	r0, #0
    52bc:	d105      	bne.n	52ca <_svfiprintf_r+0x32>
    52be:	230c      	movs	r3, #12
    52c0:	9a02      	ldr	r2, [sp, #8]
    52c2:	3801      	subs	r0, #1
    52c4:	6013      	str	r3, [r2, #0]
    52c6:	b01f      	add	sp, #124	; 0x7c
    52c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    52ca:	2340      	movs	r3, #64	; 0x40
    52cc:	617b      	str	r3, [r7, #20]
    52ce:	2300      	movs	r3, #0
    52d0:	ad06      	add	r5, sp, #24
    52d2:	616b      	str	r3, [r5, #20]
    52d4:	3320      	adds	r3, #32
    52d6:	766b      	strb	r3, [r5, #25]
    52d8:	3310      	adds	r3, #16
    52da:	76ab      	strb	r3, [r5, #26]
    52dc:	0034      	movs	r4, r6
    52de:	7823      	ldrb	r3, [r4, #0]
    52e0:	2b00      	cmp	r3, #0
    52e2:	d147      	bne.n	5374 <_svfiprintf_r+0xdc>
    52e4:	1ba3      	subs	r3, r4, r6
    52e6:	9304      	str	r3, [sp, #16]
    52e8:	d00d      	beq.n	5306 <_svfiprintf_r+0x6e>
    52ea:	1ba3      	subs	r3, r4, r6
    52ec:	0032      	movs	r2, r6
    52ee:	0039      	movs	r1, r7
    52f0:	9802      	ldr	r0, [sp, #8]
    52f2:	f7ff ff6f 	bl	51d4 <__ssputs_r>
    52f6:	1c43      	adds	r3, r0, #1
    52f8:	d100      	bne.n	52fc <_svfiprintf_r+0x64>
    52fa:	e0b5      	b.n	5468 <_svfiprintf_r+0x1d0>
    52fc:	696a      	ldr	r2, [r5, #20]
    52fe:	9b04      	ldr	r3, [sp, #16]
    5300:	4694      	mov	ip, r2
    5302:	4463      	add	r3, ip
    5304:	616b      	str	r3, [r5, #20]
    5306:	7823      	ldrb	r3, [r4, #0]
    5308:	2b00      	cmp	r3, #0
    530a:	d100      	bne.n	530e <_svfiprintf_r+0x76>
    530c:	e0ac      	b.n	5468 <_svfiprintf_r+0x1d0>
    530e:	2201      	movs	r2, #1
    5310:	2300      	movs	r3, #0
    5312:	4252      	negs	r2, r2
    5314:	606a      	str	r2, [r5, #4]
    5316:	a902      	add	r1, sp, #8
    5318:	3254      	adds	r2, #84	; 0x54
    531a:	1852      	adds	r2, r2, r1
    531c:	3401      	adds	r4, #1
    531e:	602b      	str	r3, [r5, #0]
    5320:	60eb      	str	r3, [r5, #12]
    5322:	60ab      	str	r3, [r5, #8]
    5324:	7013      	strb	r3, [r2, #0]
    5326:	65ab      	str	r3, [r5, #88]	; 0x58
    5328:	4e58      	ldr	r6, [pc, #352]	; (548c <_svfiprintf_r+0x1f4>)
    532a:	2205      	movs	r2, #5
    532c:	7821      	ldrb	r1, [r4, #0]
    532e:	0030      	movs	r0, r6
    5330:	f000 fa50 	bl	57d4 <memchr>
    5334:	1c62      	adds	r2, r4, #1
    5336:	2800      	cmp	r0, #0
    5338:	d120      	bne.n	537c <_svfiprintf_r+0xe4>
    533a:	6829      	ldr	r1, [r5, #0]
    533c:	06cb      	lsls	r3, r1, #27
    533e:	d504      	bpl.n	534a <_svfiprintf_r+0xb2>
    5340:	2353      	movs	r3, #83	; 0x53
    5342:	ae02      	add	r6, sp, #8
    5344:	3020      	adds	r0, #32
    5346:	199b      	adds	r3, r3, r6
    5348:	7018      	strb	r0, [r3, #0]
    534a:	070b      	lsls	r3, r1, #28
    534c:	d504      	bpl.n	5358 <_svfiprintf_r+0xc0>
    534e:	2353      	movs	r3, #83	; 0x53
    5350:	202b      	movs	r0, #43	; 0x2b
    5352:	ae02      	add	r6, sp, #8
    5354:	199b      	adds	r3, r3, r6
    5356:	7018      	strb	r0, [r3, #0]
    5358:	7823      	ldrb	r3, [r4, #0]
    535a:	2b2a      	cmp	r3, #42	; 0x2a
    535c:	d016      	beq.n	538c <_svfiprintf_r+0xf4>
    535e:	2000      	movs	r0, #0
    5360:	210a      	movs	r1, #10
    5362:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5364:	7822      	ldrb	r2, [r4, #0]
    5366:	3a30      	subs	r2, #48	; 0x30
    5368:	2a09      	cmp	r2, #9
    536a:	d955      	bls.n	5418 <_svfiprintf_r+0x180>
    536c:	2800      	cmp	r0, #0
    536e:	d015      	beq.n	539c <_svfiprintf_r+0x104>
    5370:	9309      	str	r3, [sp, #36]	; 0x24
    5372:	e013      	b.n	539c <_svfiprintf_r+0x104>
    5374:	2b25      	cmp	r3, #37	; 0x25
    5376:	d0b5      	beq.n	52e4 <_svfiprintf_r+0x4c>
    5378:	3401      	adds	r4, #1
    537a:	e7b0      	b.n	52de <_svfiprintf_r+0x46>
    537c:	2301      	movs	r3, #1
    537e:	1b80      	subs	r0, r0, r6
    5380:	4083      	lsls	r3, r0
    5382:	6829      	ldr	r1, [r5, #0]
    5384:	0014      	movs	r4, r2
    5386:	430b      	orrs	r3, r1
    5388:	602b      	str	r3, [r5, #0]
    538a:	e7cd      	b.n	5328 <_svfiprintf_r+0x90>
    538c:	9b05      	ldr	r3, [sp, #20]
    538e:	1d18      	adds	r0, r3, #4
    5390:	681b      	ldr	r3, [r3, #0]
    5392:	9005      	str	r0, [sp, #20]
    5394:	2b00      	cmp	r3, #0
    5396:	db39      	blt.n	540c <_svfiprintf_r+0x174>
    5398:	9309      	str	r3, [sp, #36]	; 0x24
    539a:	0014      	movs	r4, r2
    539c:	7823      	ldrb	r3, [r4, #0]
    539e:	2b2e      	cmp	r3, #46	; 0x2e
    53a0:	d10b      	bne.n	53ba <_svfiprintf_r+0x122>
    53a2:	7863      	ldrb	r3, [r4, #1]
    53a4:	1c62      	adds	r2, r4, #1
    53a6:	2b2a      	cmp	r3, #42	; 0x2a
    53a8:	d13e      	bne.n	5428 <_svfiprintf_r+0x190>
    53aa:	9b05      	ldr	r3, [sp, #20]
    53ac:	3402      	adds	r4, #2
    53ae:	1d1a      	adds	r2, r3, #4
    53b0:	681b      	ldr	r3, [r3, #0]
    53b2:	9205      	str	r2, [sp, #20]
    53b4:	2b00      	cmp	r3, #0
    53b6:	db34      	blt.n	5422 <_svfiprintf_r+0x18a>
    53b8:	9307      	str	r3, [sp, #28]
    53ba:	4e35      	ldr	r6, [pc, #212]	; (5490 <_svfiprintf_r+0x1f8>)
    53bc:	7821      	ldrb	r1, [r4, #0]
    53be:	2203      	movs	r2, #3
    53c0:	0030      	movs	r0, r6
    53c2:	f000 fa07 	bl	57d4 <memchr>
    53c6:	2800      	cmp	r0, #0
    53c8:	d006      	beq.n	53d8 <_svfiprintf_r+0x140>
    53ca:	2340      	movs	r3, #64	; 0x40
    53cc:	1b80      	subs	r0, r0, r6
    53ce:	4083      	lsls	r3, r0
    53d0:	682a      	ldr	r2, [r5, #0]
    53d2:	3401      	adds	r4, #1
    53d4:	4313      	orrs	r3, r2
    53d6:	602b      	str	r3, [r5, #0]
    53d8:	7821      	ldrb	r1, [r4, #0]
    53da:	2206      	movs	r2, #6
    53dc:	482d      	ldr	r0, [pc, #180]	; (5494 <_svfiprintf_r+0x1fc>)
    53de:	1c66      	adds	r6, r4, #1
    53e0:	7629      	strb	r1, [r5, #24]
    53e2:	f000 f9f7 	bl	57d4 <memchr>
    53e6:	2800      	cmp	r0, #0
    53e8:	d046      	beq.n	5478 <_svfiprintf_r+0x1e0>
    53ea:	4b2b      	ldr	r3, [pc, #172]	; (5498 <_svfiprintf_r+0x200>)
    53ec:	2b00      	cmp	r3, #0
    53ee:	d12f      	bne.n	5450 <_svfiprintf_r+0x1b8>
    53f0:	6829      	ldr	r1, [r5, #0]
    53f2:	9b05      	ldr	r3, [sp, #20]
    53f4:	2207      	movs	r2, #7
    53f6:	05c9      	lsls	r1, r1, #23
    53f8:	d528      	bpl.n	544c <_svfiprintf_r+0x1b4>
    53fa:	189b      	adds	r3, r3, r2
    53fc:	4393      	bics	r3, r2
    53fe:	3308      	adds	r3, #8
    5400:	9305      	str	r3, [sp, #20]
    5402:	696b      	ldr	r3, [r5, #20]
    5404:	9a03      	ldr	r2, [sp, #12]
    5406:	189b      	adds	r3, r3, r2
    5408:	616b      	str	r3, [r5, #20]
    540a:	e767      	b.n	52dc <_svfiprintf_r+0x44>
    540c:	425b      	negs	r3, r3
    540e:	60eb      	str	r3, [r5, #12]
    5410:	2302      	movs	r3, #2
    5412:	430b      	orrs	r3, r1
    5414:	602b      	str	r3, [r5, #0]
    5416:	e7c0      	b.n	539a <_svfiprintf_r+0x102>
    5418:	434b      	muls	r3, r1
    541a:	3401      	adds	r4, #1
    541c:	189b      	adds	r3, r3, r2
    541e:	2001      	movs	r0, #1
    5420:	e7a0      	b.n	5364 <_svfiprintf_r+0xcc>
    5422:	2301      	movs	r3, #1
    5424:	425b      	negs	r3, r3
    5426:	e7c7      	b.n	53b8 <_svfiprintf_r+0x120>
    5428:	2300      	movs	r3, #0
    542a:	0014      	movs	r4, r2
    542c:	200a      	movs	r0, #10
    542e:	001a      	movs	r2, r3
    5430:	606b      	str	r3, [r5, #4]
    5432:	7821      	ldrb	r1, [r4, #0]
    5434:	3930      	subs	r1, #48	; 0x30
    5436:	2909      	cmp	r1, #9
    5438:	d903      	bls.n	5442 <_svfiprintf_r+0x1aa>
    543a:	2b00      	cmp	r3, #0
    543c:	d0bd      	beq.n	53ba <_svfiprintf_r+0x122>
    543e:	9207      	str	r2, [sp, #28]
    5440:	e7bb      	b.n	53ba <_svfiprintf_r+0x122>
    5442:	4342      	muls	r2, r0
    5444:	3401      	adds	r4, #1
    5446:	1852      	adds	r2, r2, r1
    5448:	2301      	movs	r3, #1
    544a:	e7f2      	b.n	5432 <_svfiprintf_r+0x19a>
    544c:	3307      	adds	r3, #7
    544e:	e7d5      	b.n	53fc <_svfiprintf_r+0x164>
    5450:	ab05      	add	r3, sp, #20
    5452:	9300      	str	r3, [sp, #0]
    5454:	003a      	movs	r2, r7
    5456:	4b11      	ldr	r3, [pc, #68]	; (549c <_svfiprintf_r+0x204>)
    5458:	0029      	movs	r1, r5
    545a:	9802      	ldr	r0, [sp, #8]
    545c:	e000      	b.n	5460 <_svfiprintf_r+0x1c8>
    545e:	bf00      	nop
    5460:	9003      	str	r0, [sp, #12]
    5462:	9b03      	ldr	r3, [sp, #12]
    5464:	3301      	adds	r3, #1
    5466:	d1cc      	bne.n	5402 <_svfiprintf_r+0x16a>
    5468:	89bb      	ldrh	r3, [r7, #12]
    546a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    546c:	065b      	lsls	r3, r3, #25
    546e:	d400      	bmi.n	5472 <_svfiprintf_r+0x1da>
    5470:	e729      	b.n	52c6 <_svfiprintf_r+0x2e>
    5472:	2001      	movs	r0, #1
    5474:	4240      	negs	r0, r0
    5476:	e726      	b.n	52c6 <_svfiprintf_r+0x2e>
    5478:	ab05      	add	r3, sp, #20
    547a:	9300      	str	r3, [sp, #0]
    547c:	003a      	movs	r2, r7
    547e:	4b07      	ldr	r3, [pc, #28]	; (549c <_svfiprintf_r+0x204>)
    5480:	0029      	movs	r1, r5
    5482:	9802      	ldr	r0, [sp, #8]
    5484:	f000 f87a 	bl	557c <_printf_i>
    5488:	e7ea      	b.n	5460 <_svfiprintf_r+0x1c8>
    548a:	46c0      	nop			; (mov r8, r8)
    548c:	00005bc4 	.word	0x00005bc4
    5490:	00005bca 	.word	0x00005bca
    5494:	00005bce 	.word	0x00005bce
    5498:	00000000 	.word	0x00000000
    549c:	000051d5 	.word	0x000051d5

000054a0 <_printf_common>:
    54a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    54a2:	0015      	movs	r5, r2
    54a4:	9301      	str	r3, [sp, #4]
    54a6:	688a      	ldr	r2, [r1, #8]
    54a8:	690b      	ldr	r3, [r1, #16]
    54aa:	9000      	str	r0, [sp, #0]
    54ac:	000c      	movs	r4, r1
    54ae:	4293      	cmp	r3, r2
    54b0:	da00      	bge.n	54b4 <_printf_common+0x14>
    54b2:	0013      	movs	r3, r2
    54b4:	0022      	movs	r2, r4
    54b6:	602b      	str	r3, [r5, #0]
    54b8:	3243      	adds	r2, #67	; 0x43
    54ba:	7812      	ldrb	r2, [r2, #0]
    54bc:	2a00      	cmp	r2, #0
    54be:	d001      	beq.n	54c4 <_printf_common+0x24>
    54c0:	3301      	adds	r3, #1
    54c2:	602b      	str	r3, [r5, #0]
    54c4:	6823      	ldr	r3, [r4, #0]
    54c6:	069b      	lsls	r3, r3, #26
    54c8:	d502      	bpl.n	54d0 <_printf_common+0x30>
    54ca:	682b      	ldr	r3, [r5, #0]
    54cc:	3302      	adds	r3, #2
    54ce:	602b      	str	r3, [r5, #0]
    54d0:	2706      	movs	r7, #6
    54d2:	6823      	ldr	r3, [r4, #0]
    54d4:	401f      	ands	r7, r3
    54d6:	d027      	beq.n	5528 <_printf_common+0x88>
    54d8:	0023      	movs	r3, r4
    54da:	3343      	adds	r3, #67	; 0x43
    54dc:	781b      	ldrb	r3, [r3, #0]
    54de:	1e5a      	subs	r2, r3, #1
    54e0:	4193      	sbcs	r3, r2
    54e2:	6822      	ldr	r2, [r4, #0]
    54e4:	0692      	lsls	r2, r2, #26
    54e6:	d430      	bmi.n	554a <_printf_common+0xaa>
    54e8:	0022      	movs	r2, r4
    54ea:	9901      	ldr	r1, [sp, #4]
    54ec:	3243      	adds	r2, #67	; 0x43
    54ee:	9800      	ldr	r0, [sp, #0]
    54f0:	9e08      	ldr	r6, [sp, #32]
    54f2:	47b0      	blx	r6
    54f4:	1c43      	adds	r3, r0, #1
    54f6:	d025      	beq.n	5544 <_printf_common+0xa4>
    54f8:	2306      	movs	r3, #6
    54fa:	6820      	ldr	r0, [r4, #0]
    54fc:	682a      	ldr	r2, [r5, #0]
    54fe:	68e1      	ldr	r1, [r4, #12]
    5500:	4003      	ands	r3, r0
    5502:	2500      	movs	r5, #0
    5504:	2b04      	cmp	r3, #4
    5506:	d103      	bne.n	5510 <_printf_common+0x70>
    5508:	1a8d      	subs	r5, r1, r2
    550a:	43eb      	mvns	r3, r5
    550c:	17db      	asrs	r3, r3, #31
    550e:	401d      	ands	r5, r3
    5510:	68a3      	ldr	r3, [r4, #8]
    5512:	6922      	ldr	r2, [r4, #16]
    5514:	4293      	cmp	r3, r2
    5516:	dd01      	ble.n	551c <_printf_common+0x7c>
    5518:	1a9b      	subs	r3, r3, r2
    551a:	18ed      	adds	r5, r5, r3
    551c:	2700      	movs	r7, #0
    551e:	42bd      	cmp	r5, r7
    5520:	d120      	bne.n	5564 <_printf_common+0xc4>
    5522:	2000      	movs	r0, #0
    5524:	e010      	b.n	5548 <_printf_common+0xa8>
    5526:	3701      	adds	r7, #1
    5528:	68e3      	ldr	r3, [r4, #12]
    552a:	682a      	ldr	r2, [r5, #0]
    552c:	1a9b      	subs	r3, r3, r2
    552e:	429f      	cmp	r7, r3
    5530:	dad2      	bge.n	54d8 <_printf_common+0x38>
    5532:	0022      	movs	r2, r4
    5534:	2301      	movs	r3, #1
    5536:	3219      	adds	r2, #25
    5538:	9901      	ldr	r1, [sp, #4]
    553a:	9800      	ldr	r0, [sp, #0]
    553c:	9e08      	ldr	r6, [sp, #32]
    553e:	47b0      	blx	r6
    5540:	1c43      	adds	r3, r0, #1
    5542:	d1f0      	bne.n	5526 <_printf_common+0x86>
    5544:	2001      	movs	r0, #1
    5546:	4240      	negs	r0, r0
    5548:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    554a:	2030      	movs	r0, #48	; 0x30
    554c:	18e1      	adds	r1, r4, r3
    554e:	3143      	adds	r1, #67	; 0x43
    5550:	7008      	strb	r0, [r1, #0]
    5552:	0021      	movs	r1, r4
    5554:	1c5a      	adds	r2, r3, #1
    5556:	3145      	adds	r1, #69	; 0x45
    5558:	7809      	ldrb	r1, [r1, #0]
    555a:	18a2      	adds	r2, r4, r2
    555c:	3243      	adds	r2, #67	; 0x43
    555e:	3302      	adds	r3, #2
    5560:	7011      	strb	r1, [r2, #0]
    5562:	e7c1      	b.n	54e8 <_printf_common+0x48>
    5564:	0022      	movs	r2, r4
    5566:	2301      	movs	r3, #1
    5568:	321a      	adds	r2, #26
    556a:	9901      	ldr	r1, [sp, #4]
    556c:	9800      	ldr	r0, [sp, #0]
    556e:	9e08      	ldr	r6, [sp, #32]
    5570:	47b0      	blx	r6
    5572:	1c43      	adds	r3, r0, #1
    5574:	d0e6      	beq.n	5544 <_printf_common+0xa4>
    5576:	3701      	adds	r7, #1
    5578:	e7d1      	b.n	551e <_printf_common+0x7e>
	...

0000557c <_printf_i>:
    557c:	b5f0      	push	{r4, r5, r6, r7, lr}
    557e:	b08b      	sub	sp, #44	; 0x2c
    5580:	9206      	str	r2, [sp, #24]
    5582:	000a      	movs	r2, r1
    5584:	3243      	adds	r2, #67	; 0x43
    5586:	9307      	str	r3, [sp, #28]
    5588:	9005      	str	r0, [sp, #20]
    558a:	9204      	str	r2, [sp, #16]
    558c:	7e0a      	ldrb	r2, [r1, #24]
    558e:	000c      	movs	r4, r1
    5590:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5592:	2a6e      	cmp	r2, #110	; 0x6e
    5594:	d100      	bne.n	5598 <_printf_i+0x1c>
    5596:	e08f      	b.n	56b8 <_printf_i+0x13c>
    5598:	d817      	bhi.n	55ca <_printf_i+0x4e>
    559a:	2a63      	cmp	r2, #99	; 0x63
    559c:	d02c      	beq.n	55f8 <_printf_i+0x7c>
    559e:	d808      	bhi.n	55b2 <_printf_i+0x36>
    55a0:	2a00      	cmp	r2, #0
    55a2:	d100      	bne.n	55a6 <_printf_i+0x2a>
    55a4:	e099      	b.n	56da <_printf_i+0x15e>
    55a6:	2a58      	cmp	r2, #88	; 0x58
    55a8:	d054      	beq.n	5654 <_printf_i+0xd8>
    55aa:	0026      	movs	r6, r4
    55ac:	3642      	adds	r6, #66	; 0x42
    55ae:	7032      	strb	r2, [r6, #0]
    55b0:	e029      	b.n	5606 <_printf_i+0x8a>
    55b2:	2a64      	cmp	r2, #100	; 0x64
    55b4:	d001      	beq.n	55ba <_printf_i+0x3e>
    55b6:	2a69      	cmp	r2, #105	; 0x69
    55b8:	d1f7      	bne.n	55aa <_printf_i+0x2e>
    55ba:	6821      	ldr	r1, [r4, #0]
    55bc:	681a      	ldr	r2, [r3, #0]
    55be:	0608      	lsls	r0, r1, #24
    55c0:	d523      	bpl.n	560a <_printf_i+0x8e>
    55c2:	1d11      	adds	r1, r2, #4
    55c4:	6019      	str	r1, [r3, #0]
    55c6:	6815      	ldr	r5, [r2, #0]
    55c8:	e025      	b.n	5616 <_printf_i+0x9a>
    55ca:	2a73      	cmp	r2, #115	; 0x73
    55cc:	d100      	bne.n	55d0 <_printf_i+0x54>
    55ce:	e088      	b.n	56e2 <_printf_i+0x166>
    55d0:	d808      	bhi.n	55e4 <_printf_i+0x68>
    55d2:	2a6f      	cmp	r2, #111	; 0x6f
    55d4:	d029      	beq.n	562a <_printf_i+0xae>
    55d6:	2a70      	cmp	r2, #112	; 0x70
    55d8:	d1e7      	bne.n	55aa <_printf_i+0x2e>
    55da:	2220      	movs	r2, #32
    55dc:	6809      	ldr	r1, [r1, #0]
    55de:	430a      	orrs	r2, r1
    55e0:	6022      	str	r2, [r4, #0]
    55e2:	e003      	b.n	55ec <_printf_i+0x70>
    55e4:	2a75      	cmp	r2, #117	; 0x75
    55e6:	d020      	beq.n	562a <_printf_i+0xae>
    55e8:	2a78      	cmp	r2, #120	; 0x78
    55ea:	d1de      	bne.n	55aa <_printf_i+0x2e>
    55ec:	0022      	movs	r2, r4
    55ee:	2178      	movs	r1, #120	; 0x78
    55f0:	3245      	adds	r2, #69	; 0x45
    55f2:	7011      	strb	r1, [r2, #0]
    55f4:	4a6c      	ldr	r2, [pc, #432]	; (57a8 <_printf_i+0x22c>)
    55f6:	e030      	b.n	565a <_printf_i+0xde>
    55f8:	000e      	movs	r6, r1
    55fa:	681a      	ldr	r2, [r3, #0]
    55fc:	3642      	adds	r6, #66	; 0x42
    55fe:	1d11      	adds	r1, r2, #4
    5600:	6019      	str	r1, [r3, #0]
    5602:	6813      	ldr	r3, [r2, #0]
    5604:	7033      	strb	r3, [r6, #0]
    5606:	2301      	movs	r3, #1
    5608:	e079      	b.n	56fe <_printf_i+0x182>
    560a:	0649      	lsls	r1, r1, #25
    560c:	d5d9      	bpl.n	55c2 <_printf_i+0x46>
    560e:	1d11      	adds	r1, r2, #4
    5610:	6019      	str	r1, [r3, #0]
    5612:	2300      	movs	r3, #0
    5614:	5ed5      	ldrsh	r5, [r2, r3]
    5616:	2d00      	cmp	r5, #0
    5618:	da03      	bge.n	5622 <_printf_i+0xa6>
    561a:	232d      	movs	r3, #45	; 0x2d
    561c:	9a04      	ldr	r2, [sp, #16]
    561e:	426d      	negs	r5, r5
    5620:	7013      	strb	r3, [r2, #0]
    5622:	4b62      	ldr	r3, [pc, #392]	; (57ac <_printf_i+0x230>)
    5624:	270a      	movs	r7, #10
    5626:	9303      	str	r3, [sp, #12]
    5628:	e02f      	b.n	568a <_printf_i+0x10e>
    562a:	6820      	ldr	r0, [r4, #0]
    562c:	6819      	ldr	r1, [r3, #0]
    562e:	0605      	lsls	r5, r0, #24
    5630:	d503      	bpl.n	563a <_printf_i+0xbe>
    5632:	1d08      	adds	r0, r1, #4
    5634:	6018      	str	r0, [r3, #0]
    5636:	680d      	ldr	r5, [r1, #0]
    5638:	e005      	b.n	5646 <_printf_i+0xca>
    563a:	0640      	lsls	r0, r0, #25
    563c:	d5f9      	bpl.n	5632 <_printf_i+0xb6>
    563e:	680d      	ldr	r5, [r1, #0]
    5640:	1d08      	adds	r0, r1, #4
    5642:	6018      	str	r0, [r3, #0]
    5644:	b2ad      	uxth	r5, r5
    5646:	4b59      	ldr	r3, [pc, #356]	; (57ac <_printf_i+0x230>)
    5648:	2708      	movs	r7, #8
    564a:	9303      	str	r3, [sp, #12]
    564c:	2a6f      	cmp	r2, #111	; 0x6f
    564e:	d018      	beq.n	5682 <_printf_i+0x106>
    5650:	270a      	movs	r7, #10
    5652:	e016      	b.n	5682 <_printf_i+0x106>
    5654:	3145      	adds	r1, #69	; 0x45
    5656:	700a      	strb	r2, [r1, #0]
    5658:	4a54      	ldr	r2, [pc, #336]	; (57ac <_printf_i+0x230>)
    565a:	9203      	str	r2, [sp, #12]
    565c:	681a      	ldr	r2, [r3, #0]
    565e:	6821      	ldr	r1, [r4, #0]
    5660:	1d10      	adds	r0, r2, #4
    5662:	6018      	str	r0, [r3, #0]
    5664:	6815      	ldr	r5, [r2, #0]
    5666:	0608      	lsls	r0, r1, #24
    5668:	d522      	bpl.n	56b0 <_printf_i+0x134>
    566a:	07cb      	lsls	r3, r1, #31
    566c:	d502      	bpl.n	5674 <_printf_i+0xf8>
    566e:	2320      	movs	r3, #32
    5670:	4319      	orrs	r1, r3
    5672:	6021      	str	r1, [r4, #0]
    5674:	2710      	movs	r7, #16
    5676:	2d00      	cmp	r5, #0
    5678:	d103      	bne.n	5682 <_printf_i+0x106>
    567a:	2320      	movs	r3, #32
    567c:	6822      	ldr	r2, [r4, #0]
    567e:	439a      	bics	r2, r3
    5680:	6022      	str	r2, [r4, #0]
    5682:	0023      	movs	r3, r4
    5684:	2200      	movs	r2, #0
    5686:	3343      	adds	r3, #67	; 0x43
    5688:	701a      	strb	r2, [r3, #0]
    568a:	6863      	ldr	r3, [r4, #4]
    568c:	60a3      	str	r3, [r4, #8]
    568e:	2b00      	cmp	r3, #0
    5690:	db5c      	blt.n	574c <_printf_i+0x1d0>
    5692:	2204      	movs	r2, #4
    5694:	6821      	ldr	r1, [r4, #0]
    5696:	4391      	bics	r1, r2
    5698:	6021      	str	r1, [r4, #0]
    569a:	2d00      	cmp	r5, #0
    569c:	d158      	bne.n	5750 <_printf_i+0x1d4>
    569e:	9e04      	ldr	r6, [sp, #16]
    56a0:	2b00      	cmp	r3, #0
    56a2:	d064      	beq.n	576e <_printf_i+0x1f2>
    56a4:	0026      	movs	r6, r4
    56a6:	9b03      	ldr	r3, [sp, #12]
    56a8:	3642      	adds	r6, #66	; 0x42
    56aa:	781b      	ldrb	r3, [r3, #0]
    56ac:	7033      	strb	r3, [r6, #0]
    56ae:	e05e      	b.n	576e <_printf_i+0x1f2>
    56b0:	0648      	lsls	r0, r1, #25
    56b2:	d5da      	bpl.n	566a <_printf_i+0xee>
    56b4:	b2ad      	uxth	r5, r5
    56b6:	e7d8      	b.n	566a <_printf_i+0xee>
    56b8:	6809      	ldr	r1, [r1, #0]
    56ba:	681a      	ldr	r2, [r3, #0]
    56bc:	0608      	lsls	r0, r1, #24
    56be:	d505      	bpl.n	56cc <_printf_i+0x150>
    56c0:	1d11      	adds	r1, r2, #4
    56c2:	6019      	str	r1, [r3, #0]
    56c4:	6813      	ldr	r3, [r2, #0]
    56c6:	6962      	ldr	r2, [r4, #20]
    56c8:	601a      	str	r2, [r3, #0]
    56ca:	e006      	b.n	56da <_printf_i+0x15e>
    56cc:	0649      	lsls	r1, r1, #25
    56ce:	d5f7      	bpl.n	56c0 <_printf_i+0x144>
    56d0:	1d11      	adds	r1, r2, #4
    56d2:	6019      	str	r1, [r3, #0]
    56d4:	6813      	ldr	r3, [r2, #0]
    56d6:	8aa2      	ldrh	r2, [r4, #20]
    56d8:	801a      	strh	r2, [r3, #0]
    56da:	2300      	movs	r3, #0
    56dc:	9e04      	ldr	r6, [sp, #16]
    56de:	6123      	str	r3, [r4, #16]
    56e0:	e054      	b.n	578c <_printf_i+0x210>
    56e2:	681a      	ldr	r2, [r3, #0]
    56e4:	1d11      	adds	r1, r2, #4
    56e6:	6019      	str	r1, [r3, #0]
    56e8:	6816      	ldr	r6, [r2, #0]
    56ea:	2100      	movs	r1, #0
    56ec:	6862      	ldr	r2, [r4, #4]
    56ee:	0030      	movs	r0, r6
    56f0:	f000 f870 	bl	57d4 <memchr>
    56f4:	2800      	cmp	r0, #0
    56f6:	d001      	beq.n	56fc <_printf_i+0x180>
    56f8:	1b80      	subs	r0, r0, r6
    56fa:	6060      	str	r0, [r4, #4]
    56fc:	6863      	ldr	r3, [r4, #4]
    56fe:	6123      	str	r3, [r4, #16]
    5700:	2300      	movs	r3, #0
    5702:	9a04      	ldr	r2, [sp, #16]
    5704:	7013      	strb	r3, [r2, #0]
    5706:	e041      	b.n	578c <_printf_i+0x210>
    5708:	6923      	ldr	r3, [r4, #16]
    570a:	0032      	movs	r2, r6
    570c:	9906      	ldr	r1, [sp, #24]
    570e:	9805      	ldr	r0, [sp, #20]
    5710:	9d07      	ldr	r5, [sp, #28]
    5712:	47a8      	blx	r5
    5714:	1c43      	adds	r3, r0, #1
    5716:	d043      	beq.n	57a0 <_printf_i+0x224>
    5718:	6823      	ldr	r3, [r4, #0]
    571a:	2500      	movs	r5, #0
    571c:	079b      	lsls	r3, r3, #30
    571e:	d40f      	bmi.n	5740 <_printf_i+0x1c4>
    5720:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5722:	68e0      	ldr	r0, [r4, #12]
    5724:	4298      	cmp	r0, r3
    5726:	da3d      	bge.n	57a4 <_printf_i+0x228>
    5728:	0018      	movs	r0, r3
    572a:	e03b      	b.n	57a4 <_printf_i+0x228>
    572c:	0022      	movs	r2, r4
    572e:	2301      	movs	r3, #1
    5730:	3219      	adds	r2, #25
    5732:	9906      	ldr	r1, [sp, #24]
    5734:	9805      	ldr	r0, [sp, #20]
    5736:	9e07      	ldr	r6, [sp, #28]
    5738:	47b0      	blx	r6
    573a:	1c43      	adds	r3, r0, #1
    573c:	d030      	beq.n	57a0 <_printf_i+0x224>
    573e:	3501      	adds	r5, #1
    5740:	68e3      	ldr	r3, [r4, #12]
    5742:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5744:	1a9b      	subs	r3, r3, r2
    5746:	429d      	cmp	r5, r3
    5748:	dbf0      	blt.n	572c <_printf_i+0x1b0>
    574a:	e7e9      	b.n	5720 <_printf_i+0x1a4>
    574c:	2d00      	cmp	r5, #0
    574e:	d0a9      	beq.n	56a4 <_printf_i+0x128>
    5750:	9e04      	ldr	r6, [sp, #16]
    5752:	0028      	movs	r0, r5
    5754:	0039      	movs	r1, r7
    5756:	f7fd ff07 	bl	3568 <__aeabi_uidivmod>
    575a:	9b03      	ldr	r3, [sp, #12]
    575c:	3e01      	subs	r6, #1
    575e:	5c5b      	ldrb	r3, [r3, r1]
    5760:	0028      	movs	r0, r5
    5762:	7033      	strb	r3, [r6, #0]
    5764:	0039      	movs	r1, r7
    5766:	f7fd fe79 	bl	345c <__udivsi3>
    576a:	1e05      	subs	r5, r0, #0
    576c:	d1f1      	bne.n	5752 <_printf_i+0x1d6>
    576e:	2f08      	cmp	r7, #8
    5770:	d109      	bne.n	5786 <_printf_i+0x20a>
    5772:	6823      	ldr	r3, [r4, #0]
    5774:	07db      	lsls	r3, r3, #31
    5776:	d506      	bpl.n	5786 <_printf_i+0x20a>
    5778:	6863      	ldr	r3, [r4, #4]
    577a:	6922      	ldr	r2, [r4, #16]
    577c:	4293      	cmp	r3, r2
    577e:	dc02      	bgt.n	5786 <_printf_i+0x20a>
    5780:	2330      	movs	r3, #48	; 0x30
    5782:	3e01      	subs	r6, #1
    5784:	7033      	strb	r3, [r6, #0]
    5786:	9b04      	ldr	r3, [sp, #16]
    5788:	1b9b      	subs	r3, r3, r6
    578a:	6123      	str	r3, [r4, #16]
    578c:	9b07      	ldr	r3, [sp, #28]
    578e:	aa09      	add	r2, sp, #36	; 0x24
    5790:	9300      	str	r3, [sp, #0]
    5792:	0021      	movs	r1, r4
    5794:	9b06      	ldr	r3, [sp, #24]
    5796:	9805      	ldr	r0, [sp, #20]
    5798:	f7ff fe82 	bl	54a0 <_printf_common>
    579c:	1c43      	adds	r3, r0, #1
    579e:	d1b3      	bne.n	5708 <_printf_i+0x18c>
    57a0:	2001      	movs	r0, #1
    57a2:	4240      	negs	r0, r0
    57a4:	b00b      	add	sp, #44	; 0x2c
    57a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    57a8:	00005be6 	.word	0x00005be6
    57ac:	00005bd5 	.word	0x00005bd5

000057b0 <_sbrk_r>:
    57b0:	2300      	movs	r3, #0
    57b2:	b570      	push	{r4, r5, r6, lr}
    57b4:	4c06      	ldr	r4, [pc, #24]	; (57d0 <_sbrk_r+0x20>)
    57b6:	0005      	movs	r5, r0
    57b8:	0008      	movs	r0, r1
    57ba:	6023      	str	r3, [r4, #0]
    57bc:	f7fd fb50 	bl	2e60 <_sbrk>
    57c0:	1c43      	adds	r3, r0, #1
    57c2:	d103      	bne.n	57cc <_sbrk_r+0x1c>
    57c4:	6823      	ldr	r3, [r4, #0]
    57c6:	2b00      	cmp	r3, #0
    57c8:	d000      	beq.n	57cc <_sbrk_r+0x1c>
    57ca:	602b      	str	r3, [r5, #0]
    57cc:	bd70      	pop	{r4, r5, r6, pc}
    57ce:	46c0      	nop			; (mov r8, r8)
    57d0:	200002a0 	.word	0x200002a0

000057d4 <memchr>:
    57d4:	b2c9      	uxtb	r1, r1
    57d6:	1882      	adds	r2, r0, r2
    57d8:	4290      	cmp	r0, r2
    57da:	d101      	bne.n	57e0 <memchr+0xc>
    57dc:	2000      	movs	r0, #0
    57de:	4770      	bx	lr
    57e0:	7803      	ldrb	r3, [r0, #0]
    57e2:	428b      	cmp	r3, r1
    57e4:	d0fb      	beq.n	57de <memchr+0xa>
    57e6:	3001      	adds	r0, #1
    57e8:	e7f6      	b.n	57d8 <memchr+0x4>

000057ea <memmove>:
    57ea:	b510      	push	{r4, lr}
    57ec:	4288      	cmp	r0, r1
    57ee:	d902      	bls.n	57f6 <memmove+0xc>
    57f0:	188b      	adds	r3, r1, r2
    57f2:	4298      	cmp	r0, r3
    57f4:	d308      	bcc.n	5808 <memmove+0x1e>
    57f6:	2300      	movs	r3, #0
    57f8:	429a      	cmp	r2, r3
    57fa:	d007      	beq.n	580c <memmove+0x22>
    57fc:	5ccc      	ldrb	r4, [r1, r3]
    57fe:	54c4      	strb	r4, [r0, r3]
    5800:	3301      	adds	r3, #1
    5802:	e7f9      	b.n	57f8 <memmove+0xe>
    5804:	5c8b      	ldrb	r3, [r1, r2]
    5806:	5483      	strb	r3, [r0, r2]
    5808:	3a01      	subs	r2, #1
    580a:	d2fb      	bcs.n	5804 <memmove+0x1a>
    580c:	bd10      	pop	{r4, pc}

0000580e <__malloc_lock>:
    580e:	4770      	bx	lr

00005810 <__malloc_unlock>:
    5810:	4770      	bx	lr
	...

00005814 <_free_r>:
    5814:	b570      	push	{r4, r5, r6, lr}
    5816:	0005      	movs	r5, r0
    5818:	2900      	cmp	r1, #0
    581a:	d010      	beq.n	583e <_free_r+0x2a>
    581c:	1f0c      	subs	r4, r1, #4
    581e:	6823      	ldr	r3, [r4, #0]
    5820:	2b00      	cmp	r3, #0
    5822:	da00      	bge.n	5826 <_free_r+0x12>
    5824:	18e4      	adds	r4, r4, r3
    5826:	0028      	movs	r0, r5
    5828:	f7ff fff1 	bl	580e <__malloc_lock>
    582c:	4a1d      	ldr	r2, [pc, #116]	; (58a4 <_free_r+0x90>)
    582e:	6813      	ldr	r3, [r2, #0]
    5830:	2b00      	cmp	r3, #0
    5832:	d105      	bne.n	5840 <_free_r+0x2c>
    5834:	6063      	str	r3, [r4, #4]
    5836:	6014      	str	r4, [r2, #0]
    5838:	0028      	movs	r0, r5
    583a:	f7ff ffe9 	bl	5810 <__malloc_unlock>
    583e:	bd70      	pop	{r4, r5, r6, pc}
    5840:	42a3      	cmp	r3, r4
    5842:	d909      	bls.n	5858 <_free_r+0x44>
    5844:	6821      	ldr	r1, [r4, #0]
    5846:	1860      	adds	r0, r4, r1
    5848:	4283      	cmp	r3, r0
    584a:	d1f3      	bne.n	5834 <_free_r+0x20>
    584c:	6818      	ldr	r0, [r3, #0]
    584e:	685b      	ldr	r3, [r3, #4]
    5850:	1841      	adds	r1, r0, r1
    5852:	6021      	str	r1, [r4, #0]
    5854:	e7ee      	b.n	5834 <_free_r+0x20>
    5856:	0013      	movs	r3, r2
    5858:	685a      	ldr	r2, [r3, #4]
    585a:	2a00      	cmp	r2, #0
    585c:	d001      	beq.n	5862 <_free_r+0x4e>
    585e:	42a2      	cmp	r2, r4
    5860:	d9f9      	bls.n	5856 <_free_r+0x42>
    5862:	6819      	ldr	r1, [r3, #0]
    5864:	1858      	adds	r0, r3, r1
    5866:	42a0      	cmp	r0, r4
    5868:	d10b      	bne.n	5882 <_free_r+0x6e>
    586a:	6820      	ldr	r0, [r4, #0]
    586c:	1809      	adds	r1, r1, r0
    586e:	1858      	adds	r0, r3, r1
    5870:	6019      	str	r1, [r3, #0]
    5872:	4282      	cmp	r2, r0
    5874:	d1e0      	bne.n	5838 <_free_r+0x24>
    5876:	6810      	ldr	r0, [r2, #0]
    5878:	6852      	ldr	r2, [r2, #4]
    587a:	1841      	adds	r1, r0, r1
    587c:	6019      	str	r1, [r3, #0]
    587e:	605a      	str	r2, [r3, #4]
    5880:	e7da      	b.n	5838 <_free_r+0x24>
    5882:	42a0      	cmp	r0, r4
    5884:	d902      	bls.n	588c <_free_r+0x78>
    5886:	230c      	movs	r3, #12
    5888:	602b      	str	r3, [r5, #0]
    588a:	e7d5      	b.n	5838 <_free_r+0x24>
    588c:	6821      	ldr	r1, [r4, #0]
    588e:	1860      	adds	r0, r4, r1
    5890:	4282      	cmp	r2, r0
    5892:	d103      	bne.n	589c <_free_r+0x88>
    5894:	6810      	ldr	r0, [r2, #0]
    5896:	6852      	ldr	r2, [r2, #4]
    5898:	1841      	adds	r1, r0, r1
    589a:	6021      	str	r1, [r4, #0]
    589c:	6062      	str	r2, [r4, #4]
    589e:	605c      	str	r4, [r3, #4]
    58a0:	e7ca      	b.n	5838 <_free_r+0x24>
    58a2:	46c0      	nop			; (mov r8, r8)
    58a4:	200000dc 	.word	0x200000dc

000058a8 <_realloc_r>:
    58a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    58aa:	0007      	movs	r7, r0
    58ac:	000d      	movs	r5, r1
    58ae:	0016      	movs	r6, r2
    58b0:	2900      	cmp	r1, #0
    58b2:	d105      	bne.n	58c0 <_realloc_r+0x18>
    58b4:	0011      	movs	r1, r2
    58b6:	f7ff fc2f 	bl	5118 <_malloc_r>
    58ba:	0004      	movs	r4, r0
    58bc:	0020      	movs	r0, r4
    58be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    58c0:	2a00      	cmp	r2, #0
    58c2:	d103      	bne.n	58cc <_realloc_r+0x24>
    58c4:	f7ff ffa6 	bl	5814 <_free_r>
    58c8:	0034      	movs	r4, r6
    58ca:	e7f7      	b.n	58bc <_realloc_r+0x14>
    58cc:	f000 f812 	bl	58f4 <_malloc_usable_size_r>
    58d0:	002c      	movs	r4, r5
    58d2:	4286      	cmp	r6, r0
    58d4:	d9f2      	bls.n	58bc <_realloc_r+0x14>
    58d6:	0031      	movs	r1, r6
    58d8:	0038      	movs	r0, r7
    58da:	f7ff fc1d 	bl	5118 <_malloc_r>
    58de:	1e04      	subs	r4, r0, #0
    58e0:	d0ec      	beq.n	58bc <_realloc_r+0x14>
    58e2:	0029      	movs	r1, r5
    58e4:	0032      	movs	r2, r6
    58e6:	f7ff fbe1 	bl	50ac <memcpy>
    58ea:	0029      	movs	r1, r5
    58ec:	0038      	movs	r0, r7
    58ee:	f7ff ff91 	bl	5814 <_free_r>
    58f2:	e7e3      	b.n	58bc <_realloc_r+0x14>

000058f4 <_malloc_usable_size_r>:
    58f4:	1f0b      	subs	r3, r1, #4
    58f6:	681b      	ldr	r3, [r3, #0]
    58f8:	1f18      	subs	r0, r3, #4
    58fa:	2b00      	cmp	r3, #0
    58fc:	da01      	bge.n	5902 <_malloc_usable_size_r+0xe>
    58fe:	580b      	ldr	r3, [r1, r0]
    5900:	18c0      	adds	r0, r0, r3
    5902:	4770      	bx	lr
    5904:	4f54434f 	.word	0x4f54434f
    5908:	00000000 	.word	0x00000000
    590c:	3e4b4f3c 	.word	0x3e4b4f3c
    5910:	00000000 	.word	0x00000000
    5914:	00004b4f 	.word	0x00004b4f
    5918:	414f423c 	.word	0x414f423c
    591c:	003e4452 	.word	0x003e4452
    5920:	00020064 	.word	0x00020064
    5924:	20000010 	.word	0x20000010
    5928:	00000000 	.word	0x00000000
    592c:	00020064 	.word	0x00020064
    5930:	2000000c 	.word	0x2000000c
    5934:	00000000 	.word	0x00000000
    5938:	00040064 	.word	0x00040064
    593c:	2000009c 	.word	0x2000009c
    5940:	00000000 	.word	0x00000000
    5944:	00000e0e 	.word	0x00000e0e
    5948:	0000105a 	.word	0x0000105a
    594c:	0000105a 	.word	0x0000105a
    5950:	0000105a 	.word	0x0000105a
    5954:	0000105a 	.word	0x0000105a
    5958:	0000105a 	.word	0x0000105a
    595c:	0000105a 	.word	0x0000105a
    5960:	0000105a 	.word	0x0000105a
    5964:	0000105a 	.word	0x0000105a
    5968:	0000105a 	.word	0x0000105a
    596c:	0000105a 	.word	0x0000105a
    5970:	0000105a 	.word	0x0000105a
    5974:	0000105a 	.word	0x0000105a
    5978:	0000105a 	.word	0x0000105a
    597c:	0000105a 	.word	0x0000105a
    5980:	0000105a 	.word	0x0000105a
    5984:	00000df6 	.word	0x00000df6
    5988:	0000105a 	.word	0x0000105a
    598c:	0000105a 	.word	0x0000105a
    5990:	0000105a 	.word	0x0000105a
    5994:	0000105a 	.word	0x0000105a
    5998:	0000105a 	.word	0x0000105a
    599c:	0000105a 	.word	0x0000105a
    59a0:	0000105a 	.word	0x0000105a
    59a4:	0000105a 	.word	0x0000105a
    59a8:	0000105a 	.word	0x0000105a
    59ac:	0000105a 	.word	0x0000105a
    59b0:	0000105a 	.word	0x0000105a
    59b4:	0000105a 	.word	0x0000105a
    59b8:	0000105a 	.word	0x0000105a
    59bc:	0000105a 	.word	0x0000105a
    59c0:	0000105a 	.word	0x0000105a
    59c4:	00000e06 	.word	0x00000e06
    59c8:	0000105a 	.word	0x0000105a
    59cc:	0000105a 	.word	0x0000105a
    59d0:	0000105a 	.word	0x0000105a
    59d4:	0000105a 	.word	0x0000105a
    59d8:	0000105a 	.word	0x0000105a
    59dc:	0000105a 	.word	0x0000105a
    59e0:	0000105a 	.word	0x0000105a
    59e4:	0000105a 	.word	0x0000105a
    59e8:	0000105a 	.word	0x0000105a
    59ec:	0000105a 	.word	0x0000105a
    59f0:	0000105a 	.word	0x0000105a
    59f4:	0000105a 	.word	0x0000105a
    59f8:	0000105a 	.word	0x0000105a
    59fc:	0000105a 	.word	0x0000105a
    5a00:	0000105a 	.word	0x0000105a
    5a04:	00000dfe 	.word	0x00000dfe
    5a08:	00000e16 	.word	0x00000e16
    5a0c:	00000dde 	.word	0x00000dde
    5a10:	00000dee 	.word	0x00000dee
    5a14:	00000de6 	.word	0x00000de6
    5a18:	00000002 	.word	0x00000002
    5a1c:	00000003 	.word	0x00000003
    5a20:	0000ffff 	.word	0x0000ffff
    5a24:	0000ffff 	.word	0x0000ffff
    5a28:	00000004 	.word	0x00000004
    5a2c:	00000005 	.word	0x00000005
    5a30:	00000006 	.word	0x00000006
    5a34:	00000007 	.word	0x00000007
    5a38:	0000ffff 	.word	0x0000ffff
    5a3c:	0000ffff 	.word	0x0000ffff
    5a40:	0000ffff 	.word	0x0000ffff
    5a44:	0000ffff 	.word	0x0000ffff
    5a48:	0000ffff 	.word	0x0000ffff
    5a4c:	0000ffff 	.word	0x0000ffff
    5a50:	0000ffff 	.word	0x0000ffff
    5a54:	0000ffff 	.word	0x0000ffff
    5a58:	00000008 	.word	0x00000008
    5a5c:	00000009 	.word	0x00000009
    5a60:	0000000a 	.word	0x0000000a
    5a64:	0000000b 	.word	0x0000000b
    5a68:	42000800 	.word	0x42000800
    5a6c:	42000c00 	.word	0x42000c00
    5a70:	42001000 	.word	0x42001000
    5a74:	42001400 	.word	0x42001400
    5a78:	0000271e 	.word	0x0000271e
    5a7c:	0000271a 	.word	0x0000271a
    5a80:	0000271a 	.word	0x0000271a
    5a84:	0000277c 	.word	0x0000277c
    5a88:	0000277c 	.word	0x0000277c
    5a8c:	00002732 	.word	0x00002732
    5a90:	00002724 	.word	0x00002724
    5a94:	00002738 	.word	0x00002738
    5a98:	0000276a 	.word	0x0000276a
    5a9c:	00002880 	.word	0x00002880
    5aa0:	00002860 	.word	0x00002860
    5aa4:	00002860 	.word	0x00002860
    5aa8:	000028ec 	.word	0x000028ec
    5aac:	00002872 	.word	0x00002872
    5ab0:	0000288e 	.word	0x0000288e
    5ab4:	00002864 	.word	0x00002864
    5ab8:	0000289c 	.word	0x0000289c
    5abc:	000028dc 	.word	0x000028dc
    5ac0:	503b553c 	.word	0x503b553c
    5ac4:	7531253d 	.word	0x7531253d
    5ac8:	00003e3b 	.word	0x00003e3b
    5acc:	4c3b553c 	.word	0x4c3b553c
    5ad0:	7531253d 	.word	0x7531253d
    5ad4:	00003e3b 	.word	0x00003e3b
    5ad8:	253d423c 	.word	0x253d423c
    5adc:	3e3b7533 	.word	0x3e3b7533
    5ae0:	00000000 	.word	0x00000000
    5ae4:	00003fb4 	.word	0x00003fb4
    5ae8:	00003f96 	.word	0x00003f96
    5aec:	00003f50 	.word	0x00003f50
    5af0:	00003e6e 	.word	0x00003e6e
    5af4:	00003f50 	.word	0x00003f50
    5af8:	00003f88 	.word	0x00003f88
    5afc:	00003f50 	.word	0x00003f50
    5b00:	00003e6e 	.word	0x00003e6e
    5b04:	00003f96 	.word	0x00003f96
    5b08:	00003f96 	.word	0x00003f96
    5b0c:	00003f88 	.word	0x00003f88
    5b10:	00003e6e 	.word	0x00003e6e
    5b14:	00003e66 	.word	0x00003e66
    5b18:	00003e66 	.word	0x00003e66
    5b1c:	00003e66 	.word	0x00003e66
    5b20:	000041cc 	.word	0x000041cc
    5b24:	00004614 	.word	0x00004614
    5b28:	000044d4 	.word	0x000044d4
    5b2c:	000044d4 	.word	0x000044d4
    5b30:	000044d0 	.word	0x000044d0
    5b34:	000045ec 	.word	0x000045ec
    5b38:	000045ec 	.word	0x000045ec
    5b3c:	000045de 	.word	0x000045de
    5b40:	000044d0 	.word	0x000044d0
    5b44:	000045ec 	.word	0x000045ec
    5b48:	000045de 	.word	0x000045de
    5b4c:	000045ec 	.word	0x000045ec
    5b50:	000044d0 	.word	0x000044d0
    5b54:	000045f4 	.word	0x000045f4
    5b58:	000045f4 	.word	0x000045f4
    5b5c:	000045f4 	.word	0x000045f4
    5b60:	000047f8 	.word	0x000047f8

00005b64 <__sf_fake_stderr>:
	...

00005b84 <__sf_fake_stdin>:
	...

00005ba4 <__sf_fake_stdout>:
	...
    5bc4:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    5bd4:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    5be4:	31300046 35343332 39383736 64636261     F.0123456789abcd
    5bf4:	00006665                                ef..

00005bf8 <_init>:
    5bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5bfa:	46c0      	nop			; (mov r8, r8)
    5bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5bfe:	bc08      	pop	{r3}
    5c00:	469e      	mov	lr, r3
    5c02:	4770      	bx	lr

00005c04 <__init_array_start>:
    5c04:	000000dd 	.word	0x000000dd

00005c08 <_fini>:
    5c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c0a:	46c0      	nop			; (mov r8, r8)
    5c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5c0e:	bc08      	pop	{r3}
    5c10:	469e      	mov	lr, r3
    5c12:	4770      	bx	lr

00005c14 <__fini_array_start>:
    5c14:	000000b5 	.word	0x000000b5
